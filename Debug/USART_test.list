
USART_test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004730  080000c0  080000c0  000010c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000dc8  080047f0  080047f0  000057f0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080055b8  080055b8  00007014  2**0
                  CONTENTS
  4 .ARM          00000008  080055b8  080055b8  000065b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080055c0  080055c0  00007014  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080055c0  080055c0  000065c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080055c4  080055c4  000065c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000014  20000000  080055c8  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000514  20000014  080055dc  00007014  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000528  080055dc  00007528  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00007014  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000ddb3  00000000  00000000  0000703c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002319  00000000  00000000  00014def  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000bc0  00000000  00000000  00017108  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000092b  00000000  00000000  00017cc8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00014133  00000000  00000000  000185f3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00011392  00000000  00000000  0002c726  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00078a87  00000000  00000000  0003dab8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000b653f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000029b8  00000000  00000000  000b6584  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000067  00000000  00000000  000b8f3c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	@ (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	@ (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	@ (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000014 	.word	0x20000014
 80000e0:	00000000 	.word	0x00000000
 80000e4:	080047d8 	.word	0x080047d8

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	@ (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	@ (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	@ (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			@ (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000018 	.word	0x20000018
 8000104:	080047d8 	.word	0x080047d8

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	@ 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			@ (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			@ (mov r8, r8)

08000220 <__aeabi_uldivmod>:
 8000220:	2b00      	cmp	r3, #0
 8000222:	d111      	bne.n	8000248 <__aeabi_uldivmod+0x28>
 8000224:	2a00      	cmp	r2, #0
 8000226:	d10f      	bne.n	8000248 <__aeabi_uldivmod+0x28>
 8000228:	2900      	cmp	r1, #0
 800022a:	d100      	bne.n	800022e <__aeabi_uldivmod+0xe>
 800022c:	2800      	cmp	r0, #0
 800022e:	d002      	beq.n	8000236 <__aeabi_uldivmod+0x16>
 8000230:	2100      	movs	r1, #0
 8000232:	43c9      	mvns	r1, r1
 8000234:	0008      	movs	r0, r1
 8000236:	b407      	push	{r0, r1, r2}
 8000238:	4802      	ldr	r0, [pc, #8]	@ (8000244 <__aeabi_uldivmod+0x24>)
 800023a:	a102      	add	r1, pc, #8	@ (adr r1, 8000244 <__aeabi_uldivmod+0x24>)
 800023c:	1840      	adds	r0, r0, r1
 800023e:	9002      	str	r0, [sp, #8]
 8000240:	bd03      	pop	{r0, r1, pc}
 8000242:	46c0      	nop			@ (mov r8, r8)
 8000244:	ffffffd9 	.word	0xffffffd9
 8000248:	b403      	push	{r0, r1}
 800024a:	4668      	mov	r0, sp
 800024c:	b501      	push	{r0, lr}
 800024e:	9802      	ldr	r0, [sp, #8]
 8000250:	f000 f834 	bl	80002bc <__udivmoddi4>
 8000254:	9b01      	ldr	r3, [sp, #4]
 8000256:	469e      	mov	lr, r3
 8000258:	b002      	add	sp, #8
 800025a:	bc0c      	pop	{r2, r3}
 800025c:	4770      	bx	lr
 800025e:	46c0      	nop			@ (mov r8, r8)

08000260 <__aeabi_lmul>:
 8000260:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000262:	46ce      	mov	lr, r9
 8000264:	4699      	mov	r9, r3
 8000266:	0c03      	lsrs	r3, r0, #16
 8000268:	469c      	mov	ip, r3
 800026a:	0413      	lsls	r3, r2, #16
 800026c:	4647      	mov	r7, r8
 800026e:	0c1b      	lsrs	r3, r3, #16
 8000270:	001d      	movs	r5, r3
 8000272:	000e      	movs	r6, r1
 8000274:	4661      	mov	r1, ip
 8000276:	0404      	lsls	r4, r0, #16
 8000278:	0c24      	lsrs	r4, r4, #16
 800027a:	b580      	push	{r7, lr}
 800027c:	0007      	movs	r7, r0
 800027e:	0c10      	lsrs	r0, r2, #16
 8000280:	434b      	muls	r3, r1
 8000282:	4365      	muls	r5, r4
 8000284:	4341      	muls	r1, r0
 8000286:	4360      	muls	r0, r4
 8000288:	0c2c      	lsrs	r4, r5, #16
 800028a:	18c0      	adds	r0, r0, r3
 800028c:	1824      	adds	r4, r4, r0
 800028e:	468c      	mov	ip, r1
 8000290:	42a3      	cmp	r3, r4
 8000292:	d903      	bls.n	800029c <__aeabi_lmul+0x3c>
 8000294:	2380      	movs	r3, #128	@ 0x80
 8000296:	025b      	lsls	r3, r3, #9
 8000298:	4698      	mov	r8, r3
 800029a:	44c4      	add	ip, r8
 800029c:	4649      	mov	r1, r9
 800029e:	4379      	muls	r1, r7
 80002a0:	4356      	muls	r6, r2
 80002a2:	0c23      	lsrs	r3, r4, #16
 80002a4:	042d      	lsls	r5, r5, #16
 80002a6:	0c2d      	lsrs	r5, r5, #16
 80002a8:	1989      	adds	r1, r1, r6
 80002aa:	4463      	add	r3, ip
 80002ac:	0424      	lsls	r4, r4, #16
 80002ae:	1960      	adds	r0, r4, r5
 80002b0:	18c9      	adds	r1, r1, r3
 80002b2:	bcc0      	pop	{r6, r7}
 80002b4:	46b9      	mov	r9, r7
 80002b6:	46b0      	mov	r8, r6
 80002b8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80002ba:	46c0      	nop			@ (mov r8, r8)

080002bc <__udivmoddi4>:
 80002bc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80002be:	4657      	mov	r7, sl
 80002c0:	464e      	mov	r6, r9
 80002c2:	4645      	mov	r5, r8
 80002c4:	46de      	mov	lr, fp
 80002c6:	b5e0      	push	{r5, r6, r7, lr}
 80002c8:	0004      	movs	r4, r0
 80002ca:	000d      	movs	r5, r1
 80002cc:	4692      	mov	sl, r2
 80002ce:	4699      	mov	r9, r3
 80002d0:	b083      	sub	sp, #12
 80002d2:	428b      	cmp	r3, r1
 80002d4:	d830      	bhi.n	8000338 <__udivmoddi4+0x7c>
 80002d6:	d02d      	beq.n	8000334 <__udivmoddi4+0x78>
 80002d8:	4649      	mov	r1, r9
 80002da:	4650      	mov	r0, sl
 80002dc:	f000 f8ba 	bl	8000454 <__clzdi2>
 80002e0:	0029      	movs	r1, r5
 80002e2:	0006      	movs	r6, r0
 80002e4:	0020      	movs	r0, r4
 80002e6:	f000 f8b5 	bl	8000454 <__clzdi2>
 80002ea:	1a33      	subs	r3, r6, r0
 80002ec:	4698      	mov	r8, r3
 80002ee:	3b20      	subs	r3, #32
 80002f0:	d434      	bmi.n	800035c <__udivmoddi4+0xa0>
 80002f2:	469b      	mov	fp, r3
 80002f4:	4653      	mov	r3, sl
 80002f6:	465a      	mov	r2, fp
 80002f8:	4093      	lsls	r3, r2
 80002fa:	4642      	mov	r2, r8
 80002fc:	001f      	movs	r7, r3
 80002fe:	4653      	mov	r3, sl
 8000300:	4093      	lsls	r3, r2
 8000302:	001e      	movs	r6, r3
 8000304:	42af      	cmp	r7, r5
 8000306:	d83b      	bhi.n	8000380 <__udivmoddi4+0xc4>
 8000308:	42af      	cmp	r7, r5
 800030a:	d100      	bne.n	800030e <__udivmoddi4+0x52>
 800030c:	e079      	b.n	8000402 <__udivmoddi4+0x146>
 800030e:	465b      	mov	r3, fp
 8000310:	1ba4      	subs	r4, r4, r6
 8000312:	41bd      	sbcs	r5, r7
 8000314:	2b00      	cmp	r3, #0
 8000316:	da00      	bge.n	800031a <__udivmoddi4+0x5e>
 8000318:	e076      	b.n	8000408 <__udivmoddi4+0x14c>
 800031a:	2200      	movs	r2, #0
 800031c:	2300      	movs	r3, #0
 800031e:	9200      	str	r2, [sp, #0]
 8000320:	9301      	str	r3, [sp, #4]
 8000322:	2301      	movs	r3, #1
 8000324:	465a      	mov	r2, fp
 8000326:	4093      	lsls	r3, r2
 8000328:	9301      	str	r3, [sp, #4]
 800032a:	2301      	movs	r3, #1
 800032c:	4642      	mov	r2, r8
 800032e:	4093      	lsls	r3, r2
 8000330:	9300      	str	r3, [sp, #0]
 8000332:	e029      	b.n	8000388 <__udivmoddi4+0xcc>
 8000334:	4282      	cmp	r2, r0
 8000336:	d9cf      	bls.n	80002d8 <__udivmoddi4+0x1c>
 8000338:	2200      	movs	r2, #0
 800033a:	2300      	movs	r3, #0
 800033c:	9200      	str	r2, [sp, #0]
 800033e:	9301      	str	r3, [sp, #4]
 8000340:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8000342:	2b00      	cmp	r3, #0
 8000344:	d001      	beq.n	800034a <__udivmoddi4+0x8e>
 8000346:	601c      	str	r4, [r3, #0]
 8000348:	605d      	str	r5, [r3, #4]
 800034a:	9800      	ldr	r0, [sp, #0]
 800034c:	9901      	ldr	r1, [sp, #4]
 800034e:	b003      	add	sp, #12
 8000350:	bcf0      	pop	{r4, r5, r6, r7}
 8000352:	46bb      	mov	fp, r7
 8000354:	46b2      	mov	sl, r6
 8000356:	46a9      	mov	r9, r5
 8000358:	46a0      	mov	r8, r4
 800035a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800035c:	4642      	mov	r2, r8
 800035e:	469b      	mov	fp, r3
 8000360:	2320      	movs	r3, #32
 8000362:	1a9b      	subs	r3, r3, r2
 8000364:	4652      	mov	r2, sl
 8000366:	40da      	lsrs	r2, r3
 8000368:	4641      	mov	r1, r8
 800036a:	0013      	movs	r3, r2
 800036c:	464a      	mov	r2, r9
 800036e:	408a      	lsls	r2, r1
 8000370:	0017      	movs	r7, r2
 8000372:	4642      	mov	r2, r8
 8000374:	431f      	orrs	r7, r3
 8000376:	4653      	mov	r3, sl
 8000378:	4093      	lsls	r3, r2
 800037a:	001e      	movs	r6, r3
 800037c:	42af      	cmp	r7, r5
 800037e:	d9c3      	bls.n	8000308 <__udivmoddi4+0x4c>
 8000380:	2200      	movs	r2, #0
 8000382:	2300      	movs	r3, #0
 8000384:	9200      	str	r2, [sp, #0]
 8000386:	9301      	str	r3, [sp, #4]
 8000388:	4643      	mov	r3, r8
 800038a:	2b00      	cmp	r3, #0
 800038c:	d0d8      	beq.n	8000340 <__udivmoddi4+0x84>
 800038e:	07fb      	lsls	r3, r7, #31
 8000390:	0872      	lsrs	r2, r6, #1
 8000392:	431a      	orrs	r2, r3
 8000394:	4646      	mov	r6, r8
 8000396:	087b      	lsrs	r3, r7, #1
 8000398:	e00e      	b.n	80003b8 <__udivmoddi4+0xfc>
 800039a:	42ab      	cmp	r3, r5
 800039c:	d101      	bne.n	80003a2 <__udivmoddi4+0xe6>
 800039e:	42a2      	cmp	r2, r4
 80003a0:	d80c      	bhi.n	80003bc <__udivmoddi4+0x100>
 80003a2:	1aa4      	subs	r4, r4, r2
 80003a4:	419d      	sbcs	r5, r3
 80003a6:	2001      	movs	r0, #1
 80003a8:	1924      	adds	r4, r4, r4
 80003aa:	416d      	adcs	r5, r5
 80003ac:	2100      	movs	r1, #0
 80003ae:	3e01      	subs	r6, #1
 80003b0:	1824      	adds	r4, r4, r0
 80003b2:	414d      	adcs	r5, r1
 80003b4:	2e00      	cmp	r6, #0
 80003b6:	d006      	beq.n	80003c6 <__udivmoddi4+0x10a>
 80003b8:	42ab      	cmp	r3, r5
 80003ba:	d9ee      	bls.n	800039a <__udivmoddi4+0xde>
 80003bc:	3e01      	subs	r6, #1
 80003be:	1924      	adds	r4, r4, r4
 80003c0:	416d      	adcs	r5, r5
 80003c2:	2e00      	cmp	r6, #0
 80003c4:	d1f8      	bne.n	80003b8 <__udivmoddi4+0xfc>
 80003c6:	9800      	ldr	r0, [sp, #0]
 80003c8:	9901      	ldr	r1, [sp, #4]
 80003ca:	465b      	mov	r3, fp
 80003cc:	1900      	adds	r0, r0, r4
 80003ce:	4169      	adcs	r1, r5
 80003d0:	2b00      	cmp	r3, #0
 80003d2:	db24      	blt.n	800041e <__udivmoddi4+0x162>
 80003d4:	002b      	movs	r3, r5
 80003d6:	465a      	mov	r2, fp
 80003d8:	4644      	mov	r4, r8
 80003da:	40d3      	lsrs	r3, r2
 80003dc:	002a      	movs	r2, r5
 80003de:	40e2      	lsrs	r2, r4
 80003e0:	001c      	movs	r4, r3
 80003e2:	465b      	mov	r3, fp
 80003e4:	0015      	movs	r5, r2
 80003e6:	2b00      	cmp	r3, #0
 80003e8:	db2a      	blt.n	8000440 <__udivmoddi4+0x184>
 80003ea:	0026      	movs	r6, r4
 80003ec:	409e      	lsls	r6, r3
 80003ee:	0033      	movs	r3, r6
 80003f0:	0026      	movs	r6, r4
 80003f2:	4647      	mov	r7, r8
 80003f4:	40be      	lsls	r6, r7
 80003f6:	0032      	movs	r2, r6
 80003f8:	1a80      	subs	r0, r0, r2
 80003fa:	4199      	sbcs	r1, r3
 80003fc:	9000      	str	r0, [sp, #0]
 80003fe:	9101      	str	r1, [sp, #4]
 8000400:	e79e      	b.n	8000340 <__udivmoddi4+0x84>
 8000402:	42a3      	cmp	r3, r4
 8000404:	d8bc      	bhi.n	8000380 <__udivmoddi4+0xc4>
 8000406:	e782      	b.n	800030e <__udivmoddi4+0x52>
 8000408:	4642      	mov	r2, r8
 800040a:	2320      	movs	r3, #32
 800040c:	2100      	movs	r1, #0
 800040e:	1a9b      	subs	r3, r3, r2
 8000410:	2200      	movs	r2, #0
 8000412:	9100      	str	r1, [sp, #0]
 8000414:	9201      	str	r2, [sp, #4]
 8000416:	2201      	movs	r2, #1
 8000418:	40da      	lsrs	r2, r3
 800041a:	9201      	str	r2, [sp, #4]
 800041c:	e785      	b.n	800032a <__udivmoddi4+0x6e>
 800041e:	4642      	mov	r2, r8
 8000420:	2320      	movs	r3, #32
 8000422:	1a9b      	subs	r3, r3, r2
 8000424:	002a      	movs	r2, r5
 8000426:	4646      	mov	r6, r8
 8000428:	409a      	lsls	r2, r3
 800042a:	0023      	movs	r3, r4
 800042c:	40f3      	lsrs	r3, r6
 800042e:	4644      	mov	r4, r8
 8000430:	4313      	orrs	r3, r2
 8000432:	002a      	movs	r2, r5
 8000434:	40e2      	lsrs	r2, r4
 8000436:	001c      	movs	r4, r3
 8000438:	465b      	mov	r3, fp
 800043a:	0015      	movs	r5, r2
 800043c:	2b00      	cmp	r3, #0
 800043e:	dad4      	bge.n	80003ea <__udivmoddi4+0x12e>
 8000440:	4642      	mov	r2, r8
 8000442:	002f      	movs	r7, r5
 8000444:	2320      	movs	r3, #32
 8000446:	0026      	movs	r6, r4
 8000448:	4097      	lsls	r7, r2
 800044a:	1a9b      	subs	r3, r3, r2
 800044c:	40de      	lsrs	r6, r3
 800044e:	003b      	movs	r3, r7
 8000450:	4333      	orrs	r3, r6
 8000452:	e7cd      	b.n	80003f0 <__udivmoddi4+0x134>

08000454 <__clzdi2>:
 8000454:	b510      	push	{r4, lr}
 8000456:	2900      	cmp	r1, #0
 8000458:	d103      	bne.n	8000462 <__clzdi2+0xe>
 800045a:	f000 f807 	bl	800046c <__clzsi2>
 800045e:	3020      	adds	r0, #32
 8000460:	e002      	b.n	8000468 <__clzdi2+0x14>
 8000462:	0008      	movs	r0, r1
 8000464:	f000 f802 	bl	800046c <__clzsi2>
 8000468:	bd10      	pop	{r4, pc}
 800046a:	46c0      	nop			@ (mov r8, r8)

0800046c <__clzsi2>:
 800046c:	211c      	movs	r1, #28
 800046e:	2301      	movs	r3, #1
 8000470:	041b      	lsls	r3, r3, #16
 8000472:	4298      	cmp	r0, r3
 8000474:	d301      	bcc.n	800047a <__clzsi2+0xe>
 8000476:	0c00      	lsrs	r0, r0, #16
 8000478:	3910      	subs	r1, #16
 800047a:	0a1b      	lsrs	r3, r3, #8
 800047c:	4298      	cmp	r0, r3
 800047e:	d301      	bcc.n	8000484 <__clzsi2+0x18>
 8000480:	0a00      	lsrs	r0, r0, #8
 8000482:	3908      	subs	r1, #8
 8000484:	091b      	lsrs	r3, r3, #4
 8000486:	4298      	cmp	r0, r3
 8000488:	d301      	bcc.n	800048e <__clzsi2+0x22>
 800048a:	0900      	lsrs	r0, r0, #4
 800048c:	3904      	subs	r1, #4
 800048e:	a202      	add	r2, pc, #8	@ (adr r2, 8000498 <__clzsi2+0x2c>)
 8000490:	5c10      	ldrb	r0, [r2, r0]
 8000492:	1840      	adds	r0, r0, r1
 8000494:	4770      	bx	lr
 8000496:	46c0      	nop			@ (mov r8, r8)
 8000498:	02020304 	.word	0x02020304
 800049c:	01010101 	.word	0x01010101
	...

080004a8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004a8:	b580      	push	{r7, lr}
 80004aa:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004ac:	f000 fdb2 	bl	8001014 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004b0:	f000 f862 	bl	8000578 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004b4:	f000 f946 	bl	8000744 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 80004b8:	f000 f914 	bl	80006e4 <MX_USART1_UART_Init>
  MX_I2C1_Init();
 80004bc:	f000 f8d2 	bl	8000664 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
  SSD1306_Init();
 80004c0:	f000 f9bc 	bl	800083c <SSD1306_Init>
  SSD1306_Init();  // Initialise OLED
 80004c4:	f000 f9ba 	bl	800083c <SSD1306_Init>
  SSD1306_GotoXY (0,0);
 80004c8:	2100      	movs	r1, #0
 80004ca:	2000      	movs	r0, #0
 80004cc:	f000 fb36 	bl	8000b3c <SSD1306_GotoXY>

  HAL_UART_Receive_IT(&huart1, buffer, sizeof(buffer));
 80004d0:	4925      	ldr	r1, [pc, #148]	@ (8000568 <main+0xc0>)
 80004d2:	4b26      	ldr	r3, [pc, #152]	@ (800056c <main+0xc4>)
 80004d4:	220a      	movs	r2, #10
 80004d6:	0018      	movs	r0, r3
 80004d8:	f002 fe70 	bl	80031bc <HAL_UART_Receive_IT>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  if (flaga == 1)
 80004dc:	4b24      	ldr	r3, [pc, #144]	@ (8000570 <main+0xc8>)
 80004de:	681b      	ldr	r3, [r3, #0]
 80004e0:	2b01      	cmp	r3, #1
 80004e2:	d1fb      	bne.n	80004dc <main+0x34>
	  {
	  SSD1306_Clear();
 80004e4:	f000 fbea 	bl	8000cbc <SSD1306_Clear>
	  HAL_Delay(10);
 80004e8:	200a      	movs	r0, #10
 80004ea:	f000 fe03 	bl	80010f4 <HAL_Delay>
	  SSD1306_GotoXY(0, 0);
 80004ee:	2100      	movs	r1, #0
 80004f0:	2000      	movs	r0, #0
 80004f2:	f000 fb23 	bl	8000b3c <SSD1306_GotoXY>
	  HAL_Delay(10);
 80004f6:	200a      	movs	r0, #10
 80004f8:	f000 fdfc 	bl	80010f4 <HAL_Delay>
	  buffer[sizeof(buffer)] = ' ';
 80004fc:	4b1a      	ldr	r3, [pc, #104]	@ (8000568 <main+0xc0>)
 80004fe:	2220      	movs	r2, #32
 8000500:	729a      	strb	r2, [r3, #10]
	  SSD1306_Puts((char*)buffer, &Font_11x18, 1);
 8000502:	491c      	ldr	r1, [pc, #112]	@ (8000574 <main+0xcc>)
 8000504:	4b18      	ldr	r3, [pc, #96]	@ (8000568 <main+0xc0>)
 8000506:	2201      	movs	r2, #1
 8000508:	0018      	movs	r0, r3
 800050a:	f000 fbb1 	bl	8000c70 <SSD1306_Puts>

	  HAL_Delay(10);
 800050e:	200a      	movs	r0, #10
 8000510:	f000 fdf0 	bl	80010f4 <HAL_Delay>
	  SSD1306_UpdateScreen(); // Display
 8000514:	f000 fa56 	bl	80009c4 <SSD1306_UpdateScreen>
	//  memset(buffer, ' ' , sizeof(buffer));
	  SSD1306_Clear();
 8000518:	f000 fbd0 	bl	8000cbc <SSD1306_Clear>
	  SSD1306_GotoXY(0, 0);
 800051c:	2100      	movs	r1, #0
 800051e:	2000      	movs	r0, #0
 8000520:	f000 fb0c 	bl	8000b3c <SSD1306_GotoXY>
	  SSD1306_Puts ((char*)buffer, &Font_11x18, 1);
 8000524:	4913      	ldr	r1, [pc, #76]	@ (8000574 <main+0xcc>)
 8000526:	4b10      	ldr	r3, [pc, #64]	@ (8000568 <main+0xc0>)
 8000528:	2201      	movs	r2, #1
 800052a:	0018      	movs	r0, r3
 800052c:	f000 fba0 	bl	8000c70 <SSD1306_Puts>
	  HAL_Delay(10);
 8000530:	200a      	movs	r0, #10
 8000532:	f000 fddf 	bl	80010f4 <HAL_Delay>
	  SSD1306_UpdateScreen(); // Display
 8000536:	f000 fa45 	bl	80009c4 <SSD1306_UpdateScreen>
	  memset(buffer, 0 , sizeof(data_for_display));
 800053a:	4b0b      	ldr	r3, [pc, #44]	@ (8000568 <main+0xc0>)
 800053c:	2208      	movs	r2, #8
 800053e:	2100      	movs	r1, #0
 8000540:	0018      	movs	r0, r3
 8000542:	f004 f91d 	bl	8004780 <memset>
	  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8000546:	23a0      	movs	r3, #160	@ 0xa0
 8000548:	05db      	lsls	r3, r3, #23
 800054a:	2200      	movs	r2, #0
 800054c:	2120      	movs	r1, #32
 800054e:	0018      	movs	r0, r3
 8000550:	f001 f8d0 	bl	80016f4 <HAL_GPIO_WritePin>
	  HAL_Delay(1000);
 8000554:	23fa      	movs	r3, #250	@ 0xfa
 8000556:	009b      	lsls	r3, r3, #2
 8000558:	0018      	movs	r0, r3
 800055a:	f000 fdcb 	bl	80010f4 <HAL_Delay>
	  flaga = 0;
 800055e:	4b04      	ldr	r3, [pc, #16]	@ (8000570 <main+0xc8>)
 8000560:	2200      	movs	r2, #0
 8000562:	601a      	str	r2, [r3, #0]
	  if (flaga == 1)
 8000564:	e7ba      	b.n	80004dc <main+0x34>
 8000566:	46c0      	nop			@ (mov r8, r8)
 8000568:	20000030 	.word	0x20000030
 800056c:	20000094 	.word	0x20000094
 8000570:	2000003c 	.word	0x2000003c
 8000574:	20000000 	.word	0x20000000

08000578 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000578:	b590      	push	{r4, r7, lr}
 800057a:	b09d      	sub	sp, #116	@ 0x74
 800057c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800057e:	2438      	movs	r4, #56	@ 0x38
 8000580:	193b      	adds	r3, r7, r4
 8000582:	0018      	movs	r0, r3
 8000584:	2338      	movs	r3, #56	@ 0x38
 8000586:	001a      	movs	r2, r3
 8000588:	2100      	movs	r1, #0
 800058a:	f004 f8f9 	bl	8004780 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800058e:	2324      	movs	r3, #36	@ 0x24
 8000590:	18fb      	adds	r3, r7, r3
 8000592:	0018      	movs	r0, r3
 8000594:	2314      	movs	r3, #20
 8000596:	001a      	movs	r2, r3
 8000598:	2100      	movs	r1, #0
 800059a:	f004 f8f1 	bl	8004780 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800059e:	003b      	movs	r3, r7
 80005a0:	0018      	movs	r0, r3
 80005a2:	2324      	movs	r3, #36	@ 0x24
 80005a4:	001a      	movs	r2, r3
 80005a6:	2100      	movs	r1, #0
 80005a8:	f004 f8ea 	bl	8004780 <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80005ac:	4b2b      	ldr	r3, [pc, #172]	@ (800065c <SystemClock_Config+0xe4>)
 80005ae:	681b      	ldr	r3, [r3, #0]
 80005b0:	4a2b      	ldr	r2, [pc, #172]	@ (8000660 <SystemClock_Config+0xe8>)
 80005b2:	401a      	ands	r2, r3
 80005b4:	4b29      	ldr	r3, [pc, #164]	@ (800065c <SystemClock_Config+0xe4>)
 80005b6:	2180      	movs	r1, #128	@ 0x80
 80005b8:	0109      	lsls	r1, r1, #4
 80005ba:	430a      	orrs	r2, r1
 80005bc:	601a      	str	r2, [r3, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80005be:	0021      	movs	r1, r4
 80005c0:	187b      	adds	r3, r7, r1
 80005c2:	2202      	movs	r2, #2
 80005c4:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80005c6:	187b      	adds	r3, r7, r1
 80005c8:	2201      	movs	r2, #1
 80005ca:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80005cc:	187b      	adds	r3, r7, r1
 80005ce:	2210      	movs	r2, #16
 80005d0:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80005d2:	187b      	adds	r3, r7, r1
 80005d4:	2202      	movs	r2, #2
 80005d6:	629a      	str	r2, [r3, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80005d8:	187b      	adds	r3, r7, r1
 80005da:	2200      	movs	r2, #0
 80005dc:	62da      	str	r2, [r3, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLLMUL_4;
 80005de:	187b      	adds	r3, r7, r1
 80005e0:	2280      	movs	r2, #128	@ 0x80
 80005e2:	02d2      	lsls	r2, r2, #11
 80005e4:	631a      	str	r2, [r3, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLDIV = RCC_PLLDIV_2;
 80005e6:	187b      	adds	r3, r7, r1
 80005e8:	2280      	movs	r2, #128	@ 0x80
 80005ea:	03d2      	lsls	r2, r2, #15
 80005ec:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005ee:	187b      	adds	r3, r7, r1
 80005f0:	0018      	movs	r0, r3
 80005f2:	f001 fe19 	bl	8002228 <HAL_RCC_OscConfig>
 80005f6:	1e03      	subs	r3, r0, #0
 80005f8:	d001      	beq.n	80005fe <SystemClock_Config+0x86>
  {
    Error_Handler();
 80005fa:	f000 f919 	bl	8000830 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005fe:	2124      	movs	r1, #36	@ 0x24
 8000600:	187b      	adds	r3, r7, r1
 8000602:	220f      	movs	r2, #15
 8000604:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000606:	187b      	adds	r3, r7, r1
 8000608:	2203      	movs	r2, #3
 800060a:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800060c:	187b      	adds	r3, r7, r1
 800060e:	2200      	movs	r2, #0
 8000610:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000612:	187b      	adds	r3, r7, r1
 8000614:	2200      	movs	r2, #0
 8000616:	60da      	str	r2, [r3, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000618:	187b      	adds	r3, r7, r1
 800061a:	2200      	movs	r2, #0
 800061c:	611a      	str	r2, [r3, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 800061e:	187b      	adds	r3, r7, r1
 8000620:	2101      	movs	r1, #1
 8000622:	0018      	movs	r0, r3
 8000624:	f002 f9c4 	bl	80029b0 <HAL_RCC_ClockConfig>
 8000628:	1e03      	subs	r3, r0, #0
 800062a:	d001      	beq.n	8000630 <SystemClock_Config+0xb8>
  {
    Error_Handler();
 800062c:	f000 f900 	bl	8000830 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_I2C1;
 8000630:	003b      	movs	r3, r7
 8000632:	2209      	movs	r2, #9
 8000634:	601a      	str	r2, [r3, #0]
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8000636:	003b      	movs	r3, r7
 8000638:	2200      	movs	r2, #0
 800063a:	60da      	str	r2, [r3, #12]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 800063c:	003b      	movs	r3, r7
 800063e:	2200      	movs	r2, #0
 8000640:	619a      	str	r2, [r3, #24]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000642:	003b      	movs	r3, r7
 8000644:	0018      	movs	r0, r3
 8000646:	f002 fbd7 	bl	8002df8 <HAL_RCCEx_PeriphCLKConfig>
 800064a:	1e03      	subs	r3, r0, #0
 800064c:	d001      	beq.n	8000652 <SystemClock_Config+0xda>
  {
    Error_Handler();
 800064e:	f000 f8ef 	bl	8000830 <Error_Handler>
  }
}
 8000652:	46c0      	nop			@ (mov r8, r8)
 8000654:	46bd      	mov	sp, r7
 8000656:	b01d      	add	sp, #116	@ 0x74
 8000658:	bd90      	pop	{r4, r7, pc}
 800065a:	46c0      	nop			@ (mov r8, r8)
 800065c:	40007000 	.word	0x40007000
 8000660:	ffffe7ff 	.word	0xffffe7ff

08000664 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000664:	b580      	push	{r7, lr}
 8000666:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000668:	4b1b      	ldr	r3, [pc, #108]	@ (80006d8 <MX_I2C1_Init+0x74>)
 800066a:	4a1c      	ldr	r2, [pc, #112]	@ (80006dc <MX_I2C1_Init+0x78>)
 800066c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00707CBB;
 800066e:	4b1a      	ldr	r3, [pc, #104]	@ (80006d8 <MX_I2C1_Init+0x74>)
 8000670:	4a1b      	ldr	r2, [pc, #108]	@ (80006e0 <MX_I2C1_Init+0x7c>)
 8000672:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000674:	4b18      	ldr	r3, [pc, #96]	@ (80006d8 <MX_I2C1_Init+0x74>)
 8000676:	2200      	movs	r2, #0
 8000678:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800067a:	4b17      	ldr	r3, [pc, #92]	@ (80006d8 <MX_I2C1_Init+0x74>)
 800067c:	2201      	movs	r2, #1
 800067e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000680:	4b15      	ldr	r3, [pc, #84]	@ (80006d8 <MX_I2C1_Init+0x74>)
 8000682:	2200      	movs	r2, #0
 8000684:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000686:	4b14      	ldr	r3, [pc, #80]	@ (80006d8 <MX_I2C1_Init+0x74>)
 8000688:	2200      	movs	r2, #0
 800068a:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800068c:	4b12      	ldr	r3, [pc, #72]	@ (80006d8 <MX_I2C1_Init+0x74>)
 800068e:	2200      	movs	r2, #0
 8000690:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000692:	4b11      	ldr	r3, [pc, #68]	@ (80006d8 <MX_I2C1_Init+0x74>)
 8000694:	2200      	movs	r2, #0
 8000696:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000698:	4b0f      	ldr	r3, [pc, #60]	@ (80006d8 <MX_I2C1_Init+0x74>)
 800069a:	2200      	movs	r2, #0
 800069c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800069e:	4b0e      	ldr	r3, [pc, #56]	@ (80006d8 <MX_I2C1_Init+0x74>)
 80006a0:	0018      	movs	r0, r3
 80006a2:	f001 f845 	bl	8001730 <HAL_I2C_Init>
 80006a6:	1e03      	subs	r3, r0, #0
 80006a8:	d001      	beq.n	80006ae <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 80006aa:	f000 f8c1 	bl	8000830 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80006ae:	4b0a      	ldr	r3, [pc, #40]	@ (80006d8 <MX_I2C1_Init+0x74>)
 80006b0:	2100      	movs	r1, #0
 80006b2:	0018      	movs	r0, r3
 80006b4:	f001 fd20 	bl	80020f8 <HAL_I2CEx_ConfigAnalogFilter>
 80006b8:	1e03      	subs	r3, r0, #0
 80006ba:	d001      	beq.n	80006c0 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 80006bc:	f000 f8b8 	bl	8000830 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80006c0:	4b05      	ldr	r3, [pc, #20]	@ (80006d8 <MX_I2C1_Init+0x74>)
 80006c2:	2100      	movs	r1, #0
 80006c4:	0018      	movs	r0, r3
 80006c6:	f001 fd63 	bl	8002190 <HAL_I2CEx_ConfigDigitalFilter>
 80006ca:	1e03      	subs	r3, r0, #0
 80006cc:	d001      	beq.n	80006d2 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 80006ce:	f000 f8af 	bl	8000830 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80006d2:	46c0      	nop			@ (mov r8, r8)
 80006d4:	46bd      	mov	sp, r7
 80006d6:	bd80      	pop	{r7, pc}
 80006d8:	20000040 	.word	0x20000040
 80006dc:	40005400 	.word	0x40005400
 80006e0:	00707cbb 	.word	0x00707cbb

080006e4 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80006e4:	b580      	push	{r7, lr}
 80006e6:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80006e8:	4b14      	ldr	r3, [pc, #80]	@ (800073c <MX_USART1_UART_Init+0x58>)
 80006ea:	4a15      	ldr	r2, [pc, #84]	@ (8000740 <MX_USART1_UART_Init+0x5c>)
 80006ec:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80006ee:	4b13      	ldr	r3, [pc, #76]	@ (800073c <MX_USART1_UART_Init+0x58>)
 80006f0:	22e1      	movs	r2, #225	@ 0xe1
 80006f2:	0252      	lsls	r2, r2, #9
 80006f4:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80006f6:	4b11      	ldr	r3, [pc, #68]	@ (800073c <MX_USART1_UART_Init+0x58>)
 80006f8:	2200      	movs	r2, #0
 80006fa:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80006fc:	4b0f      	ldr	r3, [pc, #60]	@ (800073c <MX_USART1_UART_Init+0x58>)
 80006fe:	2200      	movs	r2, #0
 8000700:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000702:	4b0e      	ldr	r3, [pc, #56]	@ (800073c <MX_USART1_UART_Init+0x58>)
 8000704:	2200      	movs	r2, #0
 8000706:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000708:	4b0c      	ldr	r3, [pc, #48]	@ (800073c <MX_USART1_UART_Init+0x58>)
 800070a:	220c      	movs	r2, #12
 800070c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800070e:	4b0b      	ldr	r3, [pc, #44]	@ (800073c <MX_USART1_UART_Init+0x58>)
 8000710:	2200      	movs	r2, #0
 8000712:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000714:	4b09      	ldr	r3, [pc, #36]	@ (800073c <MX_USART1_UART_Init+0x58>)
 8000716:	2200      	movs	r2, #0
 8000718:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800071a:	4b08      	ldr	r3, [pc, #32]	@ (800073c <MX_USART1_UART_Init+0x58>)
 800071c:	2200      	movs	r2, #0
 800071e:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000720:	4b06      	ldr	r3, [pc, #24]	@ (800073c <MX_USART1_UART_Init+0x58>)
 8000722:	2200      	movs	r2, #0
 8000724:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000726:	4b05      	ldr	r3, [pc, #20]	@ (800073c <MX_USART1_UART_Init+0x58>)
 8000728:	0018      	movs	r0, r3
 800072a:	f002 fcf3 	bl	8003114 <HAL_UART_Init>
 800072e:	1e03      	subs	r3, r0, #0
 8000730:	d001      	beq.n	8000736 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8000732:	f000 f87d 	bl	8000830 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000736:	46c0      	nop			@ (mov r8, r8)
 8000738:	46bd      	mov	sp, r7
 800073a:	bd80      	pop	{r7, pc}
 800073c:	20000094 	.word	0x20000094
 8000740:	40013800 	.word	0x40013800

08000744 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000744:	b590      	push	{r4, r7, lr}
 8000746:	b089      	sub	sp, #36	@ 0x24
 8000748:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800074a:	240c      	movs	r4, #12
 800074c:	193b      	adds	r3, r7, r4
 800074e:	0018      	movs	r0, r3
 8000750:	2314      	movs	r3, #20
 8000752:	001a      	movs	r2, r3
 8000754:	2100      	movs	r1, #0
 8000756:	f004 f813 	bl	8004780 <memset>
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800075a:	4b21      	ldr	r3, [pc, #132]	@ (80007e0 <MX_GPIO_Init+0x9c>)
 800075c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800075e:	4b20      	ldr	r3, [pc, #128]	@ (80007e0 <MX_GPIO_Init+0x9c>)
 8000760:	2180      	movs	r1, #128	@ 0x80
 8000762:	430a      	orrs	r2, r1
 8000764:	62da      	str	r2, [r3, #44]	@ 0x2c
 8000766:	4b1e      	ldr	r3, [pc, #120]	@ (80007e0 <MX_GPIO_Init+0x9c>)
 8000768:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800076a:	2280      	movs	r2, #128	@ 0x80
 800076c:	4013      	ands	r3, r2
 800076e:	60bb      	str	r3, [r7, #8]
 8000770:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000772:	4b1b      	ldr	r3, [pc, #108]	@ (80007e0 <MX_GPIO_Init+0x9c>)
 8000774:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8000776:	4b1a      	ldr	r3, [pc, #104]	@ (80007e0 <MX_GPIO_Init+0x9c>)
 8000778:	2101      	movs	r1, #1
 800077a:	430a      	orrs	r2, r1
 800077c:	62da      	str	r2, [r3, #44]	@ 0x2c
 800077e:	4b18      	ldr	r3, [pc, #96]	@ (80007e0 <MX_GPIO_Init+0x9c>)
 8000780:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000782:	2201      	movs	r2, #1
 8000784:	4013      	ands	r3, r2
 8000786:	607b      	str	r3, [r7, #4]
 8000788:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800078a:	4b15      	ldr	r3, [pc, #84]	@ (80007e0 <MX_GPIO_Init+0x9c>)
 800078c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800078e:	4b14      	ldr	r3, [pc, #80]	@ (80007e0 <MX_GPIO_Init+0x9c>)
 8000790:	2102      	movs	r1, #2
 8000792:	430a      	orrs	r2, r1
 8000794:	62da      	str	r2, [r3, #44]	@ 0x2c
 8000796:	4b12      	ldr	r3, [pc, #72]	@ (80007e0 <MX_GPIO_Init+0x9c>)
 8000798:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800079a:	2202      	movs	r2, #2
 800079c:	4013      	ands	r3, r2
 800079e:	603b      	str	r3, [r7, #0]
 80007a0:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 80007a2:	23a0      	movs	r3, #160	@ 0xa0
 80007a4:	05db      	lsls	r3, r3, #23
 80007a6:	2200      	movs	r2, #0
 80007a8:	2120      	movs	r1, #32
 80007aa:	0018      	movs	r0, r3
 80007ac:	f000 ffa2 	bl	80016f4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 80007b0:	0021      	movs	r1, r4
 80007b2:	187b      	adds	r3, r7, r1
 80007b4:	2220      	movs	r2, #32
 80007b6:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007b8:	187b      	adds	r3, r7, r1
 80007ba:	2201      	movs	r2, #1
 80007bc:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007be:	187b      	adds	r3, r7, r1
 80007c0:	2200      	movs	r2, #0
 80007c2:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007c4:	187b      	adds	r3, r7, r1
 80007c6:	2200      	movs	r2, #0
 80007c8:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 80007ca:	187a      	adds	r2, r7, r1
 80007cc:	23a0      	movs	r3, #160	@ 0xa0
 80007ce:	05db      	lsls	r3, r3, #23
 80007d0:	0011      	movs	r1, r2
 80007d2:	0018      	movs	r0, r3
 80007d4:	f000 fe18 	bl	8001408 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80007d8:	46c0      	nop			@ (mov r8, r8)
 80007da:	46bd      	mov	sp, r7
 80007dc:	b009      	add	sp, #36	@ 0x24
 80007de:	bd90      	pop	{r4, r7, pc}
 80007e0:	40021000 	.word	0x40021000

080007e4 <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80007e4:	b580      	push	{r7, lr}
 80007e6:	b082      	sub	sp, #8
 80007e8:	af00      	add	r7, sp, #0
 80007ea:	6078      	str	r0, [r7, #4]
	if(huart->Instance == USART1)
 80007ec:	687b      	ldr	r3, [r7, #4]
 80007ee:	681b      	ldr	r3, [r3, #0]
 80007f0:	4a0b      	ldr	r2, [pc, #44]	@ (8000820 <HAL_UART_RxCpltCallback+0x3c>)
 80007f2:	4293      	cmp	r3, r2
 80007f4:	d10f      	bne.n	8000816 <HAL_UART_RxCpltCallback+0x32>
		{
			HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_SET);
 80007f6:	23a0      	movs	r3, #160	@ 0xa0
 80007f8:	05db      	lsls	r3, r3, #23
 80007fa:	2201      	movs	r2, #1
 80007fc:	2120      	movs	r1, #32
 80007fe:	0018      	movs	r0, r3
 8000800:	f000 ff78 	bl	80016f4 <HAL_GPIO_WritePin>
            flaga = 1;
 8000804:	4b07      	ldr	r3, [pc, #28]	@ (8000824 <HAL_UART_RxCpltCallback+0x40>)
 8000806:	2201      	movs	r2, #1
 8000808:	601a      	str	r2, [r3, #0]
            HAL_UART_Receive_IT(&huart1, buffer, sizeof(buffer));
 800080a:	4907      	ldr	r1, [pc, #28]	@ (8000828 <HAL_UART_RxCpltCallback+0x44>)
 800080c:	4b07      	ldr	r3, [pc, #28]	@ (800082c <HAL_UART_RxCpltCallback+0x48>)
 800080e:	220a      	movs	r2, #10
 8000810:	0018      	movs	r0, r3
 8000812:	f002 fcd3 	bl	80031bc <HAL_UART_Receive_IT>

		}
}
 8000816:	46c0      	nop			@ (mov r8, r8)
 8000818:	46bd      	mov	sp, r7
 800081a:	b002      	add	sp, #8
 800081c:	bd80      	pop	{r7, pc}
 800081e:	46c0      	nop			@ (mov r8, r8)
 8000820:	40013800 	.word	0x40013800
 8000824:	2000003c 	.word	0x2000003c
 8000828:	20000030 	.word	0x20000030
 800082c:	20000094 	.word	0x20000094

08000830 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000830:	b580      	push	{r7, lr}
 8000832:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000834:	b672      	cpsid	i
}
 8000836:	46c0      	nop			@ (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000838:	46c0      	nop			@ (mov r8, r8)
 800083a:	e7fd      	b.n	8000838 <Error_Handler+0x8>

0800083c <SSD1306_Init>:





uint8_t SSD1306_Init(void) {
 800083c:	b580      	push	{r7, lr}
 800083e:	b082      	sub	sp, #8
 8000840:	af00      	add	r7, sp, #0

	/* Init I2C */
	ssd1306_I2C_Init();
 8000842:	f000 fa45 	bl	8000cd0 <ssd1306_I2C_Init>
	
	/* Check if LCD connected to I2C */
	if (HAL_I2C_IsDeviceReady(&hi2c1, SSD1306_I2C_ADDR, 1, 20000) != HAL_OK) {
 8000846:	4b5b      	ldr	r3, [pc, #364]	@ (80009b4 <SSD1306_Init+0x178>)
 8000848:	485b      	ldr	r0, [pc, #364]	@ (80009b8 <SSD1306_Init+0x17c>)
 800084a:	2201      	movs	r2, #1
 800084c:	2178      	movs	r1, #120	@ 0x78
 800084e:	f001 f90d 	bl	8001a6c <HAL_I2C_IsDeviceReady>
 8000852:	1e03      	subs	r3, r0, #0
 8000854:	d001      	beq.n	800085a <SSD1306_Init+0x1e>
		/* Return false */
		return 0;
 8000856:	2300      	movs	r3, #0
 8000858:	e0a8      	b.n	80009ac <SSD1306_Init+0x170>
	}
	
	/* A little delay */
	uint32_t p = 2500;
 800085a:	4b58      	ldr	r3, [pc, #352]	@ (80009bc <SSD1306_Init+0x180>)
 800085c:	607b      	str	r3, [r7, #4]
	while(p>0)
 800085e:	e002      	b.n	8000866 <SSD1306_Init+0x2a>
		p--;
 8000860:	687b      	ldr	r3, [r7, #4]
 8000862:	3b01      	subs	r3, #1
 8000864:	607b      	str	r3, [r7, #4]
	while(p>0)
 8000866:	687b      	ldr	r3, [r7, #4]
 8000868:	2b00      	cmp	r3, #0
 800086a:	d1f9      	bne.n	8000860 <SSD1306_Init+0x24>
	
	/* Init LCD */
	SSD1306_WRITECOMMAND(0xAE); //display off
 800086c:	22ae      	movs	r2, #174	@ 0xae
 800086e:	2100      	movs	r1, #0
 8000870:	2078      	movs	r0, #120	@ 0x78
 8000872:	f000 faad 	bl	8000dd0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20); //Set Memory Addressing Mode   
 8000876:	2220      	movs	r2, #32
 8000878:	2100      	movs	r1, #0
 800087a:	2078      	movs	r0, #120	@ 0x78
 800087c:	f000 faa8 	bl	8000dd0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10); //00,Horizontal Addressing Mode;01,Vertical Addressing Mode;10,Page Addressing Mode (RESET);11,Invalid
 8000880:	2210      	movs	r2, #16
 8000882:	2100      	movs	r1, #0
 8000884:	2078      	movs	r0, #120	@ 0x78
 8000886:	f000 faa3 	bl	8000dd0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 800088a:	22b0      	movs	r2, #176	@ 0xb0
 800088c:	2100      	movs	r1, #0
 800088e:	2078      	movs	r0, #120	@ 0x78
 8000890:	f000 fa9e 	bl	8000dd0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xC8); //Set COM Output Scan Direction
 8000894:	22c8      	movs	r2, #200	@ 0xc8
 8000896:	2100      	movs	r1, #0
 8000898:	2078      	movs	r0, #120	@ 0x78
 800089a:	f000 fa99 	bl	8000dd0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00); //---set low column address
 800089e:	2200      	movs	r2, #0
 80008a0:	2100      	movs	r1, #0
 80008a2:	2078      	movs	r0, #120	@ 0x78
 80008a4:	f000 fa94 	bl	8000dd0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10); //---set high column address
 80008a8:	2210      	movs	r2, #16
 80008aa:	2100      	movs	r1, #0
 80008ac:	2078      	movs	r0, #120	@ 0x78
 80008ae:	f000 fa8f 	bl	8000dd0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x40); //--set start line address
 80008b2:	2240      	movs	r2, #64	@ 0x40
 80008b4:	2100      	movs	r1, #0
 80008b6:	2078      	movs	r0, #120	@ 0x78
 80008b8:	f000 fa8a 	bl	8000dd0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x81); //--set contrast control register
 80008bc:	2281      	movs	r2, #129	@ 0x81
 80008be:	2100      	movs	r1, #0
 80008c0:	2078      	movs	r0, #120	@ 0x78
 80008c2:	f000 fa85 	bl	8000dd0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xFF);
 80008c6:	22ff      	movs	r2, #255	@ 0xff
 80008c8:	2100      	movs	r1, #0
 80008ca:	2078      	movs	r0, #120	@ 0x78
 80008cc:	f000 fa80 	bl	8000dd0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA1); //--set segment re-map 0 to 127
 80008d0:	22a1      	movs	r2, #161	@ 0xa1
 80008d2:	2100      	movs	r1, #0
 80008d4:	2078      	movs	r0, #120	@ 0x78
 80008d6:	f000 fa7b 	bl	8000dd0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA6); //--set normal display
 80008da:	22a6      	movs	r2, #166	@ 0xa6
 80008dc:	2100      	movs	r1, #0
 80008de:	2078      	movs	r0, #120	@ 0x78
 80008e0:	f000 fa76 	bl	8000dd0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA8); //--set multiplex ratio(1 to 64)
 80008e4:	22a8      	movs	r2, #168	@ 0xa8
 80008e6:	2100      	movs	r1, #0
 80008e8:	2078      	movs	r0, #120	@ 0x78
 80008ea:	f000 fa71 	bl	8000dd0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x3F); //
 80008ee:	223f      	movs	r2, #63	@ 0x3f
 80008f0:	2100      	movs	r1, #0
 80008f2:	2078      	movs	r0, #120	@ 0x78
 80008f4:	f000 fa6c 	bl	8000dd0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 80008f8:	22a4      	movs	r2, #164	@ 0xa4
 80008fa:	2100      	movs	r1, #0
 80008fc:	2078      	movs	r0, #120	@ 0x78
 80008fe:	f000 fa67 	bl	8000dd0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD3); //-set display offset
 8000902:	22d3      	movs	r2, #211	@ 0xd3
 8000904:	2100      	movs	r1, #0
 8000906:	2078      	movs	r0, #120	@ 0x78
 8000908:	f000 fa62 	bl	8000dd0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00); //-not offset
 800090c:	2200      	movs	r2, #0
 800090e:	2100      	movs	r1, #0
 8000910:	2078      	movs	r0, #120	@ 0x78
 8000912:	f000 fa5d 	bl	8000dd0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD5); //--set display clock divide ratio/oscillator frequency
 8000916:	22d5      	movs	r2, #213	@ 0xd5
 8000918:	2100      	movs	r1, #0
 800091a:	2078      	movs	r0, #120	@ 0x78
 800091c:	f000 fa58 	bl	8000dd0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xF0); //--set divide ratio
 8000920:	22f0      	movs	r2, #240	@ 0xf0
 8000922:	2100      	movs	r1, #0
 8000924:	2078      	movs	r0, #120	@ 0x78
 8000926:	f000 fa53 	bl	8000dd0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD9); //--set pre-charge period
 800092a:	22d9      	movs	r2, #217	@ 0xd9
 800092c:	2100      	movs	r1, #0
 800092e:	2078      	movs	r0, #120	@ 0x78
 8000930:	f000 fa4e 	bl	8000dd0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x22); //
 8000934:	2222      	movs	r2, #34	@ 0x22
 8000936:	2100      	movs	r1, #0
 8000938:	2078      	movs	r0, #120	@ 0x78
 800093a:	f000 fa49 	bl	8000dd0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xDA); //--set com pins hardware configuration
 800093e:	22da      	movs	r2, #218	@ 0xda
 8000940:	2100      	movs	r1, #0
 8000942:	2078      	movs	r0, #120	@ 0x78
 8000944:	f000 fa44 	bl	8000dd0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x12);
 8000948:	2212      	movs	r2, #18
 800094a:	2100      	movs	r1, #0
 800094c:	2078      	movs	r0, #120	@ 0x78
 800094e:	f000 fa3f 	bl	8000dd0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xDB); //--set vcomh
 8000952:	22db      	movs	r2, #219	@ 0xdb
 8000954:	2100      	movs	r1, #0
 8000956:	2078      	movs	r0, #120	@ 0x78
 8000958:	f000 fa3a 	bl	8000dd0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20); //0x20,0.77xVcc
 800095c:	2220      	movs	r2, #32
 800095e:	2100      	movs	r1, #0
 8000960:	2078      	movs	r0, #120	@ 0x78
 8000962:	f000 fa35 	bl	8000dd0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x8D); //--set DC-DC enable
 8000966:	228d      	movs	r2, #141	@ 0x8d
 8000968:	2100      	movs	r1, #0
 800096a:	2078      	movs	r0, #120	@ 0x78
 800096c:	f000 fa30 	bl	8000dd0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x14); //
 8000970:	2214      	movs	r2, #20
 8000972:	2100      	movs	r1, #0
 8000974:	2078      	movs	r0, #120	@ 0x78
 8000976:	f000 fa2b 	bl	8000dd0 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xAF); //--turn on SSD1306 panel
 800097a:	22af      	movs	r2, #175	@ 0xaf
 800097c:	2100      	movs	r1, #0
 800097e:	2078      	movs	r0, #120	@ 0x78
 8000980:	f000 fa26 	bl	8000dd0 <ssd1306_I2C_Write>
	

	SSD1306_WRITECOMMAND(SSD1306_DEACTIVATE_SCROLL);
 8000984:	222e      	movs	r2, #46	@ 0x2e
 8000986:	2100      	movs	r1, #0
 8000988:	2078      	movs	r0, #120	@ 0x78
 800098a:	f000 fa21 	bl	8000dd0 <ssd1306_I2C_Write>

	/* Clear screen */
	SSD1306_Fill(SSD1306_COLOR_BLACK);
 800098e:	2000      	movs	r0, #0
 8000990:	f000 f84c 	bl	8000a2c <SSD1306_Fill>
	
	/* Update screen */
	SSD1306_UpdateScreen();
 8000994:	f000 f816 	bl	80009c4 <SSD1306_UpdateScreen>
	
	/* Set default values */
	SSD1306.CurrentX = 0;
 8000998:	4b09      	ldr	r3, [pc, #36]	@ (80009c0 <SSD1306_Init+0x184>)
 800099a:	2200      	movs	r2, #0
 800099c:	801a      	strh	r2, [r3, #0]
	SSD1306.CurrentY = 0;
 800099e:	4b08      	ldr	r3, [pc, #32]	@ (80009c0 <SSD1306_Init+0x184>)
 80009a0:	2200      	movs	r2, #0
 80009a2:	805a      	strh	r2, [r3, #2]
	
	/* Initialized OK */
	SSD1306.Initialized = 1;
 80009a4:	4b06      	ldr	r3, [pc, #24]	@ (80009c0 <SSD1306_Init+0x184>)
 80009a6:	2201      	movs	r2, #1
 80009a8:	715a      	strb	r2, [r3, #5]
	
	/* Return OK */
	return 1;
 80009aa:	2301      	movs	r3, #1
}
 80009ac:	0018      	movs	r0, r3
 80009ae:	46bd      	mov	sp, r7
 80009b0:	b002      	add	sp, #8
 80009b2:	bd80      	pop	{r7, pc}
 80009b4:	00004e20 	.word	0x00004e20
 80009b8:	20000040 	.word	0x20000040
 80009bc:	000009c4 	.word	0x000009c4
 80009c0:	2000051c 	.word	0x2000051c

080009c4 <SSD1306_UpdateScreen>:

void SSD1306_UpdateScreen(void) {
 80009c4:	b580      	push	{r7, lr}
 80009c6:	b082      	sub	sp, #8
 80009c8:	af00      	add	r7, sp, #0
	uint8_t m;
	
	for (m = 0; m < 8; m++) {
 80009ca:	1dfb      	adds	r3, r7, #7
 80009cc:	2200      	movs	r2, #0
 80009ce:	701a      	strb	r2, [r3, #0]
 80009d0:	e021      	b.n	8000a16 <SSD1306_UpdateScreen+0x52>
		SSD1306_WRITECOMMAND(0xB0 + m);
 80009d2:	1dfb      	adds	r3, r7, #7
 80009d4:	781b      	ldrb	r3, [r3, #0]
 80009d6:	3b50      	subs	r3, #80	@ 0x50
 80009d8:	b2db      	uxtb	r3, r3
 80009da:	001a      	movs	r2, r3
 80009dc:	2100      	movs	r1, #0
 80009de:	2078      	movs	r0, #120	@ 0x78
 80009e0:	f000 f9f6 	bl	8000dd0 <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x00);
 80009e4:	2200      	movs	r2, #0
 80009e6:	2100      	movs	r1, #0
 80009e8:	2078      	movs	r0, #120	@ 0x78
 80009ea:	f000 f9f1 	bl	8000dd0 <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x10);
 80009ee:	2210      	movs	r2, #16
 80009f0:	2100      	movs	r1, #0
 80009f2:	2078      	movs	r0, #120	@ 0x78
 80009f4:	f000 f9ec 	bl	8000dd0 <ssd1306_I2C_Write>
		
		/* Write multi data */
		ssd1306_I2C_WriteMulti(SSD1306_I2C_ADDR, 0x40, &SSD1306_Buffer[SSD1306_WIDTH * m], SSD1306_WIDTH);
 80009f8:	1dfb      	adds	r3, r7, #7
 80009fa:	781b      	ldrb	r3, [r3, #0]
 80009fc:	01da      	lsls	r2, r3, #7
 80009fe:	4b0a      	ldr	r3, [pc, #40]	@ (8000a28 <SSD1306_UpdateScreen+0x64>)
 8000a00:	18d2      	adds	r2, r2, r3
 8000a02:	2380      	movs	r3, #128	@ 0x80
 8000a04:	2140      	movs	r1, #64	@ 0x40
 8000a06:	2078      	movs	r0, #120	@ 0x78
 8000a08:	f000 f976 	bl	8000cf8 <ssd1306_I2C_WriteMulti>
	for (m = 0; m < 8; m++) {
 8000a0c:	1dfb      	adds	r3, r7, #7
 8000a0e:	781a      	ldrb	r2, [r3, #0]
 8000a10:	1dfb      	adds	r3, r7, #7
 8000a12:	3201      	adds	r2, #1
 8000a14:	701a      	strb	r2, [r3, #0]
 8000a16:	1dfb      	adds	r3, r7, #7
 8000a18:	781b      	ldrb	r3, [r3, #0]
 8000a1a:	2b07      	cmp	r3, #7
 8000a1c:	d9d9      	bls.n	80009d2 <SSD1306_UpdateScreen+0xe>
	}
}
 8000a1e:	46c0      	nop			@ (mov r8, r8)
 8000a20:	46c0      	nop			@ (mov r8, r8)
 8000a22:	46bd      	mov	sp, r7
 8000a24:	b002      	add	sp, #8
 8000a26:	bd80      	pop	{r7, pc}
 8000a28:	2000011c 	.word	0x2000011c

08000a2c <SSD1306_Fill>:
	for (i = 0; i < sizeof(SSD1306_Buffer); i++) {
		SSD1306_Buffer[i] = ~SSD1306_Buffer[i];
	}
}

void SSD1306_Fill(SSD1306_COLOR_t color) {
 8000a2c:	b580      	push	{r7, lr}
 8000a2e:	b082      	sub	sp, #8
 8000a30:	af00      	add	r7, sp, #0
 8000a32:	0002      	movs	r2, r0
 8000a34:	1dfb      	adds	r3, r7, #7
 8000a36:	701a      	strb	r2, [r3, #0]
	/* Set memory */
	memset(SSD1306_Buffer, (color == SSD1306_COLOR_BLACK) ? 0x00 : 0xFF, sizeof(SSD1306_Buffer));
 8000a38:	1dfb      	adds	r3, r7, #7
 8000a3a:	781b      	ldrb	r3, [r3, #0]
 8000a3c:	2b00      	cmp	r3, #0
 8000a3e:	d101      	bne.n	8000a44 <SSD1306_Fill+0x18>
 8000a40:	2300      	movs	r3, #0
 8000a42:	e000      	b.n	8000a46 <SSD1306_Fill+0x1a>
 8000a44:	23ff      	movs	r3, #255	@ 0xff
 8000a46:	2280      	movs	r2, #128	@ 0x80
 8000a48:	00d2      	lsls	r2, r2, #3
 8000a4a:	4804      	ldr	r0, [pc, #16]	@ (8000a5c <SSD1306_Fill+0x30>)
 8000a4c:	0019      	movs	r1, r3
 8000a4e:	f003 fe97 	bl	8004780 <memset>
}
 8000a52:	46c0      	nop			@ (mov r8, r8)
 8000a54:	46bd      	mov	sp, r7
 8000a56:	b002      	add	sp, #8
 8000a58:	bd80      	pop	{r7, pc}
 8000a5a:	46c0      	nop			@ (mov r8, r8)
 8000a5c:	2000011c 	.word	0x2000011c

08000a60 <SSD1306_DrawPixel>:

void SSD1306_DrawPixel(uint16_t x, uint16_t y, SSD1306_COLOR_t color) {
 8000a60:	b590      	push	{r4, r7, lr}
 8000a62:	b083      	sub	sp, #12
 8000a64:	af00      	add	r7, sp, #0
 8000a66:	0004      	movs	r4, r0
 8000a68:	0008      	movs	r0, r1
 8000a6a:	0011      	movs	r1, r2
 8000a6c:	1dbb      	adds	r3, r7, #6
 8000a6e:	1c22      	adds	r2, r4, #0
 8000a70:	801a      	strh	r2, [r3, #0]
 8000a72:	1d3b      	adds	r3, r7, #4
 8000a74:	1c02      	adds	r2, r0, #0
 8000a76:	801a      	strh	r2, [r3, #0]
 8000a78:	1cfb      	adds	r3, r7, #3
 8000a7a:	1c0a      	adds	r2, r1, #0
 8000a7c:	701a      	strb	r2, [r3, #0]
	if (
 8000a7e:	1dbb      	adds	r3, r7, #6
 8000a80:	881b      	ldrh	r3, [r3, #0]
 8000a82:	2b7f      	cmp	r3, #127	@ 0x7f
 8000a84:	d852      	bhi.n	8000b2c <SSD1306_DrawPixel+0xcc>
		x >= SSD1306_WIDTH ||
 8000a86:	1d3b      	adds	r3, r7, #4
 8000a88:	881b      	ldrh	r3, [r3, #0]
 8000a8a:	2b3f      	cmp	r3, #63	@ 0x3f
 8000a8c:	d84e      	bhi.n	8000b2c <SSD1306_DrawPixel+0xcc>
		/* Error */
		return;
	}
	
	/* Check if pixels are inverted */
	if (SSD1306.Inverted) {
 8000a8e:	4b29      	ldr	r3, [pc, #164]	@ (8000b34 <SSD1306_DrawPixel+0xd4>)
 8000a90:	791b      	ldrb	r3, [r3, #4]
 8000a92:	2b00      	cmp	r3, #0
 8000a94:	d006      	beq.n	8000aa4 <SSD1306_DrawPixel+0x44>
		color = (SSD1306_COLOR_t)!color;
 8000a96:	1cfb      	adds	r3, r7, #3
 8000a98:	781b      	ldrb	r3, [r3, #0]
 8000a9a:	425a      	negs	r2, r3
 8000a9c:	4153      	adcs	r3, r2
 8000a9e:	b2da      	uxtb	r2, r3
 8000aa0:	1cfb      	adds	r3, r7, #3
 8000aa2:	701a      	strb	r2, [r3, #0]
	}
	
	/* Set color */
	if (color == SSD1306_COLOR_WHITE) {
 8000aa4:	1cfb      	adds	r3, r7, #3
 8000aa6:	781b      	ldrb	r3, [r3, #0]
 8000aa8:	2b01      	cmp	r3, #1
 8000aaa:	d11e      	bne.n	8000aea <SSD1306_DrawPixel+0x8a>
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 8000aac:	1dbb      	adds	r3, r7, #6
 8000aae:	881a      	ldrh	r2, [r3, #0]
 8000ab0:	1d3b      	adds	r3, r7, #4
 8000ab2:	881b      	ldrh	r3, [r3, #0]
 8000ab4:	08db      	lsrs	r3, r3, #3
 8000ab6:	b298      	uxth	r0, r3
 8000ab8:	0003      	movs	r3, r0
 8000aba:	01db      	lsls	r3, r3, #7
 8000abc:	18d3      	adds	r3, r2, r3
 8000abe:	4a1e      	ldr	r2, [pc, #120]	@ (8000b38 <SSD1306_DrawPixel+0xd8>)
 8000ac0:	5cd3      	ldrb	r3, [r2, r3]
 8000ac2:	b25a      	sxtb	r2, r3
 8000ac4:	1d3b      	adds	r3, r7, #4
 8000ac6:	881b      	ldrh	r3, [r3, #0]
 8000ac8:	2107      	movs	r1, #7
 8000aca:	400b      	ands	r3, r1
 8000acc:	2101      	movs	r1, #1
 8000ace:	4099      	lsls	r1, r3
 8000ad0:	000b      	movs	r3, r1
 8000ad2:	b25b      	sxtb	r3, r3
 8000ad4:	4313      	orrs	r3, r2
 8000ad6:	b259      	sxtb	r1, r3
 8000ad8:	1dbb      	adds	r3, r7, #6
 8000ada:	881a      	ldrh	r2, [r3, #0]
 8000adc:	0003      	movs	r3, r0
 8000ade:	01db      	lsls	r3, r3, #7
 8000ae0:	18d3      	adds	r3, r2, r3
 8000ae2:	b2c9      	uxtb	r1, r1
 8000ae4:	4a14      	ldr	r2, [pc, #80]	@ (8000b38 <SSD1306_DrawPixel+0xd8>)
 8000ae6:	54d1      	strb	r1, [r2, r3]
 8000ae8:	e021      	b.n	8000b2e <SSD1306_DrawPixel+0xce>
	} else {
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 8000aea:	1dbb      	adds	r3, r7, #6
 8000aec:	881a      	ldrh	r2, [r3, #0]
 8000aee:	1d3b      	adds	r3, r7, #4
 8000af0:	881b      	ldrh	r3, [r3, #0]
 8000af2:	08db      	lsrs	r3, r3, #3
 8000af4:	b298      	uxth	r0, r3
 8000af6:	0003      	movs	r3, r0
 8000af8:	01db      	lsls	r3, r3, #7
 8000afa:	18d3      	adds	r3, r2, r3
 8000afc:	4a0e      	ldr	r2, [pc, #56]	@ (8000b38 <SSD1306_DrawPixel+0xd8>)
 8000afe:	5cd3      	ldrb	r3, [r2, r3]
 8000b00:	b25b      	sxtb	r3, r3
 8000b02:	1d3a      	adds	r2, r7, #4
 8000b04:	8812      	ldrh	r2, [r2, #0]
 8000b06:	2107      	movs	r1, #7
 8000b08:	400a      	ands	r2, r1
 8000b0a:	2101      	movs	r1, #1
 8000b0c:	4091      	lsls	r1, r2
 8000b0e:	000a      	movs	r2, r1
 8000b10:	b252      	sxtb	r2, r2
 8000b12:	43d2      	mvns	r2, r2
 8000b14:	b252      	sxtb	r2, r2
 8000b16:	4013      	ands	r3, r2
 8000b18:	b259      	sxtb	r1, r3
 8000b1a:	1dbb      	adds	r3, r7, #6
 8000b1c:	881a      	ldrh	r2, [r3, #0]
 8000b1e:	0003      	movs	r3, r0
 8000b20:	01db      	lsls	r3, r3, #7
 8000b22:	18d3      	adds	r3, r2, r3
 8000b24:	b2c9      	uxtb	r1, r1
 8000b26:	4a04      	ldr	r2, [pc, #16]	@ (8000b38 <SSD1306_DrawPixel+0xd8>)
 8000b28:	54d1      	strb	r1, [r2, r3]
 8000b2a:	e000      	b.n	8000b2e <SSD1306_DrawPixel+0xce>
		return;
 8000b2c:	46c0      	nop			@ (mov r8, r8)
	}
}
 8000b2e:	46bd      	mov	sp, r7
 8000b30:	b003      	add	sp, #12
 8000b32:	bd90      	pop	{r4, r7, pc}
 8000b34:	2000051c 	.word	0x2000051c
 8000b38:	2000011c 	.word	0x2000011c

08000b3c <SSD1306_GotoXY>:

void SSD1306_GotoXY(uint16_t x, uint16_t y) {
 8000b3c:	b580      	push	{r7, lr}
 8000b3e:	b082      	sub	sp, #8
 8000b40:	af00      	add	r7, sp, #0
 8000b42:	0002      	movs	r2, r0
 8000b44:	1dbb      	adds	r3, r7, #6
 8000b46:	801a      	strh	r2, [r3, #0]
 8000b48:	1d3b      	adds	r3, r7, #4
 8000b4a:	1c0a      	adds	r2, r1, #0
 8000b4c:	801a      	strh	r2, [r3, #0]
	/* Set write pointers */
	SSD1306.CurrentX = x;
 8000b4e:	4b06      	ldr	r3, [pc, #24]	@ (8000b68 <SSD1306_GotoXY+0x2c>)
 8000b50:	1dba      	adds	r2, r7, #6
 8000b52:	8812      	ldrh	r2, [r2, #0]
 8000b54:	801a      	strh	r2, [r3, #0]
	SSD1306.CurrentY = y;
 8000b56:	4b04      	ldr	r3, [pc, #16]	@ (8000b68 <SSD1306_GotoXY+0x2c>)
 8000b58:	1d3a      	adds	r2, r7, #4
 8000b5a:	8812      	ldrh	r2, [r2, #0]
 8000b5c:	805a      	strh	r2, [r3, #2]
}
 8000b5e:	46c0      	nop			@ (mov r8, r8)
 8000b60:	46bd      	mov	sp, r7
 8000b62:	b002      	add	sp, #8
 8000b64:	bd80      	pop	{r7, pc}
 8000b66:	46c0      	nop			@ (mov r8, r8)
 8000b68:	2000051c 	.word	0x2000051c

08000b6c <SSD1306_Putc>:

char SSD1306_Putc(char ch, FontDef_t* Font, SSD1306_COLOR_t color) {
 8000b6c:	b580      	push	{r7, lr}
 8000b6e:	b086      	sub	sp, #24
 8000b70:	af00      	add	r7, sp, #0
 8000b72:	6039      	str	r1, [r7, #0]
 8000b74:	0011      	movs	r1, r2
 8000b76:	1dfb      	adds	r3, r7, #7
 8000b78:	1c02      	adds	r2, r0, #0
 8000b7a:	701a      	strb	r2, [r3, #0]
 8000b7c:	1dbb      	adds	r3, r7, #6
 8000b7e:	1c0a      	adds	r2, r1, #0
 8000b80:	701a      	strb	r2, [r3, #0]
	uint32_t i, b, j;
	
	/* Check available space in LCD */
	if (
		SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) ||
 8000b82:	4b3a      	ldr	r3, [pc, #232]	@ (8000c6c <SSD1306_Putc+0x100>)
 8000b84:	881b      	ldrh	r3, [r3, #0]
 8000b86:	001a      	movs	r2, r3
 8000b88:	683b      	ldr	r3, [r7, #0]
 8000b8a:	781b      	ldrb	r3, [r3, #0]
 8000b8c:	18d3      	adds	r3, r2, r3
	if (
 8000b8e:	2b7f      	cmp	r3, #127	@ 0x7f
 8000b90:	dc07      	bgt.n	8000ba2 <SSD1306_Putc+0x36>
		SSD1306_HEIGHT <= (SSD1306.CurrentY + Font->FontHeight)
 8000b92:	4b36      	ldr	r3, [pc, #216]	@ (8000c6c <SSD1306_Putc+0x100>)
 8000b94:	885b      	ldrh	r3, [r3, #2]
 8000b96:	001a      	movs	r2, r3
 8000b98:	683b      	ldr	r3, [r7, #0]
 8000b9a:	785b      	ldrb	r3, [r3, #1]
 8000b9c:	18d3      	adds	r3, r2, r3
		SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) ||
 8000b9e:	2b3f      	cmp	r3, #63	@ 0x3f
 8000ba0:	dd01      	ble.n	8000ba6 <SSD1306_Putc+0x3a>
	) {
		/* Error */
		return 0;
 8000ba2:	2300      	movs	r3, #0
 8000ba4:	e05d      	b.n	8000c62 <SSD1306_Putc+0xf6>
	}
	
	/* Go through font */
	for (i = 0; i < Font->FontHeight; i++) {
 8000ba6:	2300      	movs	r3, #0
 8000ba8:	617b      	str	r3, [r7, #20]
 8000baa:	e04a      	b.n	8000c42 <SSD1306_Putc+0xd6>
		b = Font->data[(ch - 32) * Font->FontHeight + i];
 8000bac:	683b      	ldr	r3, [r7, #0]
 8000bae:	685a      	ldr	r2, [r3, #4]
 8000bb0:	1dfb      	adds	r3, r7, #7
 8000bb2:	781b      	ldrb	r3, [r3, #0]
 8000bb4:	3b20      	subs	r3, #32
 8000bb6:	6839      	ldr	r1, [r7, #0]
 8000bb8:	7849      	ldrb	r1, [r1, #1]
 8000bba:	434b      	muls	r3, r1
 8000bbc:	0019      	movs	r1, r3
 8000bbe:	697b      	ldr	r3, [r7, #20]
 8000bc0:	18cb      	adds	r3, r1, r3
 8000bc2:	005b      	lsls	r3, r3, #1
 8000bc4:	18d3      	adds	r3, r2, r3
 8000bc6:	881b      	ldrh	r3, [r3, #0]
 8000bc8:	60fb      	str	r3, [r7, #12]
		for (j = 0; j < Font->FontWidth; j++) {
 8000bca:	2300      	movs	r3, #0
 8000bcc:	613b      	str	r3, [r7, #16]
 8000bce:	e02f      	b.n	8000c30 <SSD1306_Putc+0xc4>
			if ((b << j) & 0x8000) {
 8000bd0:	68fa      	ldr	r2, [r7, #12]
 8000bd2:	693b      	ldr	r3, [r7, #16]
 8000bd4:	409a      	lsls	r2, r3
 8000bd6:	2380      	movs	r3, #128	@ 0x80
 8000bd8:	021b      	lsls	r3, r3, #8
 8000bda:	4013      	ands	r3, r2
 8000bdc:	d011      	beq.n	8000c02 <SSD1306_Putc+0x96>
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t) color);
 8000bde:	4b23      	ldr	r3, [pc, #140]	@ (8000c6c <SSD1306_Putc+0x100>)
 8000be0:	881a      	ldrh	r2, [r3, #0]
 8000be2:	693b      	ldr	r3, [r7, #16]
 8000be4:	b29b      	uxth	r3, r3
 8000be6:	18d3      	adds	r3, r2, r3
 8000be8:	b298      	uxth	r0, r3
 8000bea:	4b20      	ldr	r3, [pc, #128]	@ (8000c6c <SSD1306_Putc+0x100>)
 8000bec:	885a      	ldrh	r2, [r3, #2]
 8000bee:	697b      	ldr	r3, [r7, #20]
 8000bf0:	b29b      	uxth	r3, r3
 8000bf2:	18d3      	adds	r3, r2, r3
 8000bf4:	b299      	uxth	r1, r3
 8000bf6:	1dbb      	adds	r3, r7, #6
 8000bf8:	781b      	ldrb	r3, [r3, #0]
 8000bfa:	001a      	movs	r2, r3
 8000bfc:	f7ff ff30 	bl	8000a60 <SSD1306_DrawPixel>
 8000c00:	e013      	b.n	8000c2a <SSD1306_Putc+0xbe>
			} else {
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t)!color);
 8000c02:	4b1a      	ldr	r3, [pc, #104]	@ (8000c6c <SSD1306_Putc+0x100>)
 8000c04:	881a      	ldrh	r2, [r3, #0]
 8000c06:	693b      	ldr	r3, [r7, #16]
 8000c08:	b29b      	uxth	r3, r3
 8000c0a:	18d3      	adds	r3, r2, r3
 8000c0c:	b298      	uxth	r0, r3
 8000c0e:	4b17      	ldr	r3, [pc, #92]	@ (8000c6c <SSD1306_Putc+0x100>)
 8000c10:	885a      	ldrh	r2, [r3, #2]
 8000c12:	697b      	ldr	r3, [r7, #20]
 8000c14:	b29b      	uxth	r3, r3
 8000c16:	18d3      	adds	r3, r2, r3
 8000c18:	b299      	uxth	r1, r3
 8000c1a:	1dbb      	adds	r3, r7, #6
 8000c1c:	781b      	ldrb	r3, [r3, #0]
 8000c1e:	425a      	negs	r2, r3
 8000c20:	4153      	adcs	r3, r2
 8000c22:	b2db      	uxtb	r3, r3
 8000c24:	001a      	movs	r2, r3
 8000c26:	f7ff ff1b 	bl	8000a60 <SSD1306_DrawPixel>
		for (j = 0; j < Font->FontWidth; j++) {
 8000c2a:	693b      	ldr	r3, [r7, #16]
 8000c2c:	3301      	adds	r3, #1
 8000c2e:	613b      	str	r3, [r7, #16]
 8000c30:	683b      	ldr	r3, [r7, #0]
 8000c32:	781b      	ldrb	r3, [r3, #0]
 8000c34:	001a      	movs	r2, r3
 8000c36:	693b      	ldr	r3, [r7, #16]
 8000c38:	4293      	cmp	r3, r2
 8000c3a:	d3c9      	bcc.n	8000bd0 <SSD1306_Putc+0x64>
	for (i = 0; i < Font->FontHeight; i++) {
 8000c3c:	697b      	ldr	r3, [r7, #20]
 8000c3e:	3301      	adds	r3, #1
 8000c40:	617b      	str	r3, [r7, #20]
 8000c42:	683b      	ldr	r3, [r7, #0]
 8000c44:	785b      	ldrb	r3, [r3, #1]
 8000c46:	001a      	movs	r2, r3
 8000c48:	697b      	ldr	r3, [r7, #20]
 8000c4a:	4293      	cmp	r3, r2
 8000c4c:	d3ae      	bcc.n	8000bac <SSD1306_Putc+0x40>
			}
		}
	}
	
	/* Increase pointer */
	SSD1306.CurrentX += Font->FontWidth;
 8000c4e:	4b07      	ldr	r3, [pc, #28]	@ (8000c6c <SSD1306_Putc+0x100>)
 8000c50:	881b      	ldrh	r3, [r3, #0]
 8000c52:	683a      	ldr	r2, [r7, #0]
 8000c54:	7812      	ldrb	r2, [r2, #0]
 8000c56:	189b      	adds	r3, r3, r2
 8000c58:	b29a      	uxth	r2, r3
 8000c5a:	4b04      	ldr	r3, [pc, #16]	@ (8000c6c <SSD1306_Putc+0x100>)
 8000c5c:	801a      	strh	r2, [r3, #0]
	
	/* Return character written */
	return ch;
 8000c5e:	1dfb      	adds	r3, r7, #7
 8000c60:	781b      	ldrb	r3, [r3, #0]
}
 8000c62:	0018      	movs	r0, r3
 8000c64:	46bd      	mov	sp, r7
 8000c66:	b006      	add	sp, #24
 8000c68:	bd80      	pop	{r7, pc}
 8000c6a:	46c0      	nop			@ (mov r8, r8)
 8000c6c:	2000051c 	.word	0x2000051c

08000c70 <SSD1306_Puts>:

char SSD1306_Puts(char* str, FontDef_t* Font, SSD1306_COLOR_t color) {
 8000c70:	b580      	push	{r7, lr}
 8000c72:	b084      	sub	sp, #16
 8000c74:	af00      	add	r7, sp, #0
 8000c76:	60f8      	str	r0, [r7, #12]
 8000c78:	60b9      	str	r1, [r7, #8]
 8000c7a:	1dfb      	adds	r3, r7, #7
 8000c7c:	701a      	strb	r2, [r3, #0]
	/* Write characters */
	while (*str) {
 8000c7e:	e013      	b.n	8000ca8 <SSD1306_Puts+0x38>
		/* Write character by character */
		if (SSD1306_Putc(*str, Font, color) != *str) {
 8000c80:	68fb      	ldr	r3, [r7, #12]
 8000c82:	7818      	ldrb	r0, [r3, #0]
 8000c84:	1dfb      	adds	r3, r7, #7
 8000c86:	781a      	ldrb	r2, [r3, #0]
 8000c88:	68bb      	ldr	r3, [r7, #8]
 8000c8a:	0019      	movs	r1, r3
 8000c8c:	f7ff ff6e 	bl	8000b6c <SSD1306_Putc>
 8000c90:	0003      	movs	r3, r0
 8000c92:	001a      	movs	r2, r3
 8000c94:	68fb      	ldr	r3, [r7, #12]
 8000c96:	781b      	ldrb	r3, [r3, #0]
 8000c98:	429a      	cmp	r2, r3
 8000c9a:	d002      	beq.n	8000ca2 <SSD1306_Puts+0x32>
			/* Return error */
			return *str;
 8000c9c:	68fb      	ldr	r3, [r7, #12]
 8000c9e:	781b      	ldrb	r3, [r3, #0]
 8000ca0:	e008      	b.n	8000cb4 <SSD1306_Puts+0x44>
		}
		
		/* Increase string pointer */
		str++;
 8000ca2:	68fb      	ldr	r3, [r7, #12]
 8000ca4:	3301      	adds	r3, #1
 8000ca6:	60fb      	str	r3, [r7, #12]
	while (*str) {
 8000ca8:	68fb      	ldr	r3, [r7, #12]
 8000caa:	781b      	ldrb	r3, [r3, #0]
 8000cac:	2b00      	cmp	r3, #0
 8000cae:	d1e7      	bne.n	8000c80 <SSD1306_Puts+0x10>
	}
	
	/* Everything OK, zero should be returned */
	return *str;
 8000cb0:	68fb      	ldr	r3, [r7, #12]
 8000cb2:	781b      	ldrb	r3, [r3, #0]
}
 8000cb4:	0018      	movs	r0, r3
 8000cb6:	46bd      	mov	sp, r7
 8000cb8:	b004      	add	sp, #16
 8000cba:	bd80      	pop	{r7, pc}

08000cbc <SSD1306_Clear>:
}
 


void SSD1306_Clear (void)
{
 8000cbc:	b580      	push	{r7, lr}
 8000cbe:	af00      	add	r7, sp, #0
	SSD1306_Fill (0);
 8000cc0:	2000      	movs	r0, #0
 8000cc2:	f7ff feb3 	bl	8000a2c <SSD1306_Fill>
    SSD1306_UpdateScreen();
 8000cc6:	f7ff fe7d 	bl	80009c4 <SSD1306_UpdateScreen>
}
 8000cca:	46c0      	nop			@ (mov r8, r8)
 8000ccc:	46bd      	mov	sp, r7
 8000cce:	bd80      	pop	{r7, pc}

08000cd0 <ssd1306_I2C_Init>:
//  _| |_ / /_| |____ 
// |_____|____|\_____|
//
/////////////////////////////////////////////////////////////////////////////////////////////////////////

void ssd1306_I2C_Init() {
 8000cd0:	b580      	push	{r7, lr}
 8000cd2:	b082      	sub	sp, #8
 8000cd4:	af00      	add	r7, sp, #0
	//MX_I2C1_Init();
	uint32_t p = 250000;
 8000cd6:	4b07      	ldr	r3, [pc, #28]	@ (8000cf4 <ssd1306_I2C_Init+0x24>)
 8000cd8:	607b      	str	r3, [r7, #4]
	while(p>0)
 8000cda:	e002      	b.n	8000ce2 <ssd1306_I2C_Init+0x12>
		p--;
 8000cdc:	687b      	ldr	r3, [r7, #4]
 8000cde:	3b01      	subs	r3, #1
 8000ce0:	607b      	str	r3, [r7, #4]
	while(p>0)
 8000ce2:	687b      	ldr	r3, [r7, #4]
 8000ce4:	2b00      	cmp	r3, #0
 8000ce6:	d1f9      	bne.n	8000cdc <ssd1306_I2C_Init+0xc>
	//HAL_I2C_DeInit(&hi2c1);
	//p = 250000;
	//while(p>0)
	//	p--;
	//MX_I2C1_Init();
}
 8000ce8:	46c0      	nop			@ (mov r8, r8)
 8000cea:	46c0      	nop			@ (mov r8, r8)
 8000cec:	46bd      	mov	sp, r7
 8000cee:	b002      	add	sp, #8
 8000cf0:	bd80      	pop	{r7, pc}
 8000cf2:	46c0      	nop			@ (mov r8, r8)
 8000cf4:	0003d090 	.word	0x0003d090

08000cf8 <ssd1306_I2C_WriteMulti>:

void ssd1306_I2C_WriteMulti(uint8_t address, uint8_t reg, uint8_t* data, uint16_t count) {
 8000cf8:	b5b0      	push	{r4, r5, r7, lr}
 8000cfa:	b0c6      	sub	sp, #280	@ 0x118
 8000cfc:	af02      	add	r7, sp, #8
 8000cfe:	0004      	movs	r4, r0
 8000d00:	0008      	movs	r0, r1
 8000d02:	603a      	str	r2, [r7, #0]
 8000d04:	0019      	movs	r1, r3
 8000d06:	4b2d      	ldr	r3, [pc, #180]	@ (8000dbc <ssd1306_I2C_WriteMulti+0xc4>)
 8000d08:	2588      	movs	r5, #136	@ 0x88
 8000d0a:	006d      	lsls	r5, r5, #1
 8000d0c:	195b      	adds	r3, r3, r5
 8000d0e:	19db      	adds	r3, r3, r7
 8000d10:	1c22      	adds	r2, r4, #0
 8000d12:	701a      	strb	r2, [r3, #0]
 8000d14:	4b2a      	ldr	r3, [pc, #168]	@ (8000dc0 <ssd1306_I2C_WriteMulti+0xc8>)
 8000d16:	002c      	movs	r4, r5
 8000d18:	191b      	adds	r3, r3, r4
 8000d1a:	19db      	adds	r3, r3, r7
 8000d1c:	1c02      	adds	r2, r0, #0
 8000d1e:	701a      	strb	r2, [r3, #0]
 8000d20:	4b28      	ldr	r3, [pc, #160]	@ (8000dc4 <ssd1306_I2C_WriteMulti+0xcc>)
 8000d22:	0020      	movs	r0, r4
 8000d24:	181b      	adds	r3, r3, r0
 8000d26:	19db      	adds	r3, r3, r7
 8000d28:	1c0a      	adds	r2, r1, #0
 8000d2a:	801a      	strh	r2, [r3, #0]
uint8_t dt[256];
dt[0] = reg;
 8000d2c:	4b26      	ldr	r3, [pc, #152]	@ (8000dc8 <ssd1306_I2C_WriteMulti+0xd0>)
 8000d2e:	181b      	adds	r3, r3, r0
 8000d30:	19db      	adds	r3, r3, r7
 8000d32:	4a23      	ldr	r2, [pc, #140]	@ (8000dc0 <ssd1306_I2C_WriteMulti+0xc8>)
 8000d34:	1812      	adds	r2, r2, r0
 8000d36:	19d2      	adds	r2, r2, r7
 8000d38:	7812      	ldrb	r2, [r2, #0]
 8000d3a:	701a      	strb	r2, [r3, #0]
uint8_t i;
for(i = 0; i < count; i++)
 8000d3c:	2310      	movs	r3, #16
 8000d3e:	33ff      	adds	r3, #255	@ 0xff
 8000d40:	18fb      	adds	r3, r7, r3
 8000d42:	2200      	movs	r2, #0
 8000d44:	701a      	strb	r2, [r3, #0]
 8000d46:	e014      	b.n	8000d72 <ssd1306_I2C_WriteMulti+0x7a>
dt[i+1] = data[i];
 8000d48:	2010      	movs	r0, #16
 8000d4a:	30ff      	adds	r0, #255	@ 0xff
 8000d4c:	183b      	adds	r3, r7, r0
 8000d4e:	781b      	ldrb	r3, [r3, #0]
 8000d50:	683a      	ldr	r2, [r7, #0]
 8000d52:	18d2      	adds	r2, r2, r3
 8000d54:	183b      	adds	r3, r7, r0
 8000d56:	781b      	ldrb	r3, [r3, #0]
 8000d58:	3301      	adds	r3, #1
 8000d5a:	7811      	ldrb	r1, [r2, #0]
 8000d5c:	4a1a      	ldr	r2, [pc, #104]	@ (8000dc8 <ssd1306_I2C_WriteMulti+0xd0>)
 8000d5e:	2488      	movs	r4, #136	@ 0x88
 8000d60:	0064      	lsls	r4, r4, #1
 8000d62:	1912      	adds	r2, r2, r4
 8000d64:	19d2      	adds	r2, r2, r7
 8000d66:	54d1      	strb	r1, [r2, r3]
for(i = 0; i < count; i++)
 8000d68:	183b      	adds	r3, r7, r0
 8000d6a:	781a      	ldrb	r2, [r3, #0]
 8000d6c:	183b      	adds	r3, r7, r0
 8000d6e:	3201      	adds	r2, #1
 8000d70:	701a      	strb	r2, [r3, #0]
 8000d72:	2310      	movs	r3, #16
 8000d74:	33ff      	adds	r3, #255	@ 0xff
 8000d76:	18fb      	adds	r3, r7, r3
 8000d78:	781b      	ldrb	r3, [r3, #0]
 8000d7a:	b29b      	uxth	r3, r3
 8000d7c:	4a11      	ldr	r2, [pc, #68]	@ (8000dc4 <ssd1306_I2C_WriteMulti+0xcc>)
 8000d7e:	2188      	movs	r1, #136	@ 0x88
 8000d80:	0049      	lsls	r1, r1, #1
 8000d82:	1852      	adds	r2, r2, r1
 8000d84:	19d2      	adds	r2, r2, r7
 8000d86:	8812      	ldrh	r2, [r2, #0]
 8000d88:	429a      	cmp	r2, r3
 8000d8a:	d8dd      	bhi.n	8000d48 <ssd1306_I2C_WriteMulti+0x50>
HAL_I2C_Master_Transmit(&hi2c1, address, dt, count+1, 10);
 8000d8c:	4b0b      	ldr	r3, [pc, #44]	@ (8000dbc <ssd1306_I2C_WriteMulti+0xc4>)
 8000d8e:	000a      	movs	r2, r1
 8000d90:	189b      	adds	r3, r3, r2
 8000d92:	19db      	adds	r3, r3, r7
 8000d94:	781b      	ldrb	r3, [r3, #0]
 8000d96:	b299      	uxth	r1, r3
 8000d98:	4b0a      	ldr	r3, [pc, #40]	@ (8000dc4 <ssd1306_I2C_WriteMulti+0xcc>)
 8000d9a:	189b      	adds	r3, r3, r2
 8000d9c:	19db      	adds	r3, r3, r7
 8000d9e:	881b      	ldrh	r3, [r3, #0]
 8000da0:	3301      	adds	r3, #1
 8000da2:	b29b      	uxth	r3, r3
 8000da4:	220c      	movs	r2, #12
 8000da6:	18ba      	adds	r2, r7, r2
 8000da8:	4808      	ldr	r0, [pc, #32]	@ (8000dcc <ssd1306_I2C_WriteMulti+0xd4>)
 8000daa:	240a      	movs	r4, #10
 8000dac:	9400      	str	r4, [sp, #0]
 8000dae:	f000 fd55 	bl	800185c <HAL_I2C_Master_Transmit>
}
 8000db2:	46c0      	nop			@ (mov r8, r8)
 8000db4:	46bd      	mov	sp, r7
 8000db6:	b044      	add	sp, #272	@ 0x110
 8000db8:	bdb0      	pop	{r4, r5, r7, pc}
 8000dba:	46c0      	nop			@ (mov r8, r8)
 8000dbc:	fffffef7 	.word	0xfffffef7
 8000dc0:	fffffef6 	.word	0xfffffef6
 8000dc4:	fffffef4 	.word	0xfffffef4
 8000dc8:	fffffefc 	.word	0xfffffefc
 8000dcc:	20000040 	.word	0x20000040

08000dd0 <ssd1306_I2C_Write>:


void ssd1306_I2C_Write(uint8_t address, uint8_t reg, uint8_t data) {
 8000dd0:	b590      	push	{r4, r7, lr}
 8000dd2:	b087      	sub	sp, #28
 8000dd4:	af02      	add	r7, sp, #8
 8000dd6:	0004      	movs	r4, r0
 8000dd8:	0008      	movs	r0, r1
 8000dda:	0011      	movs	r1, r2
 8000ddc:	1dfb      	adds	r3, r7, #7
 8000dde:	1c22      	adds	r2, r4, #0
 8000de0:	701a      	strb	r2, [r3, #0]
 8000de2:	1dbb      	adds	r3, r7, #6
 8000de4:	1c02      	adds	r2, r0, #0
 8000de6:	701a      	strb	r2, [r3, #0]
 8000de8:	1d7b      	adds	r3, r7, #5
 8000dea:	1c0a      	adds	r2, r1, #0
 8000dec:	701a      	strb	r2, [r3, #0]
	uint8_t dt[2];
	dt[0] = reg;
 8000dee:	200c      	movs	r0, #12
 8000df0:	183b      	adds	r3, r7, r0
 8000df2:	1dba      	adds	r2, r7, #6
 8000df4:	7812      	ldrb	r2, [r2, #0]
 8000df6:	701a      	strb	r2, [r3, #0]
	dt[1] = data;
 8000df8:	183b      	adds	r3, r7, r0
 8000dfa:	1d7a      	adds	r2, r7, #5
 8000dfc:	7812      	ldrb	r2, [r2, #0]
 8000dfe:	705a      	strb	r2, [r3, #1]
	HAL_I2C_Master_Transmit(&hi2c1, address, dt, 2, 10);
 8000e00:	1dfb      	adds	r3, r7, #7
 8000e02:	781b      	ldrb	r3, [r3, #0]
 8000e04:	b299      	uxth	r1, r3
 8000e06:	183a      	adds	r2, r7, r0
 8000e08:	4804      	ldr	r0, [pc, #16]	@ (8000e1c <ssd1306_I2C_Write+0x4c>)
 8000e0a:	230a      	movs	r3, #10
 8000e0c:	9300      	str	r3, [sp, #0]
 8000e0e:	2302      	movs	r3, #2
 8000e10:	f000 fd24 	bl	800185c <HAL_I2C_Master_Transmit>
}
 8000e14:	46c0      	nop			@ (mov r8, r8)
 8000e16:	46bd      	mov	sp, r7
 8000e18:	b005      	add	sp, #20
 8000e1a:	bd90      	pop	{r4, r7, pc}
 8000e1c:	20000040 	.word	0x20000040

08000e20 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000e20:	b580      	push	{r7, lr}
 8000e22:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000e24:	4b07      	ldr	r3, [pc, #28]	@ (8000e44 <HAL_MspInit+0x24>)
 8000e26:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000e28:	4b06      	ldr	r3, [pc, #24]	@ (8000e44 <HAL_MspInit+0x24>)
 8000e2a:	2101      	movs	r1, #1
 8000e2c:	430a      	orrs	r2, r1
 8000e2e:	635a      	str	r2, [r3, #52]	@ 0x34
  __HAL_RCC_PWR_CLK_ENABLE();
 8000e30:	4b04      	ldr	r3, [pc, #16]	@ (8000e44 <HAL_MspInit+0x24>)
 8000e32:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8000e34:	4b03      	ldr	r3, [pc, #12]	@ (8000e44 <HAL_MspInit+0x24>)
 8000e36:	2180      	movs	r1, #128	@ 0x80
 8000e38:	0549      	lsls	r1, r1, #21
 8000e3a:	430a      	orrs	r2, r1
 8000e3c:	639a      	str	r2, [r3, #56]	@ 0x38
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000e3e:	46c0      	nop			@ (mov r8, r8)
 8000e40:	46bd      	mov	sp, r7
 8000e42:	bd80      	pop	{r7, pc}
 8000e44:	40021000 	.word	0x40021000

08000e48 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000e48:	b590      	push	{r4, r7, lr}
 8000e4a:	b089      	sub	sp, #36	@ 0x24
 8000e4c:	af00      	add	r7, sp, #0
 8000e4e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e50:	240c      	movs	r4, #12
 8000e52:	193b      	adds	r3, r7, r4
 8000e54:	0018      	movs	r0, r3
 8000e56:	2314      	movs	r3, #20
 8000e58:	001a      	movs	r2, r3
 8000e5a:	2100      	movs	r1, #0
 8000e5c:	f003 fc90 	bl	8004780 <memset>
  if(hi2c->Instance==I2C1)
 8000e60:	687b      	ldr	r3, [r7, #4]
 8000e62:	681b      	ldr	r3, [r3, #0]
 8000e64:	4a17      	ldr	r2, [pc, #92]	@ (8000ec4 <HAL_I2C_MspInit+0x7c>)
 8000e66:	4293      	cmp	r3, r2
 8000e68:	d128      	bne.n	8000ebc <HAL_I2C_MspInit+0x74>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e6a:	4b17      	ldr	r3, [pc, #92]	@ (8000ec8 <HAL_I2C_MspInit+0x80>)
 8000e6c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8000e6e:	4b16      	ldr	r3, [pc, #88]	@ (8000ec8 <HAL_I2C_MspInit+0x80>)
 8000e70:	2102      	movs	r1, #2
 8000e72:	430a      	orrs	r2, r1
 8000e74:	62da      	str	r2, [r3, #44]	@ 0x2c
 8000e76:	4b14      	ldr	r3, [pc, #80]	@ (8000ec8 <HAL_I2C_MspInit+0x80>)
 8000e78:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000e7a:	2202      	movs	r2, #2
 8000e7c:	4013      	ands	r3, r2
 8000e7e:	60bb      	str	r3, [r7, #8]
 8000e80:	68bb      	ldr	r3, [r7, #8]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000e82:	0021      	movs	r1, r4
 8000e84:	187b      	adds	r3, r7, r1
 8000e86:	22c0      	movs	r2, #192	@ 0xc0
 8000e88:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000e8a:	187b      	adds	r3, r7, r1
 8000e8c:	2212      	movs	r2, #18
 8000e8e:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e90:	187b      	adds	r3, r7, r1
 8000e92:	2200      	movs	r2, #0
 8000e94:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e96:	187b      	adds	r3, r7, r1
 8000e98:	2203      	movs	r2, #3
 8000e9a:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_I2C1;
 8000e9c:	187b      	adds	r3, r7, r1
 8000e9e:	2201      	movs	r2, #1
 8000ea0:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ea2:	187b      	adds	r3, r7, r1
 8000ea4:	4a09      	ldr	r2, [pc, #36]	@ (8000ecc <HAL_I2C_MspInit+0x84>)
 8000ea6:	0019      	movs	r1, r3
 8000ea8:	0010      	movs	r0, r2
 8000eaa:	f000 faad 	bl	8001408 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000eae:	4b06      	ldr	r3, [pc, #24]	@ (8000ec8 <HAL_I2C_MspInit+0x80>)
 8000eb0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8000eb2:	4b05      	ldr	r3, [pc, #20]	@ (8000ec8 <HAL_I2C_MspInit+0x80>)
 8000eb4:	2180      	movs	r1, #128	@ 0x80
 8000eb6:	0389      	lsls	r1, r1, #14
 8000eb8:	430a      	orrs	r2, r1
 8000eba:	639a      	str	r2, [r3, #56]	@ 0x38
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000ebc:	46c0      	nop			@ (mov r8, r8)
 8000ebe:	46bd      	mov	sp, r7
 8000ec0:	b009      	add	sp, #36	@ 0x24
 8000ec2:	bd90      	pop	{r4, r7, pc}
 8000ec4:	40005400 	.word	0x40005400
 8000ec8:	40021000 	.word	0x40021000
 8000ecc:	50000400 	.word	0x50000400

08000ed0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000ed0:	b590      	push	{r4, r7, lr}
 8000ed2:	b089      	sub	sp, #36	@ 0x24
 8000ed4:	af00      	add	r7, sp, #0
 8000ed6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ed8:	240c      	movs	r4, #12
 8000eda:	193b      	adds	r3, r7, r4
 8000edc:	0018      	movs	r0, r3
 8000ede:	2314      	movs	r3, #20
 8000ee0:	001a      	movs	r2, r3
 8000ee2:	2100      	movs	r1, #0
 8000ee4:	f003 fc4c 	bl	8004780 <memset>
  if(huart->Instance==USART1)
 8000ee8:	687b      	ldr	r3, [r7, #4]
 8000eea:	681b      	ldr	r3, [r3, #0]
 8000eec:	4a1c      	ldr	r2, [pc, #112]	@ (8000f60 <HAL_UART_MspInit+0x90>)
 8000eee:	4293      	cmp	r3, r2
 8000ef0:	d132      	bne.n	8000f58 <HAL_UART_MspInit+0x88>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000ef2:	4b1c      	ldr	r3, [pc, #112]	@ (8000f64 <HAL_UART_MspInit+0x94>)
 8000ef4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000ef6:	4b1b      	ldr	r3, [pc, #108]	@ (8000f64 <HAL_UART_MspInit+0x94>)
 8000ef8:	2180      	movs	r1, #128	@ 0x80
 8000efa:	01c9      	lsls	r1, r1, #7
 8000efc:	430a      	orrs	r2, r1
 8000efe:	635a      	str	r2, [r3, #52]	@ 0x34

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f00:	4b18      	ldr	r3, [pc, #96]	@ (8000f64 <HAL_UART_MspInit+0x94>)
 8000f02:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8000f04:	4b17      	ldr	r3, [pc, #92]	@ (8000f64 <HAL_UART_MspInit+0x94>)
 8000f06:	2101      	movs	r1, #1
 8000f08:	430a      	orrs	r2, r1
 8000f0a:	62da      	str	r2, [r3, #44]	@ 0x2c
 8000f0c:	4b15      	ldr	r3, [pc, #84]	@ (8000f64 <HAL_UART_MspInit+0x94>)
 8000f0e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000f10:	2201      	movs	r2, #1
 8000f12:	4013      	ands	r3, r2
 8000f14:	60bb      	str	r3, [r7, #8]
 8000f16:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8000f18:	193b      	adds	r3, r7, r4
 8000f1a:	22c0      	movs	r2, #192	@ 0xc0
 8000f1c:	00d2      	lsls	r2, r2, #3
 8000f1e:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f20:	0021      	movs	r1, r4
 8000f22:	187b      	adds	r3, r7, r1
 8000f24:	2202      	movs	r2, #2
 8000f26:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f28:	187b      	adds	r3, r7, r1
 8000f2a:	2200      	movs	r2, #0
 8000f2c:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f2e:	187b      	adds	r3, r7, r1
 8000f30:	2203      	movs	r2, #3
 8000f32:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_USART1;
 8000f34:	187b      	adds	r3, r7, r1
 8000f36:	2204      	movs	r2, #4
 8000f38:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f3a:	187a      	adds	r2, r7, r1
 8000f3c:	23a0      	movs	r3, #160	@ 0xa0
 8000f3e:	05db      	lsls	r3, r3, #23
 8000f40:	0011      	movs	r1, r2
 8000f42:	0018      	movs	r0, r3
 8000f44:	f000 fa60 	bl	8001408 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8000f48:	2200      	movs	r2, #0
 8000f4a:	2100      	movs	r1, #0
 8000f4c:	201b      	movs	r0, #27
 8000f4e:	f000 f9a1 	bl	8001294 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8000f52:	201b      	movs	r0, #27
 8000f54:	f000 f9b3 	bl	80012be <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8000f58:	46c0      	nop			@ (mov r8, r8)
 8000f5a:	46bd      	mov	sp, r7
 8000f5c:	b009      	add	sp, #36	@ 0x24
 8000f5e:	bd90      	pop	{r4, r7, pc}
 8000f60:	40013800 	.word	0x40013800
 8000f64:	40021000 	.word	0x40021000

08000f68 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000f68:	b580      	push	{r7, lr}
 8000f6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000f6c:	46c0      	nop			@ (mov r8, r8)
 8000f6e:	e7fd      	b.n	8000f6c <NMI_Handler+0x4>

08000f70 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000f70:	b580      	push	{r7, lr}
 8000f72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000f74:	46c0      	nop			@ (mov r8, r8)
 8000f76:	e7fd      	b.n	8000f74 <HardFault_Handler+0x4>

08000f78 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000f78:	b580      	push	{r7, lr}
 8000f7a:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000f7c:	46c0      	nop			@ (mov r8, r8)
 8000f7e:	46bd      	mov	sp, r7
 8000f80:	bd80      	pop	{r7, pc}

08000f82 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000f82:	b580      	push	{r7, lr}
 8000f84:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000f86:	46c0      	nop			@ (mov r8, r8)
 8000f88:	46bd      	mov	sp, r7
 8000f8a:	bd80      	pop	{r7, pc}

08000f8c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000f8c:	b580      	push	{r7, lr}
 8000f8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000f90:	f000 f894 	bl	80010bc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000f94:	46c0      	nop			@ (mov r8, r8)
 8000f96:	46bd      	mov	sp, r7
 8000f98:	bd80      	pop	{r7, pc}
	...

08000f9c <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt / USART1 wake-up interrupt through EXTI line 25.
  */
void USART1_IRQHandler(void)
{
 8000f9c:	b580      	push	{r7, lr}
 8000f9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8000fa0:	4b03      	ldr	r3, [pc, #12]	@ (8000fb0 <USART1_IRQHandler+0x14>)
 8000fa2:	0018      	movs	r0, r3
 8000fa4:	f002 f968 	bl	8003278 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8000fa8:	46c0      	nop			@ (mov r8, r8)
 8000faa:	46bd      	mov	sp, r7
 8000fac:	bd80      	pop	{r7, pc}
 8000fae:	46c0      	nop			@ (mov r8, r8)
 8000fb0:	20000094 	.word	0x20000094

08000fb4 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000fb4:	b580      	push	{r7, lr}
 8000fb6:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location add offset address ------------------*/
#if defined (USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000fb8:	46c0      	nop			@ (mov r8, r8)
 8000fba:	46bd      	mov	sp, r7
 8000fbc:	bd80      	pop	{r7, pc}
	...

08000fc0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   r0, =_estack
 8000fc0:	480d      	ldr	r0, [pc, #52]	@ (8000ff8 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000fc2:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000fc4:	f7ff fff6 	bl	8000fb4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000fc8:	480c      	ldr	r0, [pc, #48]	@ (8000ffc <LoopForever+0x6>)
  ldr r1, =_edata
 8000fca:	490d      	ldr	r1, [pc, #52]	@ (8001000 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000fcc:	4a0d      	ldr	r2, [pc, #52]	@ (8001004 <LoopForever+0xe>)
  movs r3, #0
 8000fce:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000fd0:	e002      	b.n	8000fd8 <LoopCopyDataInit>

08000fd2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000fd2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000fd4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000fd6:	3304      	adds	r3, #4

08000fd8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000fd8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000fda:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000fdc:	d3f9      	bcc.n	8000fd2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000fde:	4a0a      	ldr	r2, [pc, #40]	@ (8001008 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000fe0:	4c0a      	ldr	r4, [pc, #40]	@ (800100c <LoopForever+0x16>)
  movs r3, #0
 8000fe2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000fe4:	e001      	b.n	8000fea <LoopFillZerobss>

08000fe6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000fe6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000fe8:	3204      	adds	r2, #4

08000fea <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000fea:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000fec:	d3fb      	bcc.n	8000fe6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000fee:	f003 fbcf 	bl	8004790 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000ff2:	f7ff fa59 	bl	80004a8 <main>

08000ff6 <LoopForever>:

LoopForever:
    b LoopForever
 8000ff6:	e7fe      	b.n	8000ff6 <LoopForever>
  ldr   r0, =_estack
 8000ff8:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 8000ffc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001000:	20000014 	.word	0x20000014
  ldr r2, =_sidata
 8001004:	080055c8 	.word	0x080055c8
  ldr r2, =_sbss
 8001008:	20000014 	.word	0x20000014
  ldr r4, =_ebss
 800100c:	20000528 	.word	0x20000528

08001010 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001010:	e7fe      	b.n	8001010 <ADC1_COMP_IRQHandler>
	...

08001014 <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001014:	b580      	push	{r7, lr}
 8001016:	b082      	sub	sp, #8
 8001018:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800101a:	1dfb      	adds	r3, r7, #7
 800101c:	2200      	movs	r2, #0
 800101e:	701a      	strb	r2, [r3, #0]
#if (BUFFER_CACHE_DISABLE != 0)
  __HAL_FLASH_BUFFER_CACHE_DISABLE();
#endif /* BUFFER_CACHE_DISABLE */

#if (PREREAD_ENABLE != 0)
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
 8001020:	4b0b      	ldr	r3, [pc, #44]	@ (8001050 <HAL_Init+0x3c>)
 8001022:	681a      	ldr	r2, [r3, #0]
 8001024:	4b0a      	ldr	r3, [pc, #40]	@ (8001050 <HAL_Init+0x3c>)
 8001026:	2140      	movs	r1, #64	@ 0x40
 8001028:	430a      	orrs	r2, r1
 800102a:	601a      	str	r2, [r3, #0]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800102c:	2000      	movs	r0, #0
 800102e:	f000 f811 	bl	8001054 <HAL_InitTick>
 8001032:	1e03      	subs	r3, r0, #0
 8001034:	d003      	beq.n	800103e <HAL_Init+0x2a>
  {
    status = HAL_ERROR;
 8001036:	1dfb      	adds	r3, r7, #7
 8001038:	2201      	movs	r2, #1
 800103a:	701a      	strb	r2, [r3, #0]
 800103c:	e001      	b.n	8001042 <HAL_Init+0x2e>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800103e:	f7ff feef 	bl	8000e20 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001042:	1dfb      	adds	r3, r7, #7
 8001044:	781b      	ldrb	r3, [r3, #0]
}
 8001046:	0018      	movs	r0, r3
 8001048:	46bd      	mov	sp, r7
 800104a:	b002      	add	sp, #8
 800104c:	bd80      	pop	{r7, pc}
 800104e:	46c0      	nop			@ (mov r8, r8)
 8001050:	40022000 	.word	0x40022000

08001054 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001054:	b590      	push	{r4, r7, lr}
 8001056:	b083      	sub	sp, #12
 8001058:	af00      	add	r7, sp, #0
 800105a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800105c:	4b14      	ldr	r3, [pc, #80]	@ (80010b0 <HAL_InitTick+0x5c>)
 800105e:	681c      	ldr	r4, [r3, #0]
 8001060:	4b14      	ldr	r3, [pc, #80]	@ (80010b4 <HAL_InitTick+0x60>)
 8001062:	781b      	ldrb	r3, [r3, #0]
 8001064:	0019      	movs	r1, r3
 8001066:	23fa      	movs	r3, #250	@ 0xfa
 8001068:	0098      	lsls	r0, r3, #2
 800106a:	f7ff f84d 	bl	8000108 <__udivsi3>
 800106e:	0003      	movs	r3, r0
 8001070:	0019      	movs	r1, r3
 8001072:	0020      	movs	r0, r4
 8001074:	f7ff f848 	bl	8000108 <__udivsi3>
 8001078:	0003      	movs	r3, r0
 800107a:	0018      	movs	r0, r3
 800107c:	f000 f92f 	bl	80012de <HAL_SYSTICK_Config>
 8001080:	1e03      	subs	r3, r0, #0
 8001082:	d001      	beq.n	8001088 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8001084:	2301      	movs	r3, #1
 8001086:	e00f      	b.n	80010a8 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001088:	687b      	ldr	r3, [r7, #4]
 800108a:	2b03      	cmp	r3, #3
 800108c:	d80b      	bhi.n	80010a6 <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800108e:	6879      	ldr	r1, [r7, #4]
 8001090:	2301      	movs	r3, #1
 8001092:	425b      	negs	r3, r3
 8001094:	2200      	movs	r2, #0
 8001096:	0018      	movs	r0, r3
 8001098:	f000 f8fc 	bl	8001294 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800109c:	4b06      	ldr	r3, [pc, #24]	@ (80010b8 <HAL_InitTick+0x64>)
 800109e:	687a      	ldr	r2, [r7, #4]
 80010a0:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80010a2:	2300      	movs	r3, #0
 80010a4:	e000      	b.n	80010a8 <HAL_InitTick+0x54>
    return HAL_ERROR;
 80010a6:	2301      	movs	r3, #1
}
 80010a8:	0018      	movs	r0, r3
 80010aa:	46bd      	mov	sp, r7
 80010ac:	b003      	add	sp, #12
 80010ae:	bd90      	pop	{r4, r7, pc}
 80010b0:	20000008 	.word	0x20000008
 80010b4:	20000010 	.word	0x20000010
 80010b8:	2000000c 	.word	0x2000000c

080010bc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80010bc:	b580      	push	{r7, lr}
 80010be:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80010c0:	4b05      	ldr	r3, [pc, #20]	@ (80010d8 <HAL_IncTick+0x1c>)
 80010c2:	781b      	ldrb	r3, [r3, #0]
 80010c4:	001a      	movs	r2, r3
 80010c6:	4b05      	ldr	r3, [pc, #20]	@ (80010dc <HAL_IncTick+0x20>)
 80010c8:	681b      	ldr	r3, [r3, #0]
 80010ca:	18d2      	adds	r2, r2, r3
 80010cc:	4b03      	ldr	r3, [pc, #12]	@ (80010dc <HAL_IncTick+0x20>)
 80010ce:	601a      	str	r2, [r3, #0]
}
 80010d0:	46c0      	nop			@ (mov r8, r8)
 80010d2:	46bd      	mov	sp, r7
 80010d4:	bd80      	pop	{r7, pc}
 80010d6:	46c0      	nop			@ (mov r8, r8)
 80010d8:	20000010 	.word	0x20000010
 80010dc:	20000524 	.word	0x20000524

080010e0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80010e0:	b580      	push	{r7, lr}
 80010e2:	af00      	add	r7, sp, #0
  return uwTick;
 80010e4:	4b02      	ldr	r3, [pc, #8]	@ (80010f0 <HAL_GetTick+0x10>)
 80010e6:	681b      	ldr	r3, [r3, #0]
}
 80010e8:	0018      	movs	r0, r3
 80010ea:	46bd      	mov	sp, r7
 80010ec:	bd80      	pop	{r7, pc}
 80010ee:	46c0      	nop			@ (mov r8, r8)
 80010f0:	20000524 	.word	0x20000524

080010f4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80010f4:	b580      	push	{r7, lr}
 80010f6:	b084      	sub	sp, #16
 80010f8:	af00      	add	r7, sp, #0
 80010fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80010fc:	f7ff fff0 	bl	80010e0 <HAL_GetTick>
 8001100:	0003      	movs	r3, r0
 8001102:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001108:	68fb      	ldr	r3, [r7, #12]
 800110a:	3301      	adds	r3, #1
 800110c:	d005      	beq.n	800111a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800110e:	4b0a      	ldr	r3, [pc, #40]	@ (8001138 <HAL_Delay+0x44>)
 8001110:	781b      	ldrb	r3, [r3, #0]
 8001112:	001a      	movs	r2, r3
 8001114:	68fb      	ldr	r3, [r7, #12]
 8001116:	189b      	adds	r3, r3, r2
 8001118:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800111a:	46c0      	nop			@ (mov r8, r8)
 800111c:	f7ff ffe0 	bl	80010e0 <HAL_GetTick>
 8001120:	0002      	movs	r2, r0
 8001122:	68bb      	ldr	r3, [r7, #8]
 8001124:	1ad3      	subs	r3, r2, r3
 8001126:	68fa      	ldr	r2, [r7, #12]
 8001128:	429a      	cmp	r2, r3
 800112a:	d8f7      	bhi.n	800111c <HAL_Delay+0x28>
  {
  }
}
 800112c:	46c0      	nop			@ (mov r8, r8)
 800112e:	46c0      	nop			@ (mov r8, r8)
 8001130:	46bd      	mov	sp, r7
 8001132:	b004      	add	sp, #16
 8001134:	bd80      	pop	{r7, pc}
 8001136:	46c0      	nop			@ (mov r8, r8)
 8001138:	20000010 	.word	0x20000010

0800113c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800113c:	b580      	push	{r7, lr}
 800113e:	b082      	sub	sp, #8
 8001140:	af00      	add	r7, sp, #0
 8001142:	0002      	movs	r2, r0
 8001144:	1dfb      	adds	r3, r7, #7
 8001146:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8001148:	1dfb      	adds	r3, r7, #7
 800114a:	781b      	ldrb	r3, [r3, #0]
 800114c:	2b7f      	cmp	r3, #127	@ 0x7f
 800114e:	d809      	bhi.n	8001164 <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001150:	1dfb      	adds	r3, r7, #7
 8001152:	781b      	ldrb	r3, [r3, #0]
 8001154:	001a      	movs	r2, r3
 8001156:	231f      	movs	r3, #31
 8001158:	401a      	ands	r2, r3
 800115a:	4b04      	ldr	r3, [pc, #16]	@ (800116c <__NVIC_EnableIRQ+0x30>)
 800115c:	2101      	movs	r1, #1
 800115e:	4091      	lsls	r1, r2
 8001160:	000a      	movs	r2, r1
 8001162:	601a      	str	r2, [r3, #0]
  }
}
 8001164:	46c0      	nop			@ (mov r8, r8)
 8001166:	46bd      	mov	sp, r7
 8001168:	b002      	add	sp, #8
 800116a:	bd80      	pop	{r7, pc}
 800116c:	e000e100 	.word	0xe000e100

08001170 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001170:	b590      	push	{r4, r7, lr}
 8001172:	b083      	sub	sp, #12
 8001174:	af00      	add	r7, sp, #0
 8001176:	0002      	movs	r2, r0
 8001178:	6039      	str	r1, [r7, #0]
 800117a:	1dfb      	adds	r3, r7, #7
 800117c:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 800117e:	1dfb      	adds	r3, r7, #7
 8001180:	781b      	ldrb	r3, [r3, #0]
 8001182:	2b7f      	cmp	r3, #127	@ 0x7f
 8001184:	d828      	bhi.n	80011d8 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001186:	4a2f      	ldr	r2, [pc, #188]	@ (8001244 <__NVIC_SetPriority+0xd4>)
 8001188:	1dfb      	adds	r3, r7, #7
 800118a:	781b      	ldrb	r3, [r3, #0]
 800118c:	b25b      	sxtb	r3, r3
 800118e:	089b      	lsrs	r3, r3, #2
 8001190:	33c0      	adds	r3, #192	@ 0xc0
 8001192:	009b      	lsls	r3, r3, #2
 8001194:	589b      	ldr	r3, [r3, r2]
 8001196:	1dfa      	adds	r2, r7, #7
 8001198:	7812      	ldrb	r2, [r2, #0]
 800119a:	0011      	movs	r1, r2
 800119c:	2203      	movs	r2, #3
 800119e:	400a      	ands	r2, r1
 80011a0:	00d2      	lsls	r2, r2, #3
 80011a2:	21ff      	movs	r1, #255	@ 0xff
 80011a4:	4091      	lsls	r1, r2
 80011a6:	000a      	movs	r2, r1
 80011a8:	43d2      	mvns	r2, r2
 80011aa:	401a      	ands	r2, r3
 80011ac:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80011ae:	683b      	ldr	r3, [r7, #0]
 80011b0:	019b      	lsls	r3, r3, #6
 80011b2:	22ff      	movs	r2, #255	@ 0xff
 80011b4:	401a      	ands	r2, r3
 80011b6:	1dfb      	adds	r3, r7, #7
 80011b8:	781b      	ldrb	r3, [r3, #0]
 80011ba:	0018      	movs	r0, r3
 80011bc:	2303      	movs	r3, #3
 80011be:	4003      	ands	r3, r0
 80011c0:	00db      	lsls	r3, r3, #3
 80011c2:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80011c4:	481f      	ldr	r0, [pc, #124]	@ (8001244 <__NVIC_SetPriority+0xd4>)
 80011c6:	1dfb      	adds	r3, r7, #7
 80011c8:	781b      	ldrb	r3, [r3, #0]
 80011ca:	b25b      	sxtb	r3, r3
 80011cc:	089b      	lsrs	r3, r3, #2
 80011ce:	430a      	orrs	r2, r1
 80011d0:	33c0      	adds	r3, #192	@ 0xc0
 80011d2:	009b      	lsls	r3, r3, #2
 80011d4:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 80011d6:	e031      	b.n	800123c <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80011d8:	4a1b      	ldr	r2, [pc, #108]	@ (8001248 <__NVIC_SetPriority+0xd8>)
 80011da:	1dfb      	adds	r3, r7, #7
 80011dc:	781b      	ldrb	r3, [r3, #0]
 80011de:	0019      	movs	r1, r3
 80011e0:	230f      	movs	r3, #15
 80011e2:	400b      	ands	r3, r1
 80011e4:	3b08      	subs	r3, #8
 80011e6:	089b      	lsrs	r3, r3, #2
 80011e8:	3306      	adds	r3, #6
 80011ea:	009b      	lsls	r3, r3, #2
 80011ec:	18d3      	adds	r3, r2, r3
 80011ee:	3304      	adds	r3, #4
 80011f0:	681b      	ldr	r3, [r3, #0]
 80011f2:	1dfa      	adds	r2, r7, #7
 80011f4:	7812      	ldrb	r2, [r2, #0]
 80011f6:	0011      	movs	r1, r2
 80011f8:	2203      	movs	r2, #3
 80011fa:	400a      	ands	r2, r1
 80011fc:	00d2      	lsls	r2, r2, #3
 80011fe:	21ff      	movs	r1, #255	@ 0xff
 8001200:	4091      	lsls	r1, r2
 8001202:	000a      	movs	r2, r1
 8001204:	43d2      	mvns	r2, r2
 8001206:	401a      	ands	r2, r3
 8001208:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800120a:	683b      	ldr	r3, [r7, #0]
 800120c:	019b      	lsls	r3, r3, #6
 800120e:	22ff      	movs	r2, #255	@ 0xff
 8001210:	401a      	ands	r2, r3
 8001212:	1dfb      	adds	r3, r7, #7
 8001214:	781b      	ldrb	r3, [r3, #0]
 8001216:	0018      	movs	r0, r3
 8001218:	2303      	movs	r3, #3
 800121a:	4003      	ands	r3, r0
 800121c:	00db      	lsls	r3, r3, #3
 800121e:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001220:	4809      	ldr	r0, [pc, #36]	@ (8001248 <__NVIC_SetPriority+0xd8>)
 8001222:	1dfb      	adds	r3, r7, #7
 8001224:	781b      	ldrb	r3, [r3, #0]
 8001226:	001c      	movs	r4, r3
 8001228:	230f      	movs	r3, #15
 800122a:	4023      	ands	r3, r4
 800122c:	3b08      	subs	r3, #8
 800122e:	089b      	lsrs	r3, r3, #2
 8001230:	430a      	orrs	r2, r1
 8001232:	3306      	adds	r3, #6
 8001234:	009b      	lsls	r3, r3, #2
 8001236:	18c3      	adds	r3, r0, r3
 8001238:	3304      	adds	r3, #4
 800123a:	601a      	str	r2, [r3, #0]
}
 800123c:	46c0      	nop			@ (mov r8, r8)
 800123e:	46bd      	mov	sp, r7
 8001240:	b003      	add	sp, #12
 8001242:	bd90      	pop	{r4, r7, pc}
 8001244:	e000e100 	.word	0xe000e100
 8001248:	e000ed00 	.word	0xe000ed00

0800124c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800124c:	b580      	push	{r7, lr}
 800124e:	b082      	sub	sp, #8
 8001250:	af00      	add	r7, sp, #0
 8001252:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	1e5a      	subs	r2, r3, #1
 8001258:	2380      	movs	r3, #128	@ 0x80
 800125a:	045b      	lsls	r3, r3, #17
 800125c:	429a      	cmp	r2, r3
 800125e:	d301      	bcc.n	8001264 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001260:	2301      	movs	r3, #1
 8001262:	e010      	b.n	8001286 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001264:	4b0a      	ldr	r3, [pc, #40]	@ (8001290 <SysTick_Config+0x44>)
 8001266:	687a      	ldr	r2, [r7, #4]
 8001268:	3a01      	subs	r2, #1
 800126a:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800126c:	2301      	movs	r3, #1
 800126e:	425b      	negs	r3, r3
 8001270:	2103      	movs	r1, #3
 8001272:	0018      	movs	r0, r3
 8001274:	f7ff ff7c 	bl	8001170 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001278:	4b05      	ldr	r3, [pc, #20]	@ (8001290 <SysTick_Config+0x44>)
 800127a:	2200      	movs	r2, #0
 800127c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800127e:	4b04      	ldr	r3, [pc, #16]	@ (8001290 <SysTick_Config+0x44>)
 8001280:	2207      	movs	r2, #7
 8001282:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001284:	2300      	movs	r3, #0
}
 8001286:	0018      	movs	r0, r3
 8001288:	46bd      	mov	sp, r7
 800128a:	b002      	add	sp, #8
 800128c:	bd80      	pop	{r7, pc}
 800128e:	46c0      	nop			@ (mov r8, r8)
 8001290:	e000e010 	.word	0xe000e010

08001294 <HAL_NVIC_SetPriority>:
  *         with stm32l0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0+ based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001294:	b580      	push	{r7, lr}
 8001296:	b084      	sub	sp, #16
 8001298:	af00      	add	r7, sp, #0
 800129a:	60b9      	str	r1, [r7, #8]
 800129c:	607a      	str	r2, [r7, #4]
 800129e:	210f      	movs	r1, #15
 80012a0:	187b      	adds	r3, r7, r1
 80012a2:	1c02      	adds	r2, r0, #0
 80012a4:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 80012a6:	68ba      	ldr	r2, [r7, #8]
 80012a8:	187b      	adds	r3, r7, r1
 80012aa:	781b      	ldrb	r3, [r3, #0]
 80012ac:	b25b      	sxtb	r3, r3
 80012ae:	0011      	movs	r1, r2
 80012b0:	0018      	movs	r0, r3
 80012b2:	f7ff ff5d 	bl	8001170 <__NVIC_SetPriority>
}
 80012b6:	46c0      	nop			@ (mov r8, r8)
 80012b8:	46bd      	mov	sp, r7
 80012ba:	b004      	add	sp, #16
 80012bc:	bd80      	pop	{r7, pc}

080012be <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of  IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to stm32l0xx.h file)  
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80012be:	b580      	push	{r7, lr}
 80012c0:	b082      	sub	sp, #8
 80012c2:	af00      	add	r7, sp, #0
 80012c4:	0002      	movs	r2, r0
 80012c6:	1dfb      	adds	r3, r7, #7
 80012c8:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80012ca:	1dfb      	adds	r3, r7, #7
 80012cc:	781b      	ldrb	r3, [r3, #0]
 80012ce:	b25b      	sxtb	r3, r3
 80012d0:	0018      	movs	r0, r3
 80012d2:	f7ff ff33 	bl	800113c <__NVIC_EnableIRQ>
}
 80012d6:	46c0      	nop			@ (mov r8, r8)
 80012d8:	46bd      	mov	sp, r7
 80012da:	b002      	add	sp, #8
 80012dc:	bd80      	pop	{r7, pc}

080012de <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80012de:	b580      	push	{r7, lr}
 80012e0:	b082      	sub	sp, #8
 80012e2:	af00      	add	r7, sp, #0
 80012e4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	0018      	movs	r0, r3
 80012ea:	f7ff ffaf 	bl	800124c <SysTick_Config>
 80012ee:	0003      	movs	r3, r0
}
 80012f0:	0018      	movs	r0, r3
 80012f2:	46bd      	mov	sp, r7
 80012f4:	b002      	add	sp, #8
 80012f6:	bd80      	pop	{r7, pc}

080012f8 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80012f8:	b580      	push	{r7, lr}
 80012fa:	b084      	sub	sp, #16
 80012fc:	af00      	add	r7, sp, #0
 80012fe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001300:	230f      	movs	r3, #15
 8001302:	18fb      	adds	r3, r7, r3
 8001304:	2200      	movs	r2, #0
 8001306:	701a      	strb	r2, [r3, #0]

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	2225      	movs	r2, #37	@ 0x25
 800130c:	5c9b      	ldrb	r3, [r3, r2]
 800130e:	b2db      	uxtb	r3, r3
 8001310:	2b02      	cmp	r3, #2
 8001312:	d008      	beq.n	8001326 <HAL_DMA_Abort+0x2e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	2204      	movs	r2, #4
 8001318:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	2224      	movs	r2, #36	@ 0x24
 800131e:	2100      	movs	r1, #0
 8001320:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 8001322:	2301      	movs	r3, #1
 8001324:	e024      	b.n	8001370 <HAL_DMA_Abort+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	681b      	ldr	r3, [r3, #0]
 800132a:	681a      	ldr	r2, [r3, #0]
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	681b      	ldr	r3, [r3, #0]
 8001330:	210e      	movs	r1, #14
 8001332:	438a      	bics	r2, r1
 8001334:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	681b      	ldr	r3, [r3, #0]
 800133a:	681a      	ldr	r2, [r3, #0]
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	681b      	ldr	r3, [r3, #0]
 8001340:	2101      	movs	r1, #1
 8001342:	438a      	bics	r2, r1
 8001344:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800134a:	221c      	movs	r2, #28
 800134c:	401a      	ands	r2, r3
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001352:	2101      	movs	r1, #1
 8001354:	4091      	lsls	r1, r2
 8001356:	000a      	movs	r2, r1
 8001358:	605a      	str	r2, [r3, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	2225      	movs	r2, #37	@ 0x25
 800135e:	2101      	movs	r1, #1
 8001360:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	2224      	movs	r2, #36	@ 0x24
 8001366:	2100      	movs	r1, #0
 8001368:	5499      	strb	r1, [r3, r2]

    return status;
 800136a:	230f      	movs	r3, #15
 800136c:	18fb      	adds	r3, r7, r3
 800136e:	781b      	ldrb	r3, [r3, #0]
  }
}
 8001370:	0018      	movs	r0, r3
 8001372:	46bd      	mov	sp, r7
 8001374:	b004      	add	sp, #16
 8001376:	bd80      	pop	{r7, pc}

08001378 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001378:	b580      	push	{r7, lr}
 800137a:	b084      	sub	sp, #16
 800137c:	af00      	add	r7, sp, #0
 800137e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001380:	210f      	movs	r1, #15
 8001382:	187b      	adds	r3, r7, r1
 8001384:	2200      	movs	r2, #0
 8001386:	701a      	strb	r2, [r3, #0]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	2225      	movs	r2, #37	@ 0x25
 800138c:	5c9b      	ldrb	r3, [r3, r2]
 800138e:	b2db      	uxtb	r3, r3
 8001390:	2b02      	cmp	r3, #2
 8001392:	d006      	beq.n	80013a2 <HAL_DMA_Abort_IT+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	2204      	movs	r2, #4
 8001398:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 800139a:	187b      	adds	r3, r7, r1
 800139c:	2201      	movs	r2, #1
 800139e:	701a      	strb	r2, [r3, #0]
 80013a0:	e02a      	b.n	80013f8 <HAL_DMA_Abort_IT+0x80>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	681b      	ldr	r3, [r3, #0]
 80013a6:	681a      	ldr	r2, [r3, #0]
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	681b      	ldr	r3, [r3, #0]
 80013ac:	210e      	movs	r1, #14
 80013ae:	438a      	bics	r2, r1
 80013b0:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	681b      	ldr	r3, [r3, #0]
 80013b6:	681a      	ldr	r2, [r3, #0]
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	681b      	ldr	r3, [r3, #0]
 80013bc:	2101      	movs	r1, #1
 80013be:	438a      	bics	r2, r1
 80013c0:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80013c6:	221c      	movs	r2, #28
 80013c8:	401a      	ands	r2, r3
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80013ce:	2101      	movs	r1, #1
 80013d0:	4091      	lsls	r1, r2
 80013d2:	000a      	movs	r2, r1
 80013d4:	605a      	str	r2, [r3, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	2225      	movs	r2, #37	@ 0x25
 80013da:	2101      	movs	r1, #1
 80013dc:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	2224      	movs	r2, #36	@ 0x24
 80013e2:	2100      	movs	r1, #0
 80013e4:	5499      	strb	r1, [r3, r2]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80013ea:	2b00      	cmp	r3, #0
 80013ec:	d004      	beq.n	80013f8 <HAL_DMA_Abort_IT+0x80>
    {
      hdma->XferAbortCallback(hdma);
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80013f2:	687a      	ldr	r2, [r7, #4]
 80013f4:	0010      	movs	r0, r2
 80013f6:	4798      	blx	r3
    }
  }
  return status;
 80013f8:	230f      	movs	r3, #15
 80013fa:	18fb      	adds	r3, r7, r3
 80013fc:	781b      	ldrb	r3, [r3, #0]
}
 80013fe:	0018      	movs	r0, r3
 8001400:	46bd      	mov	sp, r7
 8001402:	b004      	add	sp, #16
 8001404:	bd80      	pop	{r7, pc}
	...

08001408 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *                    the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001408:	b580      	push	{r7, lr}
 800140a:	b086      	sub	sp, #24
 800140c:	af00      	add	r7, sp, #0
 800140e:	6078      	str	r0, [r7, #4]
 8001410:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8001412:	2300      	movs	r3, #0
 8001414:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001416:	2300      	movs	r3, #0
 8001418:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00U;
 800141a:	2300      	movs	r3, #0
 800141c:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, (GPIO_Init->Pin)));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 800141e:	e14f      	b.n	80016c0 <HAL_GPIO_Init+0x2b8>
  {
    /* Get the IO position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8001420:	683b      	ldr	r3, [r7, #0]
 8001422:	681b      	ldr	r3, [r3, #0]
 8001424:	2101      	movs	r1, #1
 8001426:	697a      	ldr	r2, [r7, #20]
 8001428:	4091      	lsls	r1, r2
 800142a:	000a      	movs	r2, r1
 800142c:	4013      	ands	r3, r2
 800142e:	60fb      	str	r3, [r7, #12]

    if (iocurrent)
 8001430:	68fb      	ldr	r3, [r7, #12]
 8001432:	2b00      	cmp	r3, #0
 8001434:	d100      	bne.n	8001438 <HAL_GPIO_Init+0x30>
 8001436:	e140      	b.n	80016ba <HAL_GPIO_Init+0x2b2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001438:	683b      	ldr	r3, [r7, #0]
 800143a:	685b      	ldr	r3, [r3, #4]
 800143c:	2203      	movs	r2, #3
 800143e:	4013      	ands	r3, r2
 8001440:	2b01      	cmp	r3, #1
 8001442:	d005      	beq.n	8001450 <HAL_GPIO_Init+0x48>
          ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001444:	683b      	ldr	r3, [r7, #0]
 8001446:	685b      	ldr	r3, [r3, #4]
 8001448:	2203      	movs	r2, #3
 800144a:	4013      	ands	r3, r2
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 800144c:	2b02      	cmp	r3, #2
 800144e:	d130      	bne.n	80014b2 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	689b      	ldr	r3, [r3, #8]
 8001454:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 8001456:	697b      	ldr	r3, [r7, #20]
 8001458:	005b      	lsls	r3, r3, #1
 800145a:	2203      	movs	r2, #3
 800145c:	409a      	lsls	r2, r3
 800145e:	0013      	movs	r3, r2
 8001460:	43da      	mvns	r2, r3
 8001462:	693b      	ldr	r3, [r7, #16]
 8001464:	4013      	ands	r3, r2
 8001466:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001468:	683b      	ldr	r3, [r7, #0]
 800146a:	68da      	ldr	r2, [r3, #12]
 800146c:	697b      	ldr	r3, [r7, #20]
 800146e:	005b      	lsls	r3, r3, #1
 8001470:	409a      	lsls	r2, r3
 8001472:	0013      	movs	r3, r2
 8001474:	693a      	ldr	r2, [r7, #16]
 8001476:	4313      	orrs	r3, r2
 8001478:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	693a      	ldr	r2, [r7, #16]
 800147e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	685b      	ldr	r3, [r3, #4]
 8001484:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001486:	2201      	movs	r2, #1
 8001488:	697b      	ldr	r3, [r7, #20]
 800148a:	409a      	lsls	r2, r3
 800148c:	0013      	movs	r3, r2
 800148e:	43da      	mvns	r2, r3
 8001490:	693b      	ldr	r3, [r7, #16]
 8001492:	4013      	ands	r3, r2
 8001494:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001496:	683b      	ldr	r3, [r7, #0]
 8001498:	685b      	ldr	r3, [r3, #4]
 800149a:	091b      	lsrs	r3, r3, #4
 800149c:	2201      	movs	r2, #1
 800149e:	401a      	ands	r2, r3
 80014a0:	697b      	ldr	r3, [r7, #20]
 80014a2:	409a      	lsls	r2, r3
 80014a4:	0013      	movs	r3, r2
 80014a6:	693a      	ldr	r2, [r7, #16]
 80014a8:	4313      	orrs	r3, r2
 80014aa:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	693a      	ldr	r2, [r7, #16]
 80014b0:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80014b2:	683b      	ldr	r3, [r7, #0]
 80014b4:	685b      	ldr	r3, [r3, #4]
 80014b6:	2203      	movs	r2, #3
 80014b8:	4013      	ands	r3, r2
 80014ba:	2b03      	cmp	r3, #3
 80014bc:	d017      	beq.n	80014ee <HAL_GPIO_Init+0xe6>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	68db      	ldr	r3, [r3, #12]
 80014c2:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80014c4:	697b      	ldr	r3, [r7, #20]
 80014c6:	005b      	lsls	r3, r3, #1
 80014c8:	2203      	movs	r2, #3
 80014ca:	409a      	lsls	r2, r3
 80014cc:	0013      	movs	r3, r2
 80014ce:	43da      	mvns	r2, r3
 80014d0:	693b      	ldr	r3, [r7, #16]
 80014d2:	4013      	ands	r3, r2
 80014d4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80014d6:	683b      	ldr	r3, [r7, #0]
 80014d8:	689a      	ldr	r2, [r3, #8]
 80014da:	697b      	ldr	r3, [r7, #20]
 80014dc:	005b      	lsls	r3, r3, #1
 80014de:	409a      	lsls	r2, r3
 80014e0:	0013      	movs	r3, r2
 80014e2:	693a      	ldr	r2, [r7, #16]
 80014e4:	4313      	orrs	r3, r2
 80014e6:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	693a      	ldr	r2, [r7, #16]
 80014ec:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80014ee:	683b      	ldr	r3, [r7, #0]
 80014f0:	685b      	ldr	r3, [r3, #4]
 80014f2:	2203      	movs	r2, #3
 80014f4:	4013      	ands	r3, r2
 80014f6:	2b02      	cmp	r3, #2
 80014f8:	d123      	bne.n	8001542 <HAL_GPIO_Init+0x13a>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80014fa:	697b      	ldr	r3, [r7, #20]
 80014fc:	08da      	lsrs	r2, r3, #3
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	3208      	adds	r2, #8
 8001502:	0092      	lsls	r2, r2, #2
 8001504:	58d3      	ldr	r3, [r2, r3]
 8001506:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFUL << ((uint32_t)(position & 0x07UL) * 4U));
 8001508:	697b      	ldr	r3, [r7, #20]
 800150a:	2207      	movs	r2, #7
 800150c:	4013      	ands	r3, r2
 800150e:	009b      	lsls	r3, r3, #2
 8001510:	220f      	movs	r2, #15
 8001512:	409a      	lsls	r2, r3
 8001514:	0013      	movs	r3, r2
 8001516:	43da      	mvns	r2, r3
 8001518:	693b      	ldr	r3, [r7, #16]
 800151a:	4013      	ands	r3, r2
 800151c:	613b      	str	r3, [r7, #16]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07U) * 4U));
 800151e:	683b      	ldr	r3, [r7, #0]
 8001520:	691a      	ldr	r2, [r3, #16]
 8001522:	697b      	ldr	r3, [r7, #20]
 8001524:	2107      	movs	r1, #7
 8001526:	400b      	ands	r3, r1
 8001528:	009b      	lsls	r3, r3, #2
 800152a:	409a      	lsls	r2, r3
 800152c:	0013      	movs	r3, r2
 800152e:	693a      	ldr	r2, [r7, #16]
 8001530:	4313      	orrs	r3, r2
 8001532:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8001534:	697b      	ldr	r3, [r7, #20]
 8001536:	08da      	lsrs	r2, r3, #3
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	3208      	adds	r2, #8
 800153c:	0092      	lsls	r2, r2, #2
 800153e:	6939      	ldr	r1, [r7, #16]
 8001540:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	681b      	ldr	r3, [r3, #0]
 8001546:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8001548:	697b      	ldr	r3, [r7, #20]
 800154a:	005b      	lsls	r3, r3, #1
 800154c:	2203      	movs	r2, #3
 800154e:	409a      	lsls	r2, r3
 8001550:	0013      	movs	r3, r2
 8001552:	43da      	mvns	r2, r3
 8001554:	693b      	ldr	r3, [r7, #16]
 8001556:	4013      	ands	r3, r2
 8001558:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800155a:	683b      	ldr	r3, [r7, #0]
 800155c:	685b      	ldr	r3, [r3, #4]
 800155e:	2203      	movs	r2, #3
 8001560:	401a      	ands	r2, r3
 8001562:	697b      	ldr	r3, [r7, #20]
 8001564:	005b      	lsls	r3, r3, #1
 8001566:	409a      	lsls	r2, r3
 8001568:	0013      	movs	r3, r2
 800156a:	693a      	ldr	r2, [r7, #16]
 800156c:	4313      	orrs	r3, r2
 800156e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	693a      	ldr	r2, [r7, #16]
 8001574:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001576:	683b      	ldr	r3, [r7, #0]
 8001578:	685a      	ldr	r2, [r3, #4]
 800157a:	23c0      	movs	r3, #192	@ 0xc0
 800157c:	029b      	lsls	r3, r3, #10
 800157e:	4013      	ands	r3, r2
 8001580:	d100      	bne.n	8001584 <HAL_GPIO_Init+0x17c>
 8001582:	e09a      	b.n	80016ba <HAL_GPIO_Init+0x2b2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001584:	4b54      	ldr	r3, [pc, #336]	@ (80016d8 <HAL_GPIO_Init+0x2d0>)
 8001586:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001588:	4b53      	ldr	r3, [pc, #332]	@ (80016d8 <HAL_GPIO_Init+0x2d0>)
 800158a:	2101      	movs	r1, #1
 800158c:	430a      	orrs	r2, r1
 800158e:	635a      	str	r2, [r3, #52]	@ 0x34

        temp = SYSCFG->EXTICR[position >> 2U];
 8001590:	4a52      	ldr	r2, [pc, #328]	@ (80016dc <HAL_GPIO_Init+0x2d4>)
 8001592:	697b      	ldr	r3, [r7, #20]
 8001594:	089b      	lsrs	r3, r3, #2
 8001596:	3302      	adds	r3, #2
 8001598:	009b      	lsls	r3, r3, #2
 800159a:	589b      	ldr	r3, [r3, r2]
 800159c:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (0x0FUL) << (4U * (position & 0x03U)));
 800159e:	697b      	ldr	r3, [r7, #20]
 80015a0:	2203      	movs	r2, #3
 80015a2:	4013      	ands	r3, r2
 80015a4:	009b      	lsls	r3, r3, #2
 80015a6:	220f      	movs	r2, #15
 80015a8:	409a      	lsls	r2, r3
 80015aa:	0013      	movs	r3, r2
 80015ac:	43da      	mvns	r2, r3
 80015ae:	693b      	ldr	r3, [r7, #16]
 80015b0:	4013      	ands	r3, r2
 80015b2:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 80015b4:	687a      	ldr	r2, [r7, #4]
 80015b6:	23a0      	movs	r3, #160	@ 0xa0
 80015b8:	05db      	lsls	r3, r3, #23
 80015ba:	429a      	cmp	r2, r3
 80015bc:	d019      	beq.n	80015f2 <HAL_GPIO_Init+0x1ea>
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	4a47      	ldr	r2, [pc, #284]	@ (80016e0 <HAL_GPIO_Init+0x2d8>)
 80015c2:	4293      	cmp	r3, r2
 80015c4:	d013      	beq.n	80015ee <HAL_GPIO_Init+0x1e6>
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	4a46      	ldr	r2, [pc, #280]	@ (80016e4 <HAL_GPIO_Init+0x2dc>)
 80015ca:	4293      	cmp	r3, r2
 80015cc:	d00d      	beq.n	80015ea <HAL_GPIO_Init+0x1e2>
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	4a45      	ldr	r2, [pc, #276]	@ (80016e8 <HAL_GPIO_Init+0x2e0>)
 80015d2:	4293      	cmp	r3, r2
 80015d4:	d007      	beq.n	80015e6 <HAL_GPIO_Init+0x1de>
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	4a44      	ldr	r2, [pc, #272]	@ (80016ec <HAL_GPIO_Init+0x2e4>)
 80015da:	4293      	cmp	r3, r2
 80015dc:	d101      	bne.n	80015e2 <HAL_GPIO_Init+0x1da>
 80015de:	2305      	movs	r3, #5
 80015e0:	e008      	b.n	80015f4 <HAL_GPIO_Init+0x1ec>
 80015e2:	2306      	movs	r3, #6
 80015e4:	e006      	b.n	80015f4 <HAL_GPIO_Init+0x1ec>
 80015e6:	2303      	movs	r3, #3
 80015e8:	e004      	b.n	80015f4 <HAL_GPIO_Init+0x1ec>
 80015ea:	2302      	movs	r3, #2
 80015ec:	e002      	b.n	80015f4 <HAL_GPIO_Init+0x1ec>
 80015ee:	2301      	movs	r3, #1
 80015f0:	e000      	b.n	80015f4 <HAL_GPIO_Init+0x1ec>
 80015f2:	2300      	movs	r3, #0
 80015f4:	697a      	ldr	r2, [r7, #20]
 80015f6:	2103      	movs	r1, #3
 80015f8:	400a      	ands	r2, r1
 80015fa:	0092      	lsls	r2, r2, #2
 80015fc:	4093      	lsls	r3, r2
 80015fe:	693a      	ldr	r2, [r7, #16]
 8001600:	4313      	orrs	r3, r2
 8001602:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001604:	4935      	ldr	r1, [pc, #212]	@ (80016dc <HAL_GPIO_Init+0x2d4>)
 8001606:	697b      	ldr	r3, [r7, #20]
 8001608:	089b      	lsrs	r3, r3, #2
 800160a:	3302      	adds	r3, #2
 800160c:	009b      	lsls	r3, r3, #2
 800160e:	693a      	ldr	r2, [r7, #16]
 8001610:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001612:	4b37      	ldr	r3, [pc, #220]	@ (80016f0 <HAL_GPIO_Init+0x2e8>)
 8001614:	689b      	ldr	r3, [r3, #8]
 8001616:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8001618:	68fb      	ldr	r3, [r7, #12]
 800161a:	43da      	mvns	r2, r3
 800161c:	693b      	ldr	r3, [r7, #16]
 800161e:	4013      	ands	r3, r2
 8001620:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001622:	683b      	ldr	r3, [r7, #0]
 8001624:	685a      	ldr	r2, [r3, #4]
 8001626:	2380      	movs	r3, #128	@ 0x80
 8001628:	035b      	lsls	r3, r3, #13
 800162a:	4013      	ands	r3, r2
 800162c:	d003      	beq.n	8001636 <HAL_GPIO_Init+0x22e>
        {
          temp |= iocurrent;
 800162e:	693a      	ldr	r2, [r7, #16]
 8001630:	68fb      	ldr	r3, [r7, #12]
 8001632:	4313      	orrs	r3, r2
 8001634:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8001636:	4b2e      	ldr	r3, [pc, #184]	@ (80016f0 <HAL_GPIO_Init+0x2e8>)
 8001638:	693a      	ldr	r2, [r7, #16]
 800163a:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 800163c:	4b2c      	ldr	r3, [pc, #176]	@ (80016f0 <HAL_GPIO_Init+0x2e8>)
 800163e:	68db      	ldr	r3, [r3, #12]
 8001640:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8001642:	68fb      	ldr	r3, [r7, #12]
 8001644:	43da      	mvns	r2, r3
 8001646:	693b      	ldr	r3, [r7, #16]
 8001648:	4013      	ands	r3, r2
 800164a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800164c:	683b      	ldr	r3, [r7, #0]
 800164e:	685a      	ldr	r2, [r3, #4]
 8001650:	2380      	movs	r3, #128	@ 0x80
 8001652:	039b      	lsls	r3, r3, #14
 8001654:	4013      	ands	r3, r2
 8001656:	d003      	beq.n	8001660 <HAL_GPIO_Init+0x258>
        {
          temp |= iocurrent;
 8001658:	693a      	ldr	r2, [r7, #16]
 800165a:	68fb      	ldr	r3, [r7, #12]
 800165c:	4313      	orrs	r3, r2
 800165e:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8001660:	4b23      	ldr	r3, [pc, #140]	@ (80016f0 <HAL_GPIO_Init+0x2e8>)
 8001662:	693a      	ldr	r2, [r7, #16]
 8001664:	60da      	str	r2, [r3, #12]

        temp = EXTI->EMR;
 8001666:	4b22      	ldr	r3, [pc, #136]	@ (80016f0 <HAL_GPIO_Init+0x2e8>)
 8001668:	685b      	ldr	r3, [r3, #4]
 800166a:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 800166c:	68fb      	ldr	r3, [r7, #12]
 800166e:	43da      	mvns	r2, r3
 8001670:	693b      	ldr	r3, [r7, #16]
 8001672:	4013      	ands	r3, r2
 8001674:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001676:	683b      	ldr	r3, [r7, #0]
 8001678:	685a      	ldr	r2, [r3, #4]
 800167a:	2380      	movs	r3, #128	@ 0x80
 800167c:	029b      	lsls	r3, r3, #10
 800167e:	4013      	ands	r3, r2
 8001680:	d003      	beq.n	800168a <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8001682:	693a      	ldr	r2, [r7, #16]
 8001684:	68fb      	ldr	r3, [r7, #12]
 8001686:	4313      	orrs	r3, r2
 8001688:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 800168a:	4b19      	ldr	r3, [pc, #100]	@ (80016f0 <HAL_GPIO_Init+0x2e8>)
 800168c:	693a      	ldr	r2, [r7, #16]
 800168e:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001690:	4b17      	ldr	r3, [pc, #92]	@ (80016f0 <HAL_GPIO_Init+0x2e8>)
 8001692:	681b      	ldr	r3, [r3, #0]
 8001694:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8001696:	68fb      	ldr	r3, [r7, #12]
 8001698:	43da      	mvns	r2, r3
 800169a:	693b      	ldr	r3, [r7, #16]
 800169c:	4013      	ands	r3, r2
 800169e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80016a0:	683b      	ldr	r3, [r7, #0]
 80016a2:	685a      	ldr	r2, [r3, #4]
 80016a4:	2380      	movs	r3, #128	@ 0x80
 80016a6:	025b      	lsls	r3, r3, #9
 80016a8:	4013      	ands	r3, r2
 80016aa:	d003      	beq.n	80016b4 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80016ac:	693a      	ldr	r2, [r7, #16]
 80016ae:	68fb      	ldr	r3, [r7, #12]
 80016b0:	4313      	orrs	r3, r2
 80016b2:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 80016b4:	4b0e      	ldr	r3, [pc, #56]	@ (80016f0 <HAL_GPIO_Init+0x2e8>)
 80016b6:	693a      	ldr	r2, [r7, #16]
 80016b8:	601a      	str	r2, [r3, #0]
      }
    }
    position++;
 80016ba:	697b      	ldr	r3, [r7, #20]
 80016bc:	3301      	adds	r3, #1
 80016be:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 80016c0:	683b      	ldr	r3, [r7, #0]
 80016c2:	681a      	ldr	r2, [r3, #0]
 80016c4:	697b      	ldr	r3, [r7, #20]
 80016c6:	40da      	lsrs	r2, r3
 80016c8:	1e13      	subs	r3, r2, #0
 80016ca:	d000      	beq.n	80016ce <HAL_GPIO_Init+0x2c6>
 80016cc:	e6a8      	b.n	8001420 <HAL_GPIO_Init+0x18>
  }
}
 80016ce:	46c0      	nop			@ (mov r8, r8)
 80016d0:	46c0      	nop			@ (mov r8, r8)
 80016d2:	46bd      	mov	sp, r7
 80016d4:	b006      	add	sp, #24
 80016d6:	bd80      	pop	{r7, pc}
 80016d8:	40021000 	.word	0x40021000
 80016dc:	40010000 	.word	0x40010000
 80016e0:	50000400 	.word	0x50000400
 80016e4:	50000800 	.word	0x50000800
 80016e8:	50000c00 	.word	0x50000c00
 80016ec:	50001c00 	.word	0x50001c00
 80016f0:	40010400 	.word	0x40010400

080016f4 <HAL_GPIO_WritePin>:
  *                        GPIO_PIN_RESET: to clear the port pin
  *                        GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80016f4:	b580      	push	{r7, lr}
 80016f6:	b082      	sub	sp, #8
 80016f8:	af00      	add	r7, sp, #0
 80016fa:	6078      	str	r0, [r7, #4]
 80016fc:	0008      	movs	r0, r1
 80016fe:	0011      	movs	r1, r2
 8001700:	1cbb      	adds	r3, r7, #2
 8001702:	1c02      	adds	r2, r0, #0
 8001704:	801a      	strh	r2, [r3, #0]
 8001706:	1c7b      	adds	r3, r7, #1
 8001708:	1c0a      	adds	r2, r1, #0
 800170a:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800170c:	1c7b      	adds	r3, r7, #1
 800170e:	781b      	ldrb	r3, [r3, #0]
 8001710:	2b00      	cmp	r3, #0
 8001712:	d004      	beq.n	800171e <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001714:	1cbb      	adds	r3, r7, #2
 8001716:	881a      	ldrh	r2, [r3, #0]
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = GPIO_Pin ;
  }
}
 800171c:	e003      	b.n	8001726 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = GPIO_Pin ;
 800171e:	1cbb      	adds	r3, r7, #2
 8001720:	881a      	ldrh	r2, [r3, #0]
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8001726:	46c0      	nop			@ (mov r8, r8)
 8001728:	46bd      	mov	sp, r7
 800172a:	b002      	add	sp, #8
 800172c:	bd80      	pop	{r7, pc}
	...

08001730 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001730:	b580      	push	{r7, lr}
 8001732:	b082      	sub	sp, #8
 8001734:	af00      	add	r7, sp, #0
 8001736:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	2b00      	cmp	r3, #0
 800173c:	d101      	bne.n	8001742 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800173e:	2301      	movs	r3, #1
 8001740:	e082      	b.n	8001848 <HAL_I2C_Init+0x118>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	2241      	movs	r2, #65	@ 0x41
 8001746:	5c9b      	ldrb	r3, [r3, r2]
 8001748:	b2db      	uxtb	r3, r3
 800174a:	2b00      	cmp	r3, #0
 800174c:	d107      	bne.n	800175e <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	2240      	movs	r2, #64	@ 0x40
 8001752:	2100      	movs	r1, #0
 8001754:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	0018      	movs	r0, r3
 800175a:	f7ff fb75 	bl	8000e48 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	2241      	movs	r2, #65	@ 0x41
 8001762:	2124      	movs	r1, #36	@ 0x24
 8001764:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	681b      	ldr	r3, [r3, #0]
 800176a:	681a      	ldr	r2, [r3, #0]
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	681b      	ldr	r3, [r3, #0]
 8001770:	2101      	movs	r1, #1
 8001772:	438a      	bics	r2, r1
 8001774:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	685a      	ldr	r2, [r3, #4]
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	681b      	ldr	r3, [r3, #0]
 800177e:	4934      	ldr	r1, [pc, #208]	@ (8001850 <HAL_I2C_Init+0x120>)
 8001780:	400a      	ands	r2, r1
 8001782:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	681b      	ldr	r3, [r3, #0]
 8001788:	689a      	ldr	r2, [r3, #8]
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	681b      	ldr	r3, [r3, #0]
 800178e:	4931      	ldr	r1, [pc, #196]	@ (8001854 <HAL_I2C_Init+0x124>)
 8001790:	400a      	ands	r2, r1
 8001792:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	68db      	ldr	r3, [r3, #12]
 8001798:	2b01      	cmp	r3, #1
 800179a:	d108      	bne.n	80017ae <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	689a      	ldr	r2, [r3, #8]
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	681b      	ldr	r3, [r3, #0]
 80017a4:	2180      	movs	r1, #128	@ 0x80
 80017a6:	0209      	lsls	r1, r1, #8
 80017a8:	430a      	orrs	r2, r1
 80017aa:	609a      	str	r2, [r3, #8]
 80017ac:	e007      	b.n	80017be <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	689a      	ldr	r2, [r3, #8]
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	681b      	ldr	r3, [r3, #0]
 80017b6:	2184      	movs	r1, #132	@ 0x84
 80017b8:	0209      	lsls	r1, r1, #8
 80017ba:	430a      	orrs	r2, r1
 80017bc:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	68db      	ldr	r3, [r3, #12]
 80017c2:	2b02      	cmp	r3, #2
 80017c4:	d104      	bne.n	80017d0 <HAL_I2C_Init+0xa0>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	681b      	ldr	r3, [r3, #0]
 80017ca:	2280      	movs	r2, #128	@ 0x80
 80017cc:	0112      	lsls	r2, r2, #4
 80017ce:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	681b      	ldr	r3, [r3, #0]
 80017d4:	685a      	ldr	r2, [r3, #4]
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	681b      	ldr	r3, [r3, #0]
 80017da:	491f      	ldr	r1, [pc, #124]	@ (8001858 <HAL_I2C_Init+0x128>)
 80017dc:	430a      	orrs	r2, r1
 80017de:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	681b      	ldr	r3, [r3, #0]
 80017e4:	68da      	ldr	r2, [r3, #12]
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	681b      	ldr	r3, [r3, #0]
 80017ea:	491a      	ldr	r1, [pc, #104]	@ (8001854 <HAL_I2C_Init+0x124>)
 80017ec:	400a      	ands	r2, r1
 80017ee:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	691a      	ldr	r2, [r3, #16]
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	695b      	ldr	r3, [r3, #20]
 80017f8:	431a      	orrs	r2, r3
 80017fa:	0011      	movs	r1, r2
                          (hi2c->Init.OwnAddress2Masks << 8));
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	699b      	ldr	r3, [r3, #24]
 8001800:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	681b      	ldr	r3, [r3, #0]
 8001806:	430a      	orrs	r2, r1
 8001808:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	69d9      	ldr	r1, [r3, #28]
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	6a1a      	ldr	r2, [r3, #32]
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	681b      	ldr	r3, [r3, #0]
 8001816:	430a      	orrs	r2, r1
 8001818:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	681b      	ldr	r3, [r3, #0]
 800181e:	681a      	ldr	r2, [r3, #0]
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	681b      	ldr	r3, [r3, #0]
 8001824:	2101      	movs	r1, #1
 8001826:	430a      	orrs	r2, r1
 8001828:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	2200      	movs	r2, #0
 800182e:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	2241      	movs	r2, #65	@ 0x41
 8001834:	2120      	movs	r1, #32
 8001836:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	2200      	movs	r2, #0
 800183c:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	2242      	movs	r2, #66	@ 0x42
 8001842:	2100      	movs	r1, #0
 8001844:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8001846:	2300      	movs	r3, #0
}
 8001848:	0018      	movs	r0, r3
 800184a:	46bd      	mov	sp, r7
 800184c:	b002      	add	sp, #8
 800184e:	bd80      	pop	{r7, pc}
 8001850:	f0ffffff 	.word	0xf0ffffff
 8001854:	ffff7fff 	.word	0xffff7fff
 8001858:	02008000 	.word	0x02008000

0800185c <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 800185c:	b590      	push	{r4, r7, lr}
 800185e:	b089      	sub	sp, #36	@ 0x24
 8001860:	af02      	add	r7, sp, #8
 8001862:	60f8      	str	r0, [r7, #12]
 8001864:	0008      	movs	r0, r1
 8001866:	607a      	str	r2, [r7, #4]
 8001868:	0019      	movs	r1, r3
 800186a:	230a      	movs	r3, #10
 800186c:	18fb      	adds	r3, r7, r3
 800186e:	1c02      	adds	r2, r0, #0
 8001870:	801a      	strh	r2, [r3, #0]
 8001872:	2308      	movs	r3, #8
 8001874:	18fb      	adds	r3, r7, r3
 8001876:	1c0a      	adds	r2, r1, #0
 8001878:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800187a:	68fb      	ldr	r3, [r7, #12]
 800187c:	2241      	movs	r2, #65	@ 0x41
 800187e:	5c9b      	ldrb	r3, [r3, r2]
 8001880:	b2db      	uxtb	r3, r3
 8001882:	2b20      	cmp	r3, #32
 8001884:	d000      	beq.n	8001888 <HAL_I2C_Master_Transmit+0x2c>
 8001886:	e0e7      	b.n	8001a58 <HAL_I2C_Master_Transmit+0x1fc>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001888:	68fb      	ldr	r3, [r7, #12]
 800188a:	2240      	movs	r2, #64	@ 0x40
 800188c:	5c9b      	ldrb	r3, [r3, r2]
 800188e:	2b01      	cmp	r3, #1
 8001890:	d101      	bne.n	8001896 <HAL_I2C_Master_Transmit+0x3a>
 8001892:	2302      	movs	r3, #2
 8001894:	e0e1      	b.n	8001a5a <HAL_I2C_Master_Transmit+0x1fe>
 8001896:	68fb      	ldr	r3, [r7, #12]
 8001898:	2240      	movs	r2, #64	@ 0x40
 800189a:	2101      	movs	r1, #1
 800189c:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800189e:	f7ff fc1f 	bl	80010e0 <HAL_GetTick>
 80018a2:	0003      	movs	r3, r0
 80018a4:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80018a6:	2380      	movs	r3, #128	@ 0x80
 80018a8:	0219      	lsls	r1, r3, #8
 80018aa:	68f8      	ldr	r0, [r7, #12]
 80018ac:	697b      	ldr	r3, [r7, #20]
 80018ae:	9300      	str	r3, [sp, #0]
 80018b0:	2319      	movs	r3, #25
 80018b2:	2201      	movs	r2, #1
 80018b4:	f000 fa16 	bl	8001ce4 <I2C_WaitOnFlagUntilTimeout>
 80018b8:	1e03      	subs	r3, r0, #0
 80018ba:	d001      	beq.n	80018c0 <HAL_I2C_Master_Transmit+0x64>
    {
      return HAL_ERROR;
 80018bc:	2301      	movs	r3, #1
 80018be:	e0cc      	b.n	8001a5a <HAL_I2C_Master_Transmit+0x1fe>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80018c0:	68fb      	ldr	r3, [r7, #12]
 80018c2:	2241      	movs	r2, #65	@ 0x41
 80018c4:	2121      	movs	r1, #33	@ 0x21
 80018c6:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 80018c8:	68fb      	ldr	r3, [r7, #12]
 80018ca:	2242      	movs	r2, #66	@ 0x42
 80018cc:	2110      	movs	r1, #16
 80018ce:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80018d0:	68fb      	ldr	r3, [r7, #12]
 80018d2:	2200      	movs	r2, #0
 80018d4:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80018d6:	68fb      	ldr	r3, [r7, #12]
 80018d8:	687a      	ldr	r2, [r7, #4]
 80018da:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 80018dc:	68fb      	ldr	r3, [r7, #12]
 80018de:	2208      	movs	r2, #8
 80018e0:	18ba      	adds	r2, r7, r2
 80018e2:	8812      	ldrh	r2, [r2, #0]
 80018e4:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 80018e6:	68fb      	ldr	r3, [r7, #12]
 80018e8:	2200      	movs	r2, #0
 80018ea:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80018ec:	68fb      	ldr	r3, [r7, #12]
 80018ee:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80018f0:	b29b      	uxth	r3, r3
 80018f2:	2bff      	cmp	r3, #255	@ 0xff
 80018f4:	d911      	bls.n	800191a <HAL_I2C_Master_Transmit+0xbe>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80018f6:	68fb      	ldr	r3, [r7, #12]
 80018f8:	22ff      	movs	r2, #255	@ 0xff
 80018fa:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80018fc:	68fb      	ldr	r3, [r7, #12]
 80018fe:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001900:	b2da      	uxtb	r2, r3
 8001902:	2380      	movs	r3, #128	@ 0x80
 8001904:	045c      	lsls	r4, r3, #17
 8001906:	230a      	movs	r3, #10
 8001908:	18fb      	adds	r3, r7, r3
 800190a:	8819      	ldrh	r1, [r3, #0]
 800190c:	68f8      	ldr	r0, [r7, #12]
 800190e:	4b55      	ldr	r3, [pc, #340]	@ (8001a64 <HAL_I2C_Master_Transmit+0x208>)
 8001910:	9300      	str	r3, [sp, #0]
 8001912:	0023      	movs	r3, r4
 8001914:	f000 fbb6 	bl	8002084 <I2C_TransferConfig>
 8001918:	e075      	b.n	8001a06 <HAL_I2C_Master_Transmit+0x1aa>
                         I2C_GENERATE_START_WRITE);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800191a:	68fb      	ldr	r3, [r7, #12]
 800191c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800191e:	b29a      	uxth	r2, r3
 8001920:	68fb      	ldr	r3, [r7, #12]
 8001922:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8001924:	68fb      	ldr	r3, [r7, #12]
 8001926:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001928:	b2da      	uxtb	r2, r3
 800192a:	2380      	movs	r3, #128	@ 0x80
 800192c:	049c      	lsls	r4, r3, #18
 800192e:	230a      	movs	r3, #10
 8001930:	18fb      	adds	r3, r7, r3
 8001932:	8819      	ldrh	r1, [r3, #0]
 8001934:	68f8      	ldr	r0, [r7, #12]
 8001936:	4b4b      	ldr	r3, [pc, #300]	@ (8001a64 <HAL_I2C_Master_Transmit+0x208>)
 8001938:	9300      	str	r3, [sp, #0]
 800193a:	0023      	movs	r3, r4
 800193c:	f000 fba2 	bl	8002084 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 8001940:	e061      	b.n	8001a06 <HAL_I2C_Master_Transmit+0x1aa>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001942:	697a      	ldr	r2, [r7, #20]
 8001944:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8001946:	68fb      	ldr	r3, [r7, #12]
 8001948:	0018      	movs	r0, r3
 800194a:	f000 fa19 	bl	8001d80 <I2C_WaitOnTXISFlagUntilTimeout>
 800194e:	1e03      	subs	r3, r0, #0
 8001950:	d001      	beq.n	8001956 <HAL_I2C_Master_Transmit+0xfa>
      {
        return HAL_ERROR;
 8001952:	2301      	movs	r3, #1
 8001954:	e081      	b.n	8001a5a <HAL_I2C_Master_Transmit+0x1fe>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8001956:	68fb      	ldr	r3, [r7, #12]
 8001958:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800195a:	781a      	ldrb	r2, [r3, #0]
 800195c:	68fb      	ldr	r3, [r7, #12]
 800195e:	681b      	ldr	r3, [r3, #0]
 8001960:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001962:	68fb      	ldr	r3, [r7, #12]
 8001964:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001966:	1c5a      	adds	r2, r3, #1
 8001968:	68fb      	ldr	r3, [r7, #12]
 800196a:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 800196c:	68fb      	ldr	r3, [r7, #12]
 800196e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001970:	b29b      	uxth	r3, r3
 8001972:	3b01      	subs	r3, #1
 8001974:	b29a      	uxth	r2, r3
 8001976:	68fb      	ldr	r3, [r7, #12]
 8001978:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 800197a:	68fb      	ldr	r3, [r7, #12]
 800197c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800197e:	3b01      	subs	r3, #1
 8001980:	b29a      	uxth	r2, r3
 8001982:	68fb      	ldr	r3, [r7, #12]
 8001984:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8001986:	68fb      	ldr	r3, [r7, #12]
 8001988:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800198a:	b29b      	uxth	r3, r3
 800198c:	2b00      	cmp	r3, #0
 800198e:	d03a      	beq.n	8001a06 <HAL_I2C_Master_Transmit+0x1aa>
 8001990:	68fb      	ldr	r3, [r7, #12]
 8001992:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001994:	2b00      	cmp	r3, #0
 8001996:	d136      	bne.n	8001a06 <HAL_I2C_Master_Transmit+0x1aa>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8001998:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800199a:	68f8      	ldr	r0, [r7, #12]
 800199c:	697b      	ldr	r3, [r7, #20]
 800199e:	9300      	str	r3, [sp, #0]
 80019a0:	0013      	movs	r3, r2
 80019a2:	2200      	movs	r2, #0
 80019a4:	2180      	movs	r1, #128	@ 0x80
 80019a6:	f000 f99d 	bl	8001ce4 <I2C_WaitOnFlagUntilTimeout>
 80019aa:	1e03      	subs	r3, r0, #0
 80019ac:	d001      	beq.n	80019b2 <HAL_I2C_Master_Transmit+0x156>
        {
          return HAL_ERROR;
 80019ae:	2301      	movs	r3, #1
 80019b0:	e053      	b.n	8001a5a <HAL_I2C_Master_Transmit+0x1fe>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80019b2:	68fb      	ldr	r3, [r7, #12]
 80019b4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80019b6:	b29b      	uxth	r3, r3
 80019b8:	2bff      	cmp	r3, #255	@ 0xff
 80019ba:	d911      	bls.n	80019e0 <HAL_I2C_Master_Transmit+0x184>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80019bc:	68fb      	ldr	r3, [r7, #12]
 80019be:	22ff      	movs	r2, #255	@ 0xff
 80019c0:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80019c2:	68fb      	ldr	r3, [r7, #12]
 80019c4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80019c6:	b2da      	uxtb	r2, r3
 80019c8:	2380      	movs	r3, #128	@ 0x80
 80019ca:	045c      	lsls	r4, r3, #17
 80019cc:	230a      	movs	r3, #10
 80019ce:	18fb      	adds	r3, r7, r3
 80019d0:	8819      	ldrh	r1, [r3, #0]
 80019d2:	68f8      	ldr	r0, [r7, #12]
 80019d4:	2300      	movs	r3, #0
 80019d6:	9300      	str	r3, [sp, #0]
 80019d8:	0023      	movs	r3, r4
 80019da:	f000 fb53 	bl	8002084 <I2C_TransferConfig>
 80019de:	e012      	b.n	8001a06 <HAL_I2C_Master_Transmit+0x1aa>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80019e0:	68fb      	ldr	r3, [r7, #12]
 80019e2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80019e4:	b29a      	uxth	r2, r3
 80019e6:	68fb      	ldr	r3, [r7, #12]
 80019e8:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80019ea:	68fb      	ldr	r3, [r7, #12]
 80019ec:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80019ee:	b2da      	uxtb	r2, r3
 80019f0:	2380      	movs	r3, #128	@ 0x80
 80019f2:	049c      	lsls	r4, r3, #18
 80019f4:	230a      	movs	r3, #10
 80019f6:	18fb      	adds	r3, r7, r3
 80019f8:	8819      	ldrh	r1, [r3, #0]
 80019fa:	68f8      	ldr	r0, [r7, #12]
 80019fc:	2300      	movs	r3, #0
 80019fe:	9300      	str	r3, [sp, #0]
 8001a00:	0023      	movs	r3, r4
 8001a02:	f000 fb3f 	bl	8002084 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8001a06:	68fb      	ldr	r3, [r7, #12]
 8001a08:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001a0a:	b29b      	uxth	r3, r3
 8001a0c:	2b00      	cmp	r3, #0
 8001a0e:	d198      	bne.n	8001942 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001a10:	697a      	ldr	r2, [r7, #20]
 8001a12:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8001a14:	68fb      	ldr	r3, [r7, #12]
 8001a16:	0018      	movs	r0, r3
 8001a18:	f000 f9f8 	bl	8001e0c <I2C_WaitOnSTOPFlagUntilTimeout>
 8001a1c:	1e03      	subs	r3, r0, #0
 8001a1e:	d001      	beq.n	8001a24 <HAL_I2C_Master_Transmit+0x1c8>
    {
      return HAL_ERROR;
 8001a20:	2301      	movs	r3, #1
 8001a22:	e01a      	b.n	8001a5a <HAL_I2C_Master_Transmit+0x1fe>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001a24:	68fb      	ldr	r3, [r7, #12]
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	2220      	movs	r2, #32
 8001a2a:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8001a2c:	68fb      	ldr	r3, [r7, #12]
 8001a2e:	681b      	ldr	r3, [r3, #0]
 8001a30:	685a      	ldr	r2, [r3, #4]
 8001a32:	68fb      	ldr	r3, [r7, #12]
 8001a34:	681b      	ldr	r3, [r3, #0]
 8001a36:	490c      	ldr	r1, [pc, #48]	@ (8001a68 <HAL_I2C_Master_Transmit+0x20c>)
 8001a38:	400a      	ands	r2, r1
 8001a3a:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8001a3c:	68fb      	ldr	r3, [r7, #12]
 8001a3e:	2241      	movs	r2, #65	@ 0x41
 8001a40:	2120      	movs	r1, #32
 8001a42:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8001a44:	68fb      	ldr	r3, [r7, #12]
 8001a46:	2242      	movs	r2, #66	@ 0x42
 8001a48:	2100      	movs	r1, #0
 8001a4a:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001a4c:	68fb      	ldr	r3, [r7, #12]
 8001a4e:	2240      	movs	r2, #64	@ 0x40
 8001a50:	2100      	movs	r1, #0
 8001a52:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8001a54:	2300      	movs	r3, #0
 8001a56:	e000      	b.n	8001a5a <HAL_I2C_Master_Transmit+0x1fe>
  }
  else
  {
    return HAL_BUSY;
 8001a58:	2302      	movs	r3, #2
  }
}
 8001a5a:	0018      	movs	r0, r3
 8001a5c:	46bd      	mov	sp, r7
 8001a5e:	b007      	add	sp, #28
 8001a60:	bd90      	pop	{r4, r7, pc}
 8001a62:	46c0      	nop			@ (mov r8, r8)
 8001a64:	80002000 	.word	0x80002000
 8001a68:	fe00e800 	.word	0xfe00e800

08001a6c <HAL_I2C_IsDeviceReady>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials,
                                        uint32_t Timeout)
{
 8001a6c:	b580      	push	{r7, lr}
 8001a6e:	b08a      	sub	sp, #40	@ 0x28
 8001a70:	af02      	add	r7, sp, #8
 8001a72:	60f8      	str	r0, [r7, #12]
 8001a74:	607a      	str	r2, [r7, #4]
 8001a76:	603b      	str	r3, [r7, #0]
 8001a78:	230a      	movs	r3, #10
 8001a7a:	18fb      	adds	r3, r7, r3
 8001a7c:	1c0a      	adds	r2, r1, #0
 8001a7e:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  __IO uint32_t I2C_Trials = 0UL;
 8001a80:	2300      	movs	r3, #0
 8001a82:	617b      	str	r3, [r7, #20]

  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001a84:	68fb      	ldr	r3, [r7, #12]
 8001a86:	2241      	movs	r2, #65	@ 0x41
 8001a88:	5c9b      	ldrb	r3, [r3, r2]
 8001a8a:	b2db      	uxtb	r3, r3
 8001a8c:	2b20      	cmp	r3, #32
 8001a8e:	d000      	beq.n	8001a92 <HAL_I2C_IsDeviceReady+0x26>
 8001a90:	e0fd      	b.n	8001c8e <HAL_I2C_IsDeviceReady+0x222>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 8001a92:	68fb      	ldr	r3, [r7, #12]
 8001a94:	681b      	ldr	r3, [r3, #0]
 8001a96:	699a      	ldr	r2, [r3, #24]
 8001a98:	2380      	movs	r3, #128	@ 0x80
 8001a9a:	021b      	lsls	r3, r3, #8
 8001a9c:	401a      	ands	r2, r3
 8001a9e:	2380      	movs	r3, #128	@ 0x80
 8001aa0:	021b      	lsls	r3, r3, #8
 8001aa2:	429a      	cmp	r2, r3
 8001aa4:	d101      	bne.n	8001aaa <HAL_I2C_IsDeviceReady+0x3e>
    {
      return HAL_BUSY;
 8001aa6:	2302      	movs	r3, #2
 8001aa8:	e0f2      	b.n	8001c90 <HAL_I2C_IsDeviceReady+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001aaa:	68fb      	ldr	r3, [r7, #12]
 8001aac:	2240      	movs	r2, #64	@ 0x40
 8001aae:	5c9b      	ldrb	r3, [r3, r2]
 8001ab0:	2b01      	cmp	r3, #1
 8001ab2:	d101      	bne.n	8001ab8 <HAL_I2C_IsDeviceReady+0x4c>
 8001ab4:	2302      	movs	r3, #2
 8001ab6:	e0eb      	b.n	8001c90 <HAL_I2C_IsDeviceReady+0x224>
 8001ab8:	68fb      	ldr	r3, [r7, #12]
 8001aba:	2240      	movs	r2, #64	@ 0x40
 8001abc:	2101      	movs	r1, #1
 8001abe:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001ac0:	68fb      	ldr	r3, [r7, #12]
 8001ac2:	2241      	movs	r2, #65	@ 0x41
 8001ac4:	2124      	movs	r1, #36	@ 0x24
 8001ac6:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001ac8:	68fb      	ldr	r3, [r7, #12]
 8001aca:	2200      	movs	r2, #0
 8001acc:	645a      	str	r2, [r3, #68]	@ 0x44

    do
    {
      /* Generate Start */
      hi2c->Instance->CR2 = I2C_GENERATE_START(hi2c->Init.AddressingMode, DevAddress);
 8001ace:	68fb      	ldr	r3, [r7, #12]
 8001ad0:	68db      	ldr	r3, [r3, #12]
 8001ad2:	2b01      	cmp	r3, #1
 8001ad4:	d107      	bne.n	8001ae6 <HAL_I2C_IsDeviceReady+0x7a>
 8001ad6:	230a      	movs	r3, #10
 8001ad8:	18fb      	adds	r3, r7, r3
 8001ada:	881b      	ldrh	r3, [r3, #0]
 8001adc:	059b      	lsls	r3, r3, #22
 8001ade:	0d9b      	lsrs	r3, r3, #22
 8001ae0:	4a6d      	ldr	r2, [pc, #436]	@ (8001c98 <HAL_I2C_IsDeviceReady+0x22c>)
 8001ae2:	431a      	orrs	r2, r3
 8001ae4:	e006      	b.n	8001af4 <HAL_I2C_IsDeviceReady+0x88>
 8001ae6:	230a      	movs	r3, #10
 8001ae8:	18fb      	adds	r3, r7, r3
 8001aea:	881b      	ldrh	r3, [r3, #0]
 8001aec:	059b      	lsls	r3, r3, #22
 8001aee:	0d9b      	lsrs	r3, r3, #22
 8001af0:	4a6a      	ldr	r2, [pc, #424]	@ (8001c9c <HAL_I2C_IsDeviceReady+0x230>)
 8001af2:	431a      	orrs	r2, r3
 8001af4:	68fb      	ldr	r3, [r7, #12]
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	605a      	str	r2, [r3, #4]

      /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
      /* Wait until STOPF flag is set or a NACK flag is set*/
      tickstart = HAL_GetTick();
 8001afa:	f7ff faf1 	bl	80010e0 <HAL_GetTick>
 8001afe:	0003      	movs	r3, r0
 8001b00:	61bb      	str	r3, [r7, #24]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 8001b02:	68fb      	ldr	r3, [r7, #12]
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	699b      	ldr	r3, [r3, #24]
 8001b08:	2220      	movs	r2, #32
 8001b0a:	4013      	ands	r3, r2
 8001b0c:	3b20      	subs	r3, #32
 8001b0e:	425a      	negs	r2, r3
 8001b10:	4153      	adcs	r3, r2
 8001b12:	b2da      	uxtb	r2, r3
 8001b14:	231f      	movs	r3, #31
 8001b16:	18fb      	adds	r3, r7, r3
 8001b18:	701a      	strb	r2, [r3, #0]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8001b1a:	68fb      	ldr	r3, [r7, #12]
 8001b1c:	681b      	ldr	r3, [r3, #0]
 8001b1e:	699b      	ldr	r3, [r3, #24]
 8001b20:	2210      	movs	r2, #16
 8001b22:	4013      	ands	r3, r2
 8001b24:	3b10      	subs	r3, #16
 8001b26:	425a      	negs	r2, r3
 8001b28:	4153      	adcs	r3, r2
 8001b2a:	b2da      	uxtb	r2, r3
 8001b2c:	231e      	movs	r3, #30
 8001b2e:	18fb      	adds	r3, r7, r3
 8001b30:	701a      	strb	r2, [r3, #0]

      while ((tmp1 == RESET) && (tmp2 == RESET))
 8001b32:	e035      	b.n	8001ba0 <HAL_I2C_IsDeviceReady+0x134>
      {
        if (Timeout != HAL_MAX_DELAY)
 8001b34:	683b      	ldr	r3, [r7, #0]
 8001b36:	3301      	adds	r3, #1
 8001b38:	d01a      	beq.n	8001b70 <HAL_I2C_IsDeviceReady+0x104>
        {
          if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8001b3a:	f7ff fad1 	bl	80010e0 <HAL_GetTick>
 8001b3e:	0002      	movs	r2, r0
 8001b40:	69bb      	ldr	r3, [r7, #24]
 8001b42:	1ad3      	subs	r3, r2, r3
 8001b44:	683a      	ldr	r2, [r7, #0]
 8001b46:	429a      	cmp	r2, r3
 8001b48:	d302      	bcc.n	8001b50 <HAL_I2C_IsDeviceReady+0xe4>
 8001b4a:	683b      	ldr	r3, [r7, #0]
 8001b4c:	2b00      	cmp	r3, #0
 8001b4e:	d10f      	bne.n	8001b70 <HAL_I2C_IsDeviceReady+0x104>
          {
            /* Update I2C state */
            hi2c->State = HAL_I2C_STATE_READY;
 8001b50:	68fb      	ldr	r3, [r7, #12]
 8001b52:	2241      	movs	r2, #65	@ 0x41
 8001b54:	2120      	movs	r1, #32
 8001b56:	5499      	strb	r1, [r3, r2]

            /* Update I2C error code */
            hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001b58:	68fb      	ldr	r3, [r7, #12]
 8001b5a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001b5c:	2220      	movs	r2, #32
 8001b5e:	431a      	orrs	r2, r3
 8001b60:	68fb      	ldr	r3, [r7, #12]
 8001b62:	645a      	str	r2, [r3, #68]	@ 0x44

            /* Process Unlocked */
            __HAL_UNLOCK(hi2c);
 8001b64:	68fb      	ldr	r3, [r7, #12]
 8001b66:	2240      	movs	r2, #64	@ 0x40
 8001b68:	2100      	movs	r1, #0
 8001b6a:	5499      	strb	r1, [r3, r2]

            return HAL_ERROR;
 8001b6c:	2301      	movs	r3, #1
 8001b6e:	e08f      	b.n	8001c90 <HAL_I2C_IsDeviceReady+0x224>
          }
        }

        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 8001b70:	68fb      	ldr	r3, [r7, #12]
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	699b      	ldr	r3, [r3, #24]
 8001b76:	2220      	movs	r2, #32
 8001b78:	4013      	ands	r3, r2
 8001b7a:	3b20      	subs	r3, #32
 8001b7c:	425a      	negs	r2, r3
 8001b7e:	4153      	adcs	r3, r2
 8001b80:	b2da      	uxtb	r2, r3
 8001b82:	231f      	movs	r3, #31
 8001b84:	18fb      	adds	r3, r7, r3
 8001b86:	701a      	strb	r2, [r3, #0]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8001b88:	68fb      	ldr	r3, [r7, #12]
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	699b      	ldr	r3, [r3, #24]
 8001b8e:	2210      	movs	r2, #16
 8001b90:	4013      	ands	r3, r2
 8001b92:	3b10      	subs	r3, #16
 8001b94:	425a      	negs	r2, r3
 8001b96:	4153      	adcs	r3, r2
 8001b98:	b2da      	uxtb	r2, r3
 8001b9a:	231e      	movs	r3, #30
 8001b9c:	18fb      	adds	r3, r7, r3
 8001b9e:	701a      	strb	r2, [r3, #0]
      while ((tmp1 == RESET) && (tmp2 == RESET))
 8001ba0:	231f      	movs	r3, #31
 8001ba2:	18fb      	adds	r3, r7, r3
 8001ba4:	781b      	ldrb	r3, [r3, #0]
 8001ba6:	2b00      	cmp	r3, #0
 8001ba8:	d104      	bne.n	8001bb4 <HAL_I2C_IsDeviceReady+0x148>
 8001baa:	231e      	movs	r3, #30
 8001bac:	18fb      	adds	r3, r7, r3
 8001bae:	781b      	ldrb	r3, [r3, #0]
 8001bb0:	2b00      	cmp	r3, #0
 8001bb2:	d0bf      	beq.n	8001b34 <HAL_I2C_IsDeviceReady+0xc8>
      }

      /* Check if the NACKF flag has not been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == RESET)
 8001bb4:	68fb      	ldr	r3, [r7, #12]
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	699b      	ldr	r3, [r3, #24]
 8001bba:	2210      	movs	r2, #16
 8001bbc:	4013      	ands	r3, r2
 8001bbe:	2b10      	cmp	r3, #16
 8001bc0:	d01a      	beq.n	8001bf8 <HAL_I2C_IsDeviceReady+0x18c>
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8001bc2:	683a      	ldr	r2, [r7, #0]
 8001bc4:	68f8      	ldr	r0, [r7, #12]
 8001bc6:	69bb      	ldr	r3, [r7, #24]
 8001bc8:	9300      	str	r3, [sp, #0]
 8001bca:	0013      	movs	r3, r2
 8001bcc:	2200      	movs	r2, #0
 8001bce:	2120      	movs	r1, #32
 8001bd0:	f000 f888 	bl	8001ce4 <I2C_WaitOnFlagUntilTimeout>
 8001bd4:	1e03      	subs	r3, r0, #0
 8001bd6:	d001      	beq.n	8001bdc <HAL_I2C_IsDeviceReady+0x170>
        {
          return HAL_ERROR;
 8001bd8:	2301      	movs	r3, #1
 8001bda:	e059      	b.n	8001c90 <HAL_I2C_IsDeviceReady+0x224>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001bdc:	68fb      	ldr	r3, [r7, #12]
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	2220      	movs	r2, #32
 8001be2:	61da      	str	r2, [r3, #28]

        /* Device is ready */
        hi2c->State = HAL_I2C_STATE_READY;
 8001be4:	68fb      	ldr	r3, [r7, #12]
 8001be6:	2241      	movs	r2, #65	@ 0x41
 8001be8:	2120      	movs	r1, #32
 8001bea:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001bec:	68fb      	ldr	r3, [r7, #12]
 8001bee:	2240      	movs	r2, #64	@ 0x40
 8001bf0:	2100      	movs	r1, #0
 8001bf2:	5499      	strb	r1, [r3, r2]

        return HAL_OK;
 8001bf4:	2300      	movs	r3, #0
 8001bf6:	e04b      	b.n	8001c90 <HAL_I2C_IsDeviceReady+0x224>
      }
      else
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8001bf8:	683a      	ldr	r2, [r7, #0]
 8001bfa:	68f8      	ldr	r0, [r7, #12]
 8001bfc:	69bb      	ldr	r3, [r7, #24]
 8001bfe:	9300      	str	r3, [sp, #0]
 8001c00:	0013      	movs	r3, r2
 8001c02:	2200      	movs	r2, #0
 8001c04:	2120      	movs	r1, #32
 8001c06:	f000 f86d 	bl	8001ce4 <I2C_WaitOnFlagUntilTimeout>
 8001c0a:	1e03      	subs	r3, r0, #0
 8001c0c:	d001      	beq.n	8001c12 <HAL_I2C_IsDeviceReady+0x1a6>
        {
          return HAL_ERROR;
 8001c0e:	2301      	movs	r3, #1
 8001c10:	e03e      	b.n	8001c90 <HAL_I2C_IsDeviceReady+0x224>
        }

        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001c12:	68fb      	ldr	r3, [r7, #12]
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	2210      	movs	r2, #16
 8001c18:	61da      	str	r2, [r3, #28]

        /* Clear STOP Flag, auto generated with autoend*/
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001c1a:	68fb      	ldr	r3, [r7, #12]
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	2220      	movs	r2, #32
 8001c20:	61da      	str	r2, [r3, #28]
      }

      /* Check if the maximum allowed number of trials has been reached */
      if (I2C_Trials == Trials)
 8001c22:	697b      	ldr	r3, [r7, #20]
 8001c24:	687a      	ldr	r2, [r7, #4]
 8001c26:	429a      	cmp	r2, r3
 8001c28:	d119      	bne.n	8001c5e <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8001c2a:	68fb      	ldr	r3, [r7, #12]
 8001c2c:	681b      	ldr	r3, [r3, #0]
 8001c2e:	685a      	ldr	r2, [r3, #4]
 8001c30:	68fb      	ldr	r3, [r7, #12]
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	2180      	movs	r1, #128	@ 0x80
 8001c36:	01c9      	lsls	r1, r1, #7
 8001c38:	430a      	orrs	r2, r1
 8001c3a:	605a      	str	r2, [r3, #4]

        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8001c3c:	683a      	ldr	r2, [r7, #0]
 8001c3e:	68f8      	ldr	r0, [r7, #12]
 8001c40:	69bb      	ldr	r3, [r7, #24]
 8001c42:	9300      	str	r3, [sp, #0]
 8001c44:	0013      	movs	r3, r2
 8001c46:	2200      	movs	r2, #0
 8001c48:	2120      	movs	r1, #32
 8001c4a:	f000 f84b 	bl	8001ce4 <I2C_WaitOnFlagUntilTimeout>
 8001c4e:	1e03      	subs	r3, r0, #0
 8001c50:	d001      	beq.n	8001c56 <HAL_I2C_IsDeviceReady+0x1ea>
        {
          return HAL_ERROR;
 8001c52:	2301      	movs	r3, #1
 8001c54:	e01c      	b.n	8001c90 <HAL_I2C_IsDeviceReady+0x224>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001c56:	68fb      	ldr	r3, [r7, #12]
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	2220      	movs	r2, #32
 8001c5c:	61da      	str	r2, [r3, #28]
      }

      /* Increment Trials */
      I2C_Trials++;
 8001c5e:	697b      	ldr	r3, [r7, #20]
 8001c60:	3301      	adds	r3, #1
 8001c62:	617b      	str	r3, [r7, #20]
    } while (I2C_Trials < Trials);
 8001c64:	697b      	ldr	r3, [r7, #20]
 8001c66:	687a      	ldr	r2, [r7, #4]
 8001c68:	429a      	cmp	r2, r3
 8001c6a:	d900      	bls.n	8001c6e <HAL_I2C_IsDeviceReady+0x202>
 8001c6c:	e72f      	b.n	8001ace <HAL_I2C_IsDeviceReady+0x62>

    /* Update I2C state */
    hi2c->State = HAL_I2C_STATE_READY;
 8001c6e:	68fb      	ldr	r3, [r7, #12]
 8001c70:	2241      	movs	r2, #65	@ 0x41
 8001c72:	2120      	movs	r1, #32
 8001c74:	5499      	strb	r1, [r3, r2]

    /* Update I2C error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001c76:	68fb      	ldr	r3, [r7, #12]
 8001c78:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001c7a:	2220      	movs	r2, #32
 8001c7c:	431a      	orrs	r2, r3
 8001c7e:	68fb      	ldr	r3, [r7, #12]
 8001c80:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001c82:	68fb      	ldr	r3, [r7, #12]
 8001c84:	2240      	movs	r2, #64	@ 0x40
 8001c86:	2100      	movs	r1, #0
 8001c88:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 8001c8a:	2301      	movs	r3, #1
 8001c8c:	e000      	b.n	8001c90 <HAL_I2C_IsDeviceReady+0x224>
  }
  else
  {
    return HAL_BUSY;
 8001c8e:	2302      	movs	r3, #2
  }
}
 8001c90:	0018      	movs	r0, r3
 8001c92:	46bd      	mov	sp, r7
 8001c94:	b008      	add	sp, #32
 8001c96:	bd80      	pop	{r7, pc}
 8001c98:	02002000 	.word	0x02002000
 8001c9c:	02002800 	.word	0x02002800

08001ca0 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8001ca0:	b580      	push	{r7, lr}
 8001ca2:	b082      	sub	sp, #8
 8001ca4:	af00      	add	r7, sp, #0
 8001ca6:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	699b      	ldr	r3, [r3, #24]
 8001cae:	2202      	movs	r2, #2
 8001cb0:	4013      	ands	r3, r2
 8001cb2:	2b02      	cmp	r3, #2
 8001cb4:	d103      	bne.n	8001cbe <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	2200      	movs	r2, #0
 8001cbc:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	699b      	ldr	r3, [r3, #24]
 8001cc4:	2201      	movs	r2, #1
 8001cc6:	4013      	ands	r3, r2
 8001cc8:	2b01      	cmp	r3, #1
 8001cca:	d007      	beq.n	8001cdc <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	699a      	ldr	r2, [r3, #24]
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	2101      	movs	r1, #1
 8001cd8:	430a      	orrs	r2, r1
 8001cda:	619a      	str	r2, [r3, #24]
  }
}
 8001cdc:	46c0      	nop			@ (mov r8, r8)
 8001cde:	46bd      	mov	sp, r7
 8001ce0:	b002      	add	sp, #8
 8001ce2:	bd80      	pop	{r7, pc}

08001ce4 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8001ce4:	b580      	push	{r7, lr}
 8001ce6:	b084      	sub	sp, #16
 8001ce8:	af00      	add	r7, sp, #0
 8001cea:	60f8      	str	r0, [r7, #12]
 8001cec:	60b9      	str	r1, [r7, #8]
 8001cee:	603b      	str	r3, [r7, #0]
 8001cf0:	1dfb      	adds	r3, r7, #7
 8001cf2:	701a      	strb	r2, [r3, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001cf4:	e030      	b.n	8001d58 <I2C_WaitOnFlagUntilTimeout+0x74>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001cf6:	683b      	ldr	r3, [r7, #0]
 8001cf8:	3301      	adds	r3, #1
 8001cfa:	d02d      	beq.n	8001d58 <I2C_WaitOnFlagUntilTimeout+0x74>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001cfc:	f7ff f9f0 	bl	80010e0 <HAL_GetTick>
 8001d00:	0002      	movs	r2, r0
 8001d02:	69bb      	ldr	r3, [r7, #24]
 8001d04:	1ad3      	subs	r3, r2, r3
 8001d06:	683a      	ldr	r2, [r7, #0]
 8001d08:	429a      	cmp	r2, r3
 8001d0a:	d302      	bcc.n	8001d12 <I2C_WaitOnFlagUntilTimeout+0x2e>
 8001d0c:	683b      	ldr	r3, [r7, #0]
 8001d0e:	2b00      	cmp	r3, #0
 8001d10:	d122      	bne.n	8001d58 <I2C_WaitOnFlagUntilTimeout+0x74>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8001d12:	68fb      	ldr	r3, [r7, #12]
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	699b      	ldr	r3, [r3, #24]
 8001d18:	68ba      	ldr	r2, [r7, #8]
 8001d1a:	4013      	ands	r3, r2
 8001d1c:	68ba      	ldr	r2, [r7, #8]
 8001d1e:	1ad3      	subs	r3, r2, r3
 8001d20:	425a      	negs	r2, r3
 8001d22:	4153      	adcs	r3, r2
 8001d24:	b2db      	uxtb	r3, r3
 8001d26:	001a      	movs	r2, r3
 8001d28:	1dfb      	adds	r3, r7, #7
 8001d2a:	781b      	ldrb	r3, [r3, #0]
 8001d2c:	429a      	cmp	r2, r3
 8001d2e:	d113      	bne.n	8001d58 <I2C_WaitOnFlagUntilTimeout+0x74>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001d30:	68fb      	ldr	r3, [r7, #12]
 8001d32:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001d34:	2220      	movs	r2, #32
 8001d36:	431a      	orrs	r2, r3
 8001d38:	68fb      	ldr	r3, [r7, #12]
 8001d3a:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8001d3c:	68fb      	ldr	r3, [r7, #12]
 8001d3e:	2241      	movs	r2, #65	@ 0x41
 8001d40:	2120      	movs	r1, #32
 8001d42:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8001d44:	68fb      	ldr	r3, [r7, #12]
 8001d46:	2242      	movs	r2, #66	@ 0x42
 8001d48:	2100      	movs	r1, #0
 8001d4a:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8001d4c:	68fb      	ldr	r3, [r7, #12]
 8001d4e:	2240      	movs	r2, #64	@ 0x40
 8001d50:	2100      	movs	r1, #0
 8001d52:	5499      	strb	r1, [r3, r2]
          return HAL_ERROR;
 8001d54:	2301      	movs	r3, #1
 8001d56:	e00f      	b.n	8001d78 <I2C_WaitOnFlagUntilTimeout+0x94>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001d58:	68fb      	ldr	r3, [r7, #12]
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	699b      	ldr	r3, [r3, #24]
 8001d5e:	68ba      	ldr	r2, [r7, #8]
 8001d60:	4013      	ands	r3, r2
 8001d62:	68ba      	ldr	r2, [r7, #8]
 8001d64:	1ad3      	subs	r3, r2, r3
 8001d66:	425a      	negs	r2, r3
 8001d68:	4153      	adcs	r3, r2
 8001d6a:	b2db      	uxtb	r3, r3
 8001d6c:	001a      	movs	r2, r3
 8001d6e:	1dfb      	adds	r3, r7, #7
 8001d70:	781b      	ldrb	r3, [r3, #0]
 8001d72:	429a      	cmp	r2, r3
 8001d74:	d0bf      	beq.n	8001cf6 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8001d76:	2300      	movs	r3, #0
}
 8001d78:	0018      	movs	r0, r3
 8001d7a:	46bd      	mov	sp, r7
 8001d7c:	b004      	add	sp, #16
 8001d7e:	bd80      	pop	{r7, pc}

08001d80 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8001d80:	b580      	push	{r7, lr}
 8001d82:	b084      	sub	sp, #16
 8001d84:	af00      	add	r7, sp, #0
 8001d86:	60f8      	str	r0, [r7, #12]
 8001d88:	60b9      	str	r1, [r7, #8]
 8001d8a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8001d8c:	e032      	b.n	8001df4 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8001d8e:	687a      	ldr	r2, [r7, #4]
 8001d90:	68b9      	ldr	r1, [r7, #8]
 8001d92:	68fb      	ldr	r3, [r7, #12]
 8001d94:	0018      	movs	r0, r3
 8001d96:	f000 f87d 	bl	8001e94 <I2C_IsErrorOccurred>
 8001d9a:	1e03      	subs	r3, r0, #0
 8001d9c:	d001      	beq.n	8001da2 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8001d9e:	2301      	movs	r3, #1
 8001da0:	e030      	b.n	8001e04 <I2C_WaitOnTXISFlagUntilTimeout+0x84>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001da2:	68bb      	ldr	r3, [r7, #8]
 8001da4:	3301      	adds	r3, #1
 8001da6:	d025      	beq.n	8001df4 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001da8:	f7ff f99a 	bl	80010e0 <HAL_GetTick>
 8001dac:	0002      	movs	r2, r0
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	1ad3      	subs	r3, r2, r3
 8001db2:	68ba      	ldr	r2, [r7, #8]
 8001db4:	429a      	cmp	r2, r3
 8001db6:	d302      	bcc.n	8001dbe <I2C_WaitOnTXISFlagUntilTimeout+0x3e>
 8001db8:	68bb      	ldr	r3, [r7, #8]
 8001dba:	2b00      	cmp	r3, #0
 8001dbc:	d11a      	bne.n	8001df4 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8001dbe:	68fb      	ldr	r3, [r7, #12]
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	699b      	ldr	r3, [r3, #24]
 8001dc4:	2202      	movs	r2, #2
 8001dc6:	4013      	ands	r3, r2
 8001dc8:	2b02      	cmp	r3, #2
 8001dca:	d013      	beq.n	8001df4 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001dcc:	68fb      	ldr	r3, [r7, #12]
 8001dce:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001dd0:	2220      	movs	r2, #32
 8001dd2:	431a      	orrs	r2, r3
 8001dd4:	68fb      	ldr	r3, [r7, #12]
 8001dd6:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8001dd8:	68fb      	ldr	r3, [r7, #12]
 8001dda:	2241      	movs	r2, #65	@ 0x41
 8001ddc:	2120      	movs	r1, #32
 8001dde:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8001de0:	68fb      	ldr	r3, [r7, #12]
 8001de2:	2242      	movs	r2, #66	@ 0x42
 8001de4:	2100      	movs	r1, #0
 8001de6:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8001de8:	68fb      	ldr	r3, [r7, #12]
 8001dea:	2240      	movs	r2, #64	@ 0x40
 8001dec:	2100      	movs	r1, #0
 8001dee:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 8001df0:	2301      	movs	r3, #1
 8001df2:	e007      	b.n	8001e04 <I2C_WaitOnTXISFlagUntilTimeout+0x84>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8001df4:	68fb      	ldr	r3, [r7, #12]
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	699b      	ldr	r3, [r3, #24]
 8001dfa:	2202      	movs	r2, #2
 8001dfc:	4013      	ands	r3, r2
 8001dfe:	2b02      	cmp	r3, #2
 8001e00:	d1c5      	bne.n	8001d8e <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8001e02:	2300      	movs	r3, #0
}
 8001e04:	0018      	movs	r0, r3
 8001e06:	46bd      	mov	sp, r7
 8001e08:	b004      	add	sp, #16
 8001e0a:	bd80      	pop	{r7, pc}

08001e0c <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8001e0c:	b580      	push	{r7, lr}
 8001e0e:	b084      	sub	sp, #16
 8001e10:	af00      	add	r7, sp, #0
 8001e12:	60f8      	str	r0, [r7, #12]
 8001e14:	60b9      	str	r1, [r7, #8]
 8001e16:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001e18:	e02f      	b.n	8001e7a <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8001e1a:	687a      	ldr	r2, [r7, #4]
 8001e1c:	68b9      	ldr	r1, [r7, #8]
 8001e1e:	68fb      	ldr	r3, [r7, #12]
 8001e20:	0018      	movs	r0, r3
 8001e22:	f000 f837 	bl	8001e94 <I2C_IsErrorOccurred>
 8001e26:	1e03      	subs	r3, r0, #0
 8001e28:	d001      	beq.n	8001e2e <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8001e2a:	2301      	movs	r3, #1
 8001e2c:	e02d      	b.n	8001e8a <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001e2e:	f7ff f957 	bl	80010e0 <HAL_GetTick>
 8001e32:	0002      	movs	r2, r0
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	1ad3      	subs	r3, r2, r3
 8001e38:	68ba      	ldr	r2, [r7, #8]
 8001e3a:	429a      	cmp	r2, r3
 8001e3c:	d302      	bcc.n	8001e44 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8001e3e:	68bb      	ldr	r3, [r7, #8]
 8001e40:	2b00      	cmp	r3, #0
 8001e42:	d11a      	bne.n	8001e7a <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8001e44:	68fb      	ldr	r3, [r7, #12]
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	699b      	ldr	r3, [r3, #24]
 8001e4a:	2220      	movs	r2, #32
 8001e4c:	4013      	ands	r3, r2
 8001e4e:	2b20      	cmp	r3, #32
 8001e50:	d013      	beq.n	8001e7a <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001e52:	68fb      	ldr	r3, [r7, #12]
 8001e54:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001e56:	2220      	movs	r2, #32
 8001e58:	431a      	orrs	r2, r3
 8001e5a:	68fb      	ldr	r3, [r7, #12]
 8001e5c:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8001e5e:	68fb      	ldr	r3, [r7, #12]
 8001e60:	2241      	movs	r2, #65	@ 0x41
 8001e62:	2120      	movs	r1, #32
 8001e64:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001e66:	68fb      	ldr	r3, [r7, #12]
 8001e68:	2242      	movs	r2, #66	@ 0x42
 8001e6a:	2100      	movs	r1, #0
 8001e6c:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001e6e:	68fb      	ldr	r3, [r7, #12]
 8001e70:	2240      	movs	r2, #64	@ 0x40
 8001e72:	2100      	movs	r1, #0
 8001e74:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 8001e76:	2301      	movs	r3, #1
 8001e78:	e007      	b.n	8001e8a <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001e7a:	68fb      	ldr	r3, [r7, #12]
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	699b      	ldr	r3, [r3, #24]
 8001e80:	2220      	movs	r2, #32
 8001e82:	4013      	ands	r3, r2
 8001e84:	2b20      	cmp	r3, #32
 8001e86:	d1c8      	bne.n	8001e1a <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8001e88:	2300      	movs	r3, #0
}
 8001e8a:	0018      	movs	r0, r3
 8001e8c:	46bd      	mov	sp, r7
 8001e8e:	b004      	add	sp, #16
 8001e90:	bd80      	pop	{r7, pc}
	...

08001e94 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001e94:	b580      	push	{r7, lr}
 8001e96:	b08a      	sub	sp, #40	@ 0x28
 8001e98:	af00      	add	r7, sp, #0
 8001e9a:	60f8      	str	r0, [r7, #12]
 8001e9c:	60b9      	str	r1, [r7, #8]
 8001e9e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001ea0:	2327      	movs	r3, #39	@ 0x27
 8001ea2:	18fb      	adds	r3, r7, r3
 8001ea4:	2200      	movs	r2, #0
 8001ea6:	701a      	strb	r2, [r3, #0]
  uint32_t itflag   = hi2c->Instance->ISR;
 8001ea8:	68fb      	ldr	r3, [r7, #12]
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	699b      	ldr	r3, [r3, #24]
 8001eae:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8001eb0:	2300      	movs	r3, #0
 8001eb2:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8001eb8:	69bb      	ldr	r3, [r7, #24]
 8001eba:	2210      	movs	r2, #16
 8001ebc:	4013      	ands	r3, r2
 8001ebe:	d100      	bne.n	8001ec2 <I2C_IsErrorOccurred+0x2e>
 8001ec0:	e079      	b.n	8001fb6 <I2C_IsErrorOccurred+0x122>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001ec2:	68fb      	ldr	r3, [r7, #12]
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	2210      	movs	r2, #16
 8001ec8:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8001eca:	e057      	b.n	8001f7c <I2C_IsErrorOccurred+0xe8>
 8001ecc:	2227      	movs	r2, #39	@ 0x27
 8001ece:	18bb      	adds	r3, r7, r2
 8001ed0:	18ba      	adds	r2, r7, r2
 8001ed2:	7812      	ldrb	r2, [r2, #0]
 8001ed4:	701a      	strb	r2, [r3, #0]
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8001ed6:	68bb      	ldr	r3, [r7, #8]
 8001ed8:	3301      	adds	r3, #1
 8001eda:	d04f      	beq.n	8001f7c <I2C_IsErrorOccurred+0xe8>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8001edc:	f7ff f900 	bl	80010e0 <HAL_GetTick>
 8001ee0:	0002      	movs	r2, r0
 8001ee2:	69fb      	ldr	r3, [r7, #28]
 8001ee4:	1ad3      	subs	r3, r2, r3
 8001ee6:	68ba      	ldr	r2, [r7, #8]
 8001ee8:	429a      	cmp	r2, r3
 8001eea:	d302      	bcc.n	8001ef2 <I2C_IsErrorOccurred+0x5e>
 8001eec:	68bb      	ldr	r3, [r7, #8]
 8001eee:	2b00      	cmp	r3, #0
 8001ef0:	d144      	bne.n	8001f7c <I2C_IsErrorOccurred+0xe8>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8001ef2:	68fb      	ldr	r3, [r7, #12]
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	685a      	ldr	r2, [r3, #4]
 8001ef8:	2380      	movs	r3, #128	@ 0x80
 8001efa:	01db      	lsls	r3, r3, #7
 8001efc:	4013      	ands	r3, r2
 8001efe:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8001f00:	2013      	movs	r0, #19
 8001f02:	183b      	adds	r3, r7, r0
 8001f04:	68fa      	ldr	r2, [r7, #12]
 8001f06:	2142      	movs	r1, #66	@ 0x42
 8001f08:	5c52      	ldrb	r2, [r2, r1]
 8001f0a:	701a      	strb	r2, [r3, #0]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8001f0c:	68fb      	ldr	r3, [r7, #12]
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	699a      	ldr	r2, [r3, #24]
 8001f12:	2380      	movs	r3, #128	@ 0x80
 8001f14:	021b      	lsls	r3, r3, #8
 8001f16:	401a      	ands	r2, r3
 8001f18:	2380      	movs	r3, #128	@ 0x80
 8001f1a:	021b      	lsls	r3, r3, #8
 8001f1c:	429a      	cmp	r2, r3
 8001f1e:	d126      	bne.n	8001f6e <I2C_IsErrorOccurred+0xda>
 8001f20:	697a      	ldr	r2, [r7, #20]
 8001f22:	2380      	movs	r3, #128	@ 0x80
 8001f24:	01db      	lsls	r3, r3, #7
 8001f26:	429a      	cmp	r2, r3
 8001f28:	d021      	beq.n	8001f6e <I2C_IsErrorOccurred+0xda>
              (tmp1 != I2C_CR2_STOP) && \
 8001f2a:	183b      	adds	r3, r7, r0
 8001f2c:	781b      	ldrb	r3, [r3, #0]
 8001f2e:	2b20      	cmp	r3, #32
 8001f30:	d01d      	beq.n	8001f6e <I2C_IsErrorOccurred+0xda>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8001f32:	68fb      	ldr	r3, [r7, #12]
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	685a      	ldr	r2, [r3, #4]
 8001f38:	68fb      	ldr	r3, [r7, #12]
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	2180      	movs	r1, #128	@ 0x80
 8001f3e:	01c9      	lsls	r1, r1, #7
 8001f40:	430a      	orrs	r2, r1
 8001f42:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8001f44:	f7ff f8cc 	bl	80010e0 <HAL_GetTick>
 8001f48:	0003      	movs	r3, r0
 8001f4a:	61fb      	str	r3, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001f4c:	e00f      	b.n	8001f6e <I2C_IsErrorOccurred+0xda>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8001f4e:	f7ff f8c7 	bl	80010e0 <HAL_GetTick>
 8001f52:	0002      	movs	r2, r0
 8001f54:	69fb      	ldr	r3, [r7, #28]
 8001f56:	1ad3      	subs	r3, r2, r3
 8001f58:	2b19      	cmp	r3, #25
 8001f5a:	d908      	bls.n	8001f6e <I2C_IsErrorOccurred+0xda>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8001f5c:	6a3b      	ldr	r3, [r7, #32]
 8001f5e:	2220      	movs	r2, #32
 8001f60:	4313      	orrs	r3, r2
 8001f62:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8001f64:	2327      	movs	r3, #39	@ 0x27
 8001f66:	18fb      	adds	r3, r7, r3
 8001f68:	2201      	movs	r2, #1
 8001f6a:	701a      	strb	r2, [r3, #0]

              break;
 8001f6c:	e006      	b.n	8001f7c <I2C_IsErrorOccurred+0xe8>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001f6e:	68fb      	ldr	r3, [r7, #12]
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	699b      	ldr	r3, [r3, #24]
 8001f74:	2220      	movs	r2, #32
 8001f76:	4013      	ands	r3, r2
 8001f78:	2b20      	cmp	r3, #32
 8001f7a:	d1e8      	bne.n	8001f4e <I2C_IsErrorOccurred+0xba>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8001f7c:	68fb      	ldr	r3, [r7, #12]
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	699b      	ldr	r3, [r3, #24]
 8001f82:	2220      	movs	r2, #32
 8001f84:	4013      	ands	r3, r2
 8001f86:	2b20      	cmp	r3, #32
 8001f88:	d004      	beq.n	8001f94 <I2C_IsErrorOccurred+0x100>
 8001f8a:	2327      	movs	r3, #39	@ 0x27
 8001f8c:	18fb      	adds	r3, r7, r3
 8001f8e:	781b      	ldrb	r3, [r3, #0]
 8001f90:	2b00      	cmp	r3, #0
 8001f92:	d09b      	beq.n	8001ecc <I2C_IsErrorOccurred+0x38>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8001f94:	2327      	movs	r3, #39	@ 0x27
 8001f96:	18fb      	adds	r3, r7, r3
 8001f98:	781b      	ldrb	r3, [r3, #0]
 8001f9a:	2b00      	cmp	r3, #0
 8001f9c:	d103      	bne.n	8001fa6 <I2C_IsErrorOccurred+0x112>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001f9e:	68fb      	ldr	r3, [r7, #12]
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	2220      	movs	r2, #32
 8001fa4:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8001fa6:	6a3b      	ldr	r3, [r7, #32]
 8001fa8:	2204      	movs	r2, #4
 8001faa:	4313      	orrs	r3, r2
 8001fac:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8001fae:	2327      	movs	r3, #39	@ 0x27
 8001fb0:	18fb      	adds	r3, r7, r3
 8001fb2:	2201      	movs	r2, #1
 8001fb4:	701a      	strb	r2, [r3, #0]
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8001fb6:	68fb      	ldr	r3, [r7, #12]
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	699b      	ldr	r3, [r3, #24]
 8001fbc:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8001fbe:	69ba      	ldr	r2, [r7, #24]
 8001fc0:	2380      	movs	r3, #128	@ 0x80
 8001fc2:	005b      	lsls	r3, r3, #1
 8001fc4:	4013      	ands	r3, r2
 8001fc6:	d00c      	beq.n	8001fe2 <I2C_IsErrorOccurred+0x14e>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8001fc8:	6a3b      	ldr	r3, [r7, #32]
 8001fca:	2201      	movs	r2, #1
 8001fcc:	4313      	orrs	r3, r2
 8001fce:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8001fd0:	68fb      	ldr	r3, [r7, #12]
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	2280      	movs	r2, #128	@ 0x80
 8001fd6:	0052      	lsls	r2, r2, #1
 8001fd8:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8001fda:	2327      	movs	r3, #39	@ 0x27
 8001fdc:	18fb      	adds	r3, r7, r3
 8001fde:	2201      	movs	r2, #1
 8001fe0:	701a      	strb	r2, [r3, #0]
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8001fe2:	69ba      	ldr	r2, [r7, #24]
 8001fe4:	2380      	movs	r3, #128	@ 0x80
 8001fe6:	00db      	lsls	r3, r3, #3
 8001fe8:	4013      	ands	r3, r2
 8001fea:	d00c      	beq.n	8002006 <I2C_IsErrorOccurred+0x172>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8001fec:	6a3b      	ldr	r3, [r7, #32]
 8001fee:	2208      	movs	r2, #8
 8001ff0:	4313      	orrs	r3, r2
 8001ff2:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8001ff4:	68fb      	ldr	r3, [r7, #12]
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	2280      	movs	r2, #128	@ 0x80
 8001ffa:	00d2      	lsls	r2, r2, #3
 8001ffc:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8001ffe:	2327      	movs	r3, #39	@ 0x27
 8002000:	18fb      	adds	r3, r7, r3
 8002002:	2201      	movs	r2, #1
 8002004:	701a      	strb	r2, [r3, #0]
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8002006:	69ba      	ldr	r2, [r7, #24]
 8002008:	2380      	movs	r3, #128	@ 0x80
 800200a:	009b      	lsls	r3, r3, #2
 800200c:	4013      	ands	r3, r2
 800200e:	d00c      	beq.n	800202a <I2C_IsErrorOccurred+0x196>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8002010:	6a3b      	ldr	r3, [r7, #32]
 8002012:	2202      	movs	r2, #2
 8002014:	4313      	orrs	r3, r2
 8002016:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8002018:	68fb      	ldr	r3, [r7, #12]
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	2280      	movs	r2, #128	@ 0x80
 800201e:	0092      	lsls	r2, r2, #2
 8002020:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002022:	2327      	movs	r3, #39	@ 0x27
 8002024:	18fb      	adds	r3, r7, r3
 8002026:	2201      	movs	r2, #1
 8002028:	701a      	strb	r2, [r3, #0]
  }

  if (status != HAL_OK)
 800202a:	2327      	movs	r3, #39	@ 0x27
 800202c:	18fb      	adds	r3, r7, r3
 800202e:	781b      	ldrb	r3, [r3, #0]
 8002030:	2b00      	cmp	r3, #0
 8002032:	d01d      	beq.n	8002070 <I2C_IsErrorOccurred+0x1dc>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8002034:	68fb      	ldr	r3, [r7, #12]
 8002036:	0018      	movs	r0, r3
 8002038:	f7ff fe32 	bl	8001ca0 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800203c:	68fb      	ldr	r3, [r7, #12]
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	685a      	ldr	r2, [r3, #4]
 8002042:	68fb      	ldr	r3, [r7, #12]
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	490e      	ldr	r1, [pc, #56]	@ (8002080 <I2C_IsErrorOccurred+0x1ec>)
 8002048:	400a      	ands	r2, r1
 800204a:	605a      	str	r2, [r3, #4]

    hi2c->ErrorCode |= error_code;
 800204c:	68fb      	ldr	r3, [r7, #12]
 800204e:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8002050:	6a3b      	ldr	r3, [r7, #32]
 8002052:	431a      	orrs	r2, r3
 8002054:	68fb      	ldr	r3, [r7, #12]
 8002056:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8002058:	68fb      	ldr	r3, [r7, #12]
 800205a:	2241      	movs	r2, #65	@ 0x41
 800205c:	2120      	movs	r1, #32
 800205e:	5499      	strb	r1, [r3, r2]
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002060:	68fb      	ldr	r3, [r7, #12]
 8002062:	2242      	movs	r2, #66	@ 0x42
 8002064:	2100      	movs	r1, #0
 8002066:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002068:	68fb      	ldr	r3, [r7, #12]
 800206a:	2240      	movs	r2, #64	@ 0x40
 800206c:	2100      	movs	r1, #0
 800206e:	5499      	strb	r1, [r3, r2]
  }

  return status;
 8002070:	2327      	movs	r3, #39	@ 0x27
 8002072:	18fb      	adds	r3, r7, r3
 8002074:	781b      	ldrb	r3, [r3, #0]
}
 8002076:	0018      	movs	r0, r3
 8002078:	46bd      	mov	sp, r7
 800207a:	b00a      	add	sp, #40	@ 0x28
 800207c:	bd80      	pop	{r7, pc}
 800207e:	46c0      	nop			@ (mov r8, r8)
 8002080:	fe00e800 	.word	0xfe00e800

08002084 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8002084:	b590      	push	{r4, r7, lr}
 8002086:	b087      	sub	sp, #28
 8002088:	af00      	add	r7, sp, #0
 800208a:	60f8      	str	r0, [r7, #12]
 800208c:	0008      	movs	r0, r1
 800208e:	0011      	movs	r1, r2
 8002090:	607b      	str	r3, [r7, #4]
 8002092:	240a      	movs	r4, #10
 8002094:	193b      	adds	r3, r7, r4
 8002096:	1c02      	adds	r2, r0, #0
 8002098:	801a      	strh	r2, [r3, #0]
 800209a:	2009      	movs	r0, #9
 800209c:	183b      	adds	r3, r7, r0
 800209e:	1c0a      	adds	r2, r1, #0
 80020a0:	701a      	strb	r2, [r3, #0]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80020a2:	193b      	adds	r3, r7, r4
 80020a4:	881b      	ldrh	r3, [r3, #0]
 80020a6:	059b      	lsls	r3, r3, #22
 80020a8:	0d9a      	lsrs	r2, r3, #22
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80020aa:	183b      	adds	r3, r7, r0
 80020ac:	781b      	ldrb	r3, [r3, #0]
 80020ae:	0419      	lsls	r1, r3, #16
 80020b0:	23ff      	movs	r3, #255	@ 0xff
 80020b2:	041b      	lsls	r3, r3, #16
 80020b4:	400b      	ands	r3, r1
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80020b6:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80020bc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80020be:	4313      	orrs	r3, r2
 80020c0:	005b      	lsls	r3, r3, #1
 80020c2:	085b      	lsrs	r3, r3, #1
 80020c4:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 80020c6:	68fb      	ldr	r3, [r7, #12]
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	685b      	ldr	r3, [r3, #4]
 80020cc:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80020ce:	0d51      	lsrs	r1, r2, #21
 80020d0:	2280      	movs	r2, #128	@ 0x80
 80020d2:	00d2      	lsls	r2, r2, #3
 80020d4:	400a      	ands	r2, r1
 80020d6:	4907      	ldr	r1, [pc, #28]	@ (80020f4 <I2C_TransferConfig+0x70>)
 80020d8:	430a      	orrs	r2, r1
 80020da:	43d2      	mvns	r2, r2
 80020dc:	401a      	ands	r2, r3
 80020de:	0011      	movs	r1, r2
 80020e0:	68fb      	ldr	r3, [r7, #12]
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	697a      	ldr	r2, [r7, #20]
 80020e6:	430a      	orrs	r2, r1
 80020e8:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 80020ea:	46c0      	nop			@ (mov r8, r8)
 80020ec:	46bd      	mov	sp, r7
 80020ee:	b007      	add	sp, #28
 80020f0:	bd90      	pop	{r4, r7, pc}
 80020f2:	46c0      	nop			@ (mov r8, r8)
 80020f4:	03ff63ff 	.word	0x03ff63ff

080020f8 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80020f8:	b580      	push	{r7, lr}
 80020fa:	b082      	sub	sp, #8
 80020fc:	af00      	add	r7, sp, #0
 80020fe:	6078      	str	r0, [r7, #4]
 8002100:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	2241      	movs	r2, #65	@ 0x41
 8002106:	5c9b      	ldrb	r3, [r3, r2]
 8002108:	b2db      	uxtb	r3, r3
 800210a:	2b20      	cmp	r3, #32
 800210c:	d138      	bne.n	8002180 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	2240      	movs	r2, #64	@ 0x40
 8002112:	5c9b      	ldrb	r3, [r3, r2]
 8002114:	2b01      	cmp	r3, #1
 8002116:	d101      	bne.n	800211c <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8002118:	2302      	movs	r3, #2
 800211a:	e032      	b.n	8002182 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	2240      	movs	r2, #64	@ 0x40
 8002120:	2101      	movs	r1, #1
 8002122:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	2241      	movs	r2, #65	@ 0x41
 8002128:	2124      	movs	r1, #36	@ 0x24
 800212a:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	681a      	ldr	r2, [r3, #0]
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	2101      	movs	r1, #1
 8002138:	438a      	bics	r2, r1
 800213a:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	681a      	ldr	r2, [r3, #0]
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	4911      	ldr	r1, [pc, #68]	@ (800218c <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 8002148:	400a      	ands	r2, r1
 800214a:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	6819      	ldr	r1, [r3, #0]
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	683a      	ldr	r2, [r7, #0]
 8002158:	430a      	orrs	r2, r1
 800215a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	681a      	ldr	r2, [r3, #0]
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	2101      	movs	r1, #1
 8002168:	430a      	orrs	r2, r1
 800216a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	2241      	movs	r2, #65	@ 0x41
 8002170:	2120      	movs	r1, #32
 8002172:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	2240      	movs	r2, #64	@ 0x40
 8002178:	2100      	movs	r1, #0
 800217a:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 800217c:	2300      	movs	r3, #0
 800217e:	e000      	b.n	8002182 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8002180:	2302      	movs	r3, #2
  }
}
 8002182:	0018      	movs	r0, r3
 8002184:	46bd      	mov	sp, r7
 8002186:	b002      	add	sp, #8
 8002188:	bd80      	pop	{r7, pc}
 800218a:	46c0      	nop			@ (mov r8, r8)
 800218c:	ffffefff 	.word	0xffffefff

08002190 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8002190:	b580      	push	{r7, lr}
 8002192:	b084      	sub	sp, #16
 8002194:	af00      	add	r7, sp, #0
 8002196:	6078      	str	r0, [r7, #4]
 8002198:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	2241      	movs	r2, #65	@ 0x41
 800219e:	5c9b      	ldrb	r3, [r3, r2]
 80021a0:	b2db      	uxtb	r3, r3
 80021a2:	2b20      	cmp	r3, #32
 80021a4:	d139      	bne.n	800221a <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	2240      	movs	r2, #64	@ 0x40
 80021aa:	5c9b      	ldrb	r3, [r3, r2]
 80021ac:	2b01      	cmp	r3, #1
 80021ae:	d101      	bne.n	80021b4 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80021b0:	2302      	movs	r3, #2
 80021b2:	e033      	b.n	800221c <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	2240      	movs	r2, #64	@ 0x40
 80021b8:	2101      	movs	r1, #1
 80021ba:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	2241      	movs	r2, #65	@ 0x41
 80021c0:	2124      	movs	r1, #36	@ 0x24
 80021c2:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	681a      	ldr	r2, [r3, #0]
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	2101      	movs	r1, #1
 80021d0:	438a      	bics	r2, r1
 80021d2:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80021dc:	68fb      	ldr	r3, [r7, #12]
 80021de:	4a11      	ldr	r2, [pc, #68]	@ (8002224 <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 80021e0:	4013      	ands	r3, r2
 80021e2:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80021e4:	683b      	ldr	r3, [r7, #0]
 80021e6:	021b      	lsls	r3, r3, #8
 80021e8:	68fa      	ldr	r2, [r7, #12]
 80021ea:	4313      	orrs	r3, r2
 80021ec:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	68fa      	ldr	r2, [r7, #12]
 80021f4:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	681a      	ldr	r2, [r3, #0]
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	2101      	movs	r1, #1
 8002202:	430a      	orrs	r2, r1
 8002204:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	2241      	movs	r2, #65	@ 0x41
 800220a:	2120      	movs	r1, #32
 800220c:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	2240      	movs	r2, #64	@ 0x40
 8002212:	2100      	movs	r1, #0
 8002214:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8002216:	2300      	movs	r3, #0
 8002218:	e000      	b.n	800221c <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800221a:	2302      	movs	r3, #2
  }
}
 800221c:	0018      	movs	r0, r3
 800221e:	46bd      	mov	sp, r7
 8002220:	b004      	add	sp, #16
 8002222:	bd80      	pop	{r7, pc}
 8002224:	fffff0ff 	.word	0xfffff0ff

08002228 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002228:	b5b0      	push	{r4, r5, r7, lr}
 800222a:	b08a      	sub	sp, #40	@ 0x28
 800222c:	af00      	add	r7, sp, #0
 800222e:	6078      	str	r0, [r7, #4]
  uint32_t hsi_state;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	2b00      	cmp	r3, #0
 8002234:	d102      	bne.n	800223c <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8002236:	2301      	movs	r3, #1
 8002238:	f000 fbaf 	bl	800299a <HAL_RCC_OscConfig+0x772>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800223c:	4bcf      	ldr	r3, [pc, #828]	@ (800257c <HAL_RCC_OscConfig+0x354>)
 800223e:	68db      	ldr	r3, [r3, #12]
 8002240:	220c      	movs	r2, #12
 8002242:	4013      	ands	r3, r2
 8002244:	623b      	str	r3, [r7, #32]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002246:	4bcd      	ldr	r3, [pc, #820]	@ (800257c <HAL_RCC_OscConfig+0x354>)
 8002248:	68da      	ldr	r2, [r3, #12]
 800224a:	2380      	movs	r3, #128	@ 0x80
 800224c:	025b      	lsls	r3, r3, #9
 800224e:	4013      	ands	r3, r2
 8002250:	61fb      	str	r3, [r7, #28]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	2201      	movs	r2, #1
 8002258:	4013      	ands	r3, r2
 800225a:	d100      	bne.n	800225e <HAL_RCC_OscConfig+0x36>
 800225c:	e07e      	b.n	800235c <HAL_RCC_OscConfig+0x134>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 800225e:	6a3b      	ldr	r3, [r7, #32]
 8002260:	2b08      	cmp	r3, #8
 8002262:	d007      	beq.n	8002274 <HAL_RCC_OscConfig+0x4c>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8002264:	6a3b      	ldr	r3, [r7, #32]
 8002266:	2b0c      	cmp	r3, #12
 8002268:	d112      	bne.n	8002290 <HAL_RCC_OscConfig+0x68>
 800226a:	69fa      	ldr	r2, [r7, #28]
 800226c:	2380      	movs	r3, #128	@ 0x80
 800226e:	025b      	lsls	r3, r3, #9
 8002270:	429a      	cmp	r2, r3
 8002272:	d10d      	bne.n	8002290 <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002274:	4bc1      	ldr	r3, [pc, #772]	@ (800257c <HAL_RCC_OscConfig+0x354>)
 8002276:	681a      	ldr	r2, [r3, #0]
 8002278:	2380      	movs	r3, #128	@ 0x80
 800227a:	029b      	lsls	r3, r3, #10
 800227c:	4013      	ands	r3, r2
 800227e:	d100      	bne.n	8002282 <HAL_RCC_OscConfig+0x5a>
 8002280:	e06b      	b.n	800235a <HAL_RCC_OscConfig+0x132>
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	685b      	ldr	r3, [r3, #4]
 8002286:	2b00      	cmp	r3, #0
 8002288:	d167      	bne.n	800235a <HAL_RCC_OscConfig+0x132>
      {
        return HAL_ERROR;
 800228a:	2301      	movs	r3, #1
 800228c:	f000 fb85 	bl	800299a <HAL_RCC_OscConfig+0x772>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	685a      	ldr	r2, [r3, #4]
 8002294:	2380      	movs	r3, #128	@ 0x80
 8002296:	025b      	lsls	r3, r3, #9
 8002298:	429a      	cmp	r2, r3
 800229a:	d107      	bne.n	80022ac <HAL_RCC_OscConfig+0x84>
 800229c:	4bb7      	ldr	r3, [pc, #732]	@ (800257c <HAL_RCC_OscConfig+0x354>)
 800229e:	681a      	ldr	r2, [r3, #0]
 80022a0:	4bb6      	ldr	r3, [pc, #728]	@ (800257c <HAL_RCC_OscConfig+0x354>)
 80022a2:	2180      	movs	r1, #128	@ 0x80
 80022a4:	0249      	lsls	r1, r1, #9
 80022a6:	430a      	orrs	r2, r1
 80022a8:	601a      	str	r2, [r3, #0]
 80022aa:	e027      	b.n	80022fc <HAL_RCC_OscConfig+0xd4>
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	685a      	ldr	r2, [r3, #4]
 80022b0:	23a0      	movs	r3, #160	@ 0xa0
 80022b2:	02db      	lsls	r3, r3, #11
 80022b4:	429a      	cmp	r2, r3
 80022b6:	d10e      	bne.n	80022d6 <HAL_RCC_OscConfig+0xae>
 80022b8:	4bb0      	ldr	r3, [pc, #704]	@ (800257c <HAL_RCC_OscConfig+0x354>)
 80022ba:	681a      	ldr	r2, [r3, #0]
 80022bc:	4baf      	ldr	r3, [pc, #700]	@ (800257c <HAL_RCC_OscConfig+0x354>)
 80022be:	2180      	movs	r1, #128	@ 0x80
 80022c0:	02c9      	lsls	r1, r1, #11
 80022c2:	430a      	orrs	r2, r1
 80022c4:	601a      	str	r2, [r3, #0]
 80022c6:	4bad      	ldr	r3, [pc, #692]	@ (800257c <HAL_RCC_OscConfig+0x354>)
 80022c8:	681a      	ldr	r2, [r3, #0]
 80022ca:	4bac      	ldr	r3, [pc, #688]	@ (800257c <HAL_RCC_OscConfig+0x354>)
 80022cc:	2180      	movs	r1, #128	@ 0x80
 80022ce:	0249      	lsls	r1, r1, #9
 80022d0:	430a      	orrs	r2, r1
 80022d2:	601a      	str	r2, [r3, #0]
 80022d4:	e012      	b.n	80022fc <HAL_RCC_OscConfig+0xd4>
 80022d6:	4ba9      	ldr	r3, [pc, #676]	@ (800257c <HAL_RCC_OscConfig+0x354>)
 80022d8:	681a      	ldr	r2, [r3, #0]
 80022da:	4ba8      	ldr	r3, [pc, #672]	@ (800257c <HAL_RCC_OscConfig+0x354>)
 80022dc:	49a8      	ldr	r1, [pc, #672]	@ (8002580 <HAL_RCC_OscConfig+0x358>)
 80022de:	400a      	ands	r2, r1
 80022e0:	601a      	str	r2, [r3, #0]
 80022e2:	4ba6      	ldr	r3, [pc, #664]	@ (800257c <HAL_RCC_OscConfig+0x354>)
 80022e4:	681a      	ldr	r2, [r3, #0]
 80022e6:	2380      	movs	r3, #128	@ 0x80
 80022e8:	025b      	lsls	r3, r3, #9
 80022ea:	4013      	ands	r3, r2
 80022ec:	60fb      	str	r3, [r7, #12]
 80022ee:	68fb      	ldr	r3, [r7, #12]
 80022f0:	4ba2      	ldr	r3, [pc, #648]	@ (800257c <HAL_RCC_OscConfig+0x354>)
 80022f2:	681a      	ldr	r2, [r3, #0]
 80022f4:	4ba1      	ldr	r3, [pc, #644]	@ (800257c <HAL_RCC_OscConfig+0x354>)
 80022f6:	49a3      	ldr	r1, [pc, #652]	@ (8002584 <HAL_RCC_OscConfig+0x35c>)
 80022f8:	400a      	ands	r2, r1
 80022fa:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	685b      	ldr	r3, [r3, #4]
 8002300:	2b00      	cmp	r3, #0
 8002302:	d015      	beq.n	8002330 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002304:	f7fe feec 	bl	80010e0 <HAL_GetTick>
 8002308:	0003      	movs	r3, r0
 800230a:	61bb      	str	r3, [r7, #24]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800230c:	e009      	b.n	8002322 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800230e:	f7fe fee7 	bl	80010e0 <HAL_GetTick>
 8002312:	0002      	movs	r2, r0
 8002314:	69bb      	ldr	r3, [r7, #24]
 8002316:	1ad3      	subs	r3, r2, r3
 8002318:	2b64      	cmp	r3, #100	@ 0x64
 800231a:	d902      	bls.n	8002322 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800231c:	2303      	movs	r3, #3
 800231e:	f000 fb3c 	bl	800299a <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002322:	4b96      	ldr	r3, [pc, #600]	@ (800257c <HAL_RCC_OscConfig+0x354>)
 8002324:	681a      	ldr	r2, [r3, #0]
 8002326:	2380      	movs	r3, #128	@ 0x80
 8002328:	029b      	lsls	r3, r3, #10
 800232a:	4013      	ands	r3, r2
 800232c:	d0ef      	beq.n	800230e <HAL_RCC_OscConfig+0xe6>
 800232e:	e015      	b.n	800235c <HAL_RCC_OscConfig+0x134>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002330:	f7fe fed6 	bl	80010e0 <HAL_GetTick>
 8002334:	0003      	movs	r3, r0
 8002336:	61bb      	str	r3, [r7, #24]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8002338:	e008      	b.n	800234c <HAL_RCC_OscConfig+0x124>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800233a:	f7fe fed1 	bl	80010e0 <HAL_GetTick>
 800233e:	0002      	movs	r2, r0
 8002340:	69bb      	ldr	r3, [r7, #24]
 8002342:	1ad3      	subs	r3, r2, r3
 8002344:	2b64      	cmp	r3, #100	@ 0x64
 8002346:	d901      	bls.n	800234c <HAL_RCC_OscConfig+0x124>
          {
            return HAL_TIMEOUT;
 8002348:	2303      	movs	r3, #3
 800234a:	e326      	b.n	800299a <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800234c:	4b8b      	ldr	r3, [pc, #556]	@ (800257c <HAL_RCC_OscConfig+0x354>)
 800234e:	681a      	ldr	r2, [r3, #0]
 8002350:	2380      	movs	r3, #128	@ 0x80
 8002352:	029b      	lsls	r3, r3, #10
 8002354:	4013      	ands	r3, r2
 8002356:	d1f0      	bne.n	800233a <HAL_RCC_OscConfig+0x112>
 8002358:	e000      	b.n	800235c <HAL_RCC_OscConfig+0x134>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800235a:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	2202      	movs	r2, #2
 8002362:	4013      	ands	r3, r2
 8002364:	d100      	bne.n	8002368 <HAL_RCC_OscConfig+0x140>
 8002366:	e08b      	b.n	8002480 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    hsi_state = RCC_OscInitStruct->HSIState;
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	68db      	ldr	r3, [r3, #12]
 800236c:	617b      	str	r3, [r7, #20]
      hsi_state &= ~RCC_CR_HSIOUTEN;
    }
#endif

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 800236e:	6a3b      	ldr	r3, [r7, #32]
 8002370:	2b04      	cmp	r3, #4
 8002372:	d005      	beq.n	8002380 <HAL_RCC_OscConfig+0x158>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8002374:	6a3b      	ldr	r3, [r7, #32]
 8002376:	2b0c      	cmp	r3, #12
 8002378:	d13e      	bne.n	80023f8 <HAL_RCC_OscConfig+0x1d0>
 800237a:	69fb      	ldr	r3, [r7, #28]
 800237c:	2b00      	cmp	r3, #0
 800237e:	d13b      	bne.n	80023f8 <HAL_RCC_OscConfig+0x1d0>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (hsi_state == RCC_HSI_OFF))
 8002380:	4b7e      	ldr	r3, [pc, #504]	@ (800257c <HAL_RCC_OscConfig+0x354>)
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	2204      	movs	r2, #4
 8002386:	4013      	ands	r3, r2
 8002388:	d004      	beq.n	8002394 <HAL_RCC_OscConfig+0x16c>
 800238a:	697b      	ldr	r3, [r7, #20]
 800238c:	2b00      	cmp	r3, #0
 800238e:	d101      	bne.n	8002394 <HAL_RCC_OscConfig+0x16c>
      {
        return HAL_ERROR;
 8002390:	2301      	movs	r3, #1
 8002392:	e302      	b.n	800299a <HAL_RCC_OscConfig+0x772>
      }
      /* Otherwise, just the calibration and HSI or HSIdiv4 are allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002394:	4b79      	ldr	r3, [pc, #484]	@ (800257c <HAL_RCC_OscConfig+0x354>)
 8002396:	685b      	ldr	r3, [r3, #4]
 8002398:	4a7b      	ldr	r2, [pc, #492]	@ (8002588 <HAL_RCC_OscConfig+0x360>)
 800239a:	4013      	ands	r3, r2
 800239c:	0019      	movs	r1, r3
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	691b      	ldr	r3, [r3, #16]
 80023a2:	021a      	lsls	r2, r3, #8
 80023a4:	4b75      	ldr	r3, [pc, #468]	@ (800257c <HAL_RCC_OscConfig+0x354>)
 80023a6:	430a      	orrs	r2, r1
 80023a8:	605a      	str	r2, [r3, #4]

        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 80023aa:	4b74      	ldr	r3, [pc, #464]	@ (800257c <HAL_RCC_OscConfig+0x354>)
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	2209      	movs	r2, #9
 80023b0:	4393      	bics	r3, r2
 80023b2:	0019      	movs	r1, r3
 80023b4:	4b71      	ldr	r3, [pc, #452]	@ (800257c <HAL_RCC_OscConfig+0x354>)
 80023b6:	697a      	ldr	r2, [r7, #20]
 80023b8:	430a      	orrs	r2, r1
 80023ba:	601a      	str	r2, [r3, #0]
      }

      /* Update the SystemCoreClock global variable */
      SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80023bc:	f000 fc40 	bl	8002c40 <HAL_RCC_GetSysClockFreq>
 80023c0:	0001      	movs	r1, r0
 80023c2:	4b6e      	ldr	r3, [pc, #440]	@ (800257c <HAL_RCC_OscConfig+0x354>)
 80023c4:	68db      	ldr	r3, [r3, #12]
 80023c6:	091b      	lsrs	r3, r3, #4
 80023c8:	220f      	movs	r2, #15
 80023ca:	4013      	ands	r3, r2
 80023cc:	4a6f      	ldr	r2, [pc, #444]	@ (800258c <HAL_RCC_OscConfig+0x364>)
 80023ce:	5cd3      	ldrb	r3, [r2, r3]
 80023d0:	000a      	movs	r2, r1
 80023d2:	40da      	lsrs	r2, r3
 80023d4:	4b6e      	ldr	r3, [pc, #440]	@ (8002590 <HAL_RCC_OscConfig+0x368>)
 80023d6:	601a      	str	r2, [r3, #0]

      /* Configure the source of time base considering new system clocks settings*/
      status = HAL_InitTick (uwTickPrio);
 80023d8:	4b6e      	ldr	r3, [pc, #440]	@ (8002594 <HAL_RCC_OscConfig+0x36c>)
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	2513      	movs	r5, #19
 80023de:	197c      	adds	r4, r7, r5
 80023e0:	0018      	movs	r0, r3
 80023e2:	f7fe fe37 	bl	8001054 <HAL_InitTick>
 80023e6:	0003      	movs	r3, r0
 80023e8:	7023      	strb	r3, [r4, #0]
      if(status != HAL_OK)
 80023ea:	197b      	adds	r3, r7, r5
 80023ec:	781b      	ldrb	r3, [r3, #0]
 80023ee:	2b00      	cmp	r3, #0
 80023f0:	d046      	beq.n	8002480 <HAL_RCC_OscConfig+0x258>
      {
        return status;
 80023f2:	197b      	adds	r3, r7, r5
 80023f4:	781b      	ldrb	r3, [r3, #0]
 80023f6:	e2d0      	b.n	800299a <HAL_RCC_OscConfig+0x772>
      }
    }
    else
    {
      /* Check the HSI State */
      if(hsi_state != RCC_HSI_OFF)
 80023f8:	697b      	ldr	r3, [r7, #20]
 80023fa:	2b00      	cmp	r3, #0
 80023fc:	d027      	beq.n	800244e <HAL_RCC_OscConfig+0x226>
      {
        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 80023fe:	4b5f      	ldr	r3, [pc, #380]	@ (800257c <HAL_RCC_OscConfig+0x354>)
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	2209      	movs	r2, #9
 8002404:	4393      	bics	r3, r2
 8002406:	0019      	movs	r1, r3
 8002408:	4b5c      	ldr	r3, [pc, #368]	@ (800257c <HAL_RCC_OscConfig+0x354>)
 800240a:	697a      	ldr	r2, [r7, #20]
 800240c:	430a      	orrs	r2, r1
 800240e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002410:	f7fe fe66 	bl	80010e0 <HAL_GetTick>
 8002414:	0003      	movs	r3, r0
 8002416:	61bb      	str	r3, [r7, #24]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002418:	e008      	b.n	800242c <HAL_RCC_OscConfig+0x204>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800241a:	f7fe fe61 	bl	80010e0 <HAL_GetTick>
 800241e:	0002      	movs	r2, r0
 8002420:	69bb      	ldr	r3, [r7, #24]
 8002422:	1ad3      	subs	r3, r2, r3
 8002424:	2b02      	cmp	r3, #2
 8002426:	d901      	bls.n	800242c <HAL_RCC_OscConfig+0x204>
          {
            return HAL_TIMEOUT;
 8002428:	2303      	movs	r3, #3
 800242a:	e2b6      	b.n	800299a <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800242c:	4b53      	ldr	r3, [pc, #332]	@ (800257c <HAL_RCC_OscConfig+0x354>)
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	2204      	movs	r2, #4
 8002432:	4013      	ands	r3, r2
 8002434:	d0f1      	beq.n	800241a <HAL_RCC_OscConfig+0x1f2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002436:	4b51      	ldr	r3, [pc, #324]	@ (800257c <HAL_RCC_OscConfig+0x354>)
 8002438:	685b      	ldr	r3, [r3, #4]
 800243a:	4a53      	ldr	r2, [pc, #332]	@ (8002588 <HAL_RCC_OscConfig+0x360>)
 800243c:	4013      	ands	r3, r2
 800243e:	0019      	movs	r1, r3
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	691b      	ldr	r3, [r3, #16]
 8002444:	021a      	lsls	r2, r3, #8
 8002446:	4b4d      	ldr	r3, [pc, #308]	@ (800257c <HAL_RCC_OscConfig+0x354>)
 8002448:	430a      	orrs	r2, r1
 800244a:	605a      	str	r2, [r3, #4]
 800244c:	e018      	b.n	8002480 <HAL_RCC_OscConfig+0x258>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800244e:	4b4b      	ldr	r3, [pc, #300]	@ (800257c <HAL_RCC_OscConfig+0x354>)
 8002450:	681a      	ldr	r2, [r3, #0]
 8002452:	4b4a      	ldr	r3, [pc, #296]	@ (800257c <HAL_RCC_OscConfig+0x354>)
 8002454:	2101      	movs	r1, #1
 8002456:	438a      	bics	r2, r1
 8002458:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800245a:	f7fe fe41 	bl	80010e0 <HAL_GetTick>
 800245e:	0003      	movs	r3, r0
 8002460:	61bb      	str	r3, [r7, #24]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8002462:	e008      	b.n	8002476 <HAL_RCC_OscConfig+0x24e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002464:	f7fe fe3c 	bl	80010e0 <HAL_GetTick>
 8002468:	0002      	movs	r2, r0
 800246a:	69bb      	ldr	r3, [r7, #24]
 800246c:	1ad3      	subs	r3, r2, r3
 800246e:	2b02      	cmp	r3, #2
 8002470:	d901      	bls.n	8002476 <HAL_RCC_OscConfig+0x24e>
          {
            return HAL_TIMEOUT;
 8002472:	2303      	movs	r3, #3
 8002474:	e291      	b.n	800299a <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8002476:	4b41      	ldr	r3, [pc, #260]	@ (800257c <HAL_RCC_OscConfig+0x354>)
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	2204      	movs	r2, #4
 800247c:	4013      	ands	r3, r2
 800247e:	d1f1      	bne.n	8002464 <HAL_RCC_OscConfig+0x23c>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	2210      	movs	r2, #16
 8002486:	4013      	ands	r3, r2
 8002488:	d100      	bne.n	800248c <HAL_RCC_OscConfig+0x264>
 800248a:	e0a1      	b.n	80025d0 <HAL_RCC_OscConfig+0x3a8>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800248c:	6a3b      	ldr	r3, [r7, #32]
 800248e:	2b00      	cmp	r3, #0
 8002490:	d140      	bne.n	8002514 <HAL_RCC_OscConfig+0x2ec>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002492:	4b3a      	ldr	r3, [pc, #232]	@ (800257c <HAL_RCC_OscConfig+0x354>)
 8002494:	681a      	ldr	r2, [r3, #0]
 8002496:	2380      	movs	r3, #128	@ 0x80
 8002498:	009b      	lsls	r3, r3, #2
 800249a:	4013      	ands	r3, r2
 800249c:	d005      	beq.n	80024aa <HAL_RCC_OscConfig+0x282>
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	69db      	ldr	r3, [r3, #28]
 80024a2:	2b00      	cmp	r3, #0
 80024a4:	d101      	bne.n	80024aa <HAL_RCC_OscConfig+0x282>
      {
        return HAL_ERROR;
 80024a6:	2301      	movs	r3, #1
 80024a8:	e277      	b.n	800299a <HAL_RCC_OscConfig+0x772>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80024aa:	4b34      	ldr	r3, [pc, #208]	@ (800257c <HAL_RCC_OscConfig+0x354>)
 80024ac:	685b      	ldr	r3, [r3, #4]
 80024ae:	4a3a      	ldr	r2, [pc, #232]	@ (8002598 <HAL_RCC_OscConfig+0x370>)
 80024b0:	4013      	ands	r3, r2
 80024b2:	0019      	movs	r1, r3
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80024b8:	4b30      	ldr	r3, [pc, #192]	@ (800257c <HAL_RCC_OscConfig+0x354>)
 80024ba:	430a      	orrs	r2, r1
 80024bc:	605a      	str	r2, [r3, #4]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80024be:	4b2f      	ldr	r3, [pc, #188]	@ (800257c <HAL_RCC_OscConfig+0x354>)
 80024c0:	685b      	ldr	r3, [r3, #4]
 80024c2:	021b      	lsls	r3, r3, #8
 80024c4:	0a19      	lsrs	r1, r3, #8
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	6a1b      	ldr	r3, [r3, #32]
 80024ca:	061a      	lsls	r2, r3, #24
 80024cc:	4b2b      	ldr	r3, [pc, #172]	@ (800257c <HAL_RCC_OscConfig+0x354>)
 80024ce:	430a      	orrs	r2, r1
 80024d0:	605a      	str	r2, [r3, #4]


        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80024d6:	0b5b      	lsrs	r3, r3, #13
 80024d8:	3301      	adds	r3, #1
 80024da:	2280      	movs	r2, #128	@ 0x80
 80024dc:	0212      	lsls	r2, r2, #8
 80024de:	409a      	lsls	r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 80024e0:	4b26      	ldr	r3, [pc, #152]	@ (800257c <HAL_RCC_OscConfig+0x354>)
 80024e2:	68db      	ldr	r3, [r3, #12]
 80024e4:	091b      	lsrs	r3, r3, #4
 80024e6:	210f      	movs	r1, #15
 80024e8:	400b      	ands	r3, r1
 80024ea:	4928      	ldr	r1, [pc, #160]	@ (800258c <HAL_RCC_OscConfig+0x364>)
 80024ec:	5ccb      	ldrb	r3, [r1, r3]
 80024ee:	40da      	lsrs	r2, r3
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 80024f0:	4b27      	ldr	r3, [pc, #156]	@ (8002590 <HAL_RCC_OscConfig+0x368>)
 80024f2:	601a      	str	r2, [r3, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick (uwTickPrio);
 80024f4:	4b27      	ldr	r3, [pc, #156]	@ (8002594 <HAL_RCC_OscConfig+0x36c>)
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	2513      	movs	r5, #19
 80024fa:	197c      	adds	r4, r7, r5
 80024fc:	0018      	movs	r0, r3
 80024fe:	f7fe fda9 	bl	8001054 <HAL_InitTick>
 8002502:	0003      	movs	r3, r0
 8002504:	7023      	strb	r3, [r4, #0]
        if(status != HAL_OK)
 8002506:	197b      	adds	r3, r7, r5
 8002508:	781b      	ldrb	r3, [r3, #0]
 800250a:	2b00      	cmp	r3, #0
 800250c:	d060      	beq.n	80025d0 <HAL_RCC_OscConfig+0x3a8>
        {
          return status;
 800250e:	197b      	adds	r3, r7, r5
 8002510:	781b      	ldrb	r3, [r3, #0]
 8002512:	e242      	b.n	800299a <HAL_RCC_OscConfig+0x772>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	69db      	ldr	r3, [r3, #28]
 8002518:	2b00      	cmp	r3, #0
 800251a:	d03f      	beq.n	800259c <HAL_RCC_OscConfig+0x374>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800251c:	4b17      	ldr	r3, [pc, #92]	@ (800257c <HAL_RCC_OscConfig+0x354>)
 800251e:	681a      	ldr	r2, [r3, #0]
 8002520:	4b16      	ldr	r3, [pc, #88]	@ (800257c <HAL_RCC_OscConfig+0x354>)
 8002522:	2180      	movs	r1, #128	@ 0x80
 8002524:	0049      	lsls	r1, r1, #1
 8002526:	430a      	orrs	r2, r1
 8002528:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800252a:	f7fe fdd9 	bl	80010e0 <HAL_GetTick>
 800252e:	0003      	movs	r3, r0
 8002530:	61bb      	str	r3, [r7, #24]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8002532:	e008      	b.n	8002546 <HAL_RCC_OscConfig+0x31e>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002534:	f7fe fdd4 	bl	80010e0 <HAL_GetTick>
 8002538:	0002      	movs	r2, r0
 800253a:	69bb      	ldr	r3, [r7, #24]
 800253c:	1ad3      	subs	r3, r2, r3
 800253e:	2b02      	cmp	r3, #2
 8002540:	d901      	bls.n	8002546 <HAL_RCC_OscConfig+0x31e>
          {
            return HAL_TIMEOUT;
 8002542:	2303      	movs	r3, #3
 8002544:	e229      	b.n	800299a <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8002546:	4b0d      	ldr	r3, [pc, #52]	@ (800257c <HAL_RCC_OscConfig+0x354>)
 8002548:	681a      	ldr	r2, [r3, #0]
 800254a:	2380      	movs	r3, #128	@ 0x80
 800254c:	009b      	lsls	r3, r3, #2
 800254e:	4013      	ands	r3, r2
 8002550:	d0f0      	beq.n	8002534 <HAL_RCC_OscConfig+0x30c>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002552:	4b0a      	ldr	r3, [pc, #40]	@ (800257c <HAL_RCC_OscConfig+0x354>)
 8002554:	685b      	ldr	r3, [r3, #4]
 8002556:	4a10      	ldr	r2, [pc, #64]	@ (8002598 <HAL_RCC_OscConfig+0x370>)
 8002558:	4013      	ands	r3, r2
 800255a:	0019      	movs	r1, r3
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002560:	4b06      	ldr	r3, [pc, #24]	@ (800257c <HAL_RCC_OscConfig+0x354>)
 8002562:	430a      	orrs	r2, r1
 8002564:	605a      	str	r2, [r3, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002566:	4b05      	ldr	r3, [pc, #20]	@ (800257c <HAL_RCC_OscConfig+0x354>)
 8002568:	685b      	ldr	r3, [r3, #4]
 800256a:	021b      	lsls	r3, r3, #8
 800256c:	0a19      	lsrs	r1, r3, #8
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	6a1b      	ldr	r3, [r3, #32]
 8002572:	061a      	lsls	r2, r3, #24
 8002574:	4b01      	ldr	r3, [pc, #4]	@ (800257c <HAL_RCC_OscConfig+0x354>)
 8002576:	430a      	orrs	r2, r1
 8002578:	605a      	str	r2, [r3, #4]
 800257a:	e029      	b.n	80025d0 <HAL_RCC_OscConfig+0x3a8>
 800257c:	40021000 	.word	0x40021000
 8002580:	fffeffff 	.word	0xfffeffff
 8002584:	fffbffff 	.word	0xfffbffff
 8002588:	ffffe0ff 	.word	0xffffe0ff
 800258c:	0800554c 	.word	0x0800554c
 8002590:	20000008 	.word	0x20000008
 8002594:	2000000c 	.word	0x2000000c
 8002598:	ffff1fff 	.word	0xffff1fff
      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800259c:	4bbd      	ldr	r3, [pc, #756]	@ (8002894 <HAL_RCC_OscConfig+0x66c>)
 800259e:	681a      	ldr	r2, [r3, #0]
 80025a0:	4bbc      	ldr	r3, [pc, #752]	@ (8002894 <HAL_RCC_OscConfig+0x66c>)
 80025a2:	49bd      	ldr	r1, [pc, #756]	@ (8002898 <HAL_RCC_OscConfig+0x670>)
 80025a4:	400a      	ands	r2, r1
 80025a6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80025a8:	f7fe fd9a 	bl	80010e0 <HAL_GetTick>
 80025ac:	0003      	movs	r3, r0
 80025ae:	61bb      	str	r3, [r7, #24]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 80025b0:	e008      	b.n	80025c4 <HAL_RCC_OscConfig+0x39c>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80025b2:	f7fe fd95 	bl	80010e0 <HAL_GetTick>
 80025b6:	0002      	movs	r2, r0
 80025b8:	69bb      	ldr	r3, [r7, #24]
 80025ba:	1ad3      	subs	r3, r2, r3
 80025bc:	2b02      	cmp	r3, #2
 80025be:	d901      	bls.n	80025c4 <HAL_RCC_OscConfig+0x39c>
          {
            return HAL_TIMEOUT;
 80025c0:	2303      	movs	r3, #3
 80025c2:	e1ea      	b.n	800299a <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 80025c4:	4bb3      	ldr	r3, [pc, #716]	@ (8002894 <HAL_RCC_OscConfig+0x66c>)
 80025c6:	681a      	ldr	r2, [r3, #0]
 80025c8:	2380      	movs	r3, #128	@ 0x80
 80025ca:	009b      	lsls	r3, r3, #2
 80025cc:	4013      	ands	r3, r2
 80025ce:	d1f0      	bne.n	80025b2 <HAL_RCC_OscConfig+0x38a>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	2208      	movs	r2, #8
 80025d6:	4013      	ands	r3, r2
 80025d8:	d036      	beq.n	8002648 <HAL_RCC_OscConfig+0x420>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	695b      	ldr	r3, [r3, #20]
 80025de:	2b00      	cmp	r3, #0
 80025e0:	d019      	beq.n	8002616 <HAL_RCC_OscConfig+0x3ee>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80025e2:	4bac      	ldr	r3, [pc, #688]	@ (8002894 <HAL_RCC_OscConfig+0x66c>)
 80025e4:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80025e6:	4bab      	ldr	r3, [pc, #684]	@ (8002894 <HAL_RCC_OscConfig+0x66c>)
 80025e8:	2101      	movs	r1, #1
 80025ea:	430a      	orrs	r2, r1
 80025ec:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80025ee:	f7fe fd77 	bl	80010e0 <HAL_GetTick>
 80025f2:	0003      	movs	r3, r0
 80025f4:	61bb      	str	r3, [r7, #24]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80025f6:	e008      	b.n	800260a <HAL_RCC_OscConfig+0x3e2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80025f8:	f7fe fd72 	bl	80010e0 <HAL_GetTick>
 80025fc:	0002      	movs	r2, r0
 80025fe:	69bb      	ldr	r3, [r7, #24]
 8002600:	1ad3      	subs	r3, r2, r3
 8002602:	2b02      	cmp	r3, #2
 8002604:	d901      	bls.n	800260a <HAL_RCC_OscConfig+0x3e2>
        {
          return HAL_TIMEOUT;
 8002606:	2303      	movs	r3, #3
 8002608:	e1c7      	b.n	800299a <HAL_RCC_OscConfig+0x772>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800260a:	4ba2      	ldr	r3, [pc, #648]	@ (8002894 <HAL_RCC_OscConfig+0x66c>)
 800260c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800260e:	2202      	movs	r2, #2
 8002610:	4013      	ands	r3, r2
 8002612:	d0f1      	beq.n	80025f8 <HAL_RCC_OscConfig+0x3d0>
 8002614:	e018      	b.n	8002648 <HAL_RCC_OscConfig+0x420>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002616:	4b9f      	ldr	r3, [pc, #636]	@ (8002894 <HAL_RCC_OscConfig+0x66c>)
 8002618:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800261a:	4b9e      	ldr	r3, [pc, #632]	@ (8002894 <HAL_RCC_OscConfig+0x66c>)
 800261c:	2101      	movs	r1, #1
 800261e:	438a      	bics	r2, r1
 8002620:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002622:	f7fe fd5d 	bl	80010e0 <HAL_GetTick>
 8002626:	0003      	movs	r3, r0
 8002628:	61bb      	str	r3, [r7, #24]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800262a:	e008      	b.n	800263e <HAL_RCC_OscConfig+0x416>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800262c:	f7fe fd58 	bl	80010e0 <HAL_GetTick>
 8002630:	0002      	movs	r2, r0
 8002632:	69bb      	ldr	r3, [r7, #24]
 8002634:	1ad3      	subs	r3, r2, r3
 8002636:	2b02      	cmp	r3, #2
 8002638:	d901      	bls.n	800263e <HAL_RCC_OscConfig+0x416>
        {
          return HAL_TIMEOUT;
 800263a:	2303      	movs	r3, #3
 800263c:	e1ad      	b.n	800299a <HAL_RCC_OscConfig+0x772>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800263e:	4b95      	ldr	r3, [pc, #596]	@ (8002894 <HAL_RCC_OscConfig+0x66c>)
 8002640:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002642:	2202      	movs	r2, #2
 8002644:	4013      	ands	r3, r2
 8002646:	d1f1      	bne.n	800262c <HAL_RCC_OscConfig+0x404>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	2204      	movs	r2, #4
 800264e:	4013      	ands	r3, r2
 8002650:	d100      	bne.n	8002654 <HAL_RCC_OscConfig+0x42c>
 8002652:	e0ae      	b.n	80027b2 <HAL_RCC_OscConfig+0x58a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002654:	2027      	movs	r0, #39	@ 0x27
 8002656:	183b      	adds	r3, r7, r0
 8002658:	2200      	movs	r2, #0
 800265a:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800265c:	4b8d      	ldr	r3, [pc, #564]	@ (8002894 <HAL_RCC_OscConfig+0x66c>)
 800265e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002660:	2380      	movs	r3, #128	@ 0x80
 8002662:	055b      	lsls	r3, r3, #21
 8002664:	4013      	ands	r3, r2
 8002666:	d109      	bne.n	800267c <HAL_RCC_OscConfig+0x454>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002668:	4b8a      	ldr	r3, [pc, #552]	@ (8002894 <HAL_RCC_OscConfig+0x66c>)
 800266a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800266c:	4b89      	ldr	r3, [pc, #548]	@ (8002894 <HAL_RCC_OscConfig+0x66c>)
 800266e:	2180      	movs	r1, #128	@ 0x80
 8002670:	0549      	lsls	r1, r1, #21
 8002672:	430a      	orrs	r2, r1
 8002674:	639a      	str	r2, [r3, #56]	@ 0x38
      pwrclkchanged = SET;
 8002676:	183b      	adds	r3, r7, r0
 8002678:	2201      	movs	r2, #1
 800267a:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800267c:	4b87      	ldr	r3, [pc, #540]	@ (800289c <HAL_RCC_OscConfig+0x674>)
 800267e:	681a      	ldr	r2, [r3, #0]
 8002680:	2380      	movs	r3, #128	@ 0x80
 8002682:	005b      	lsls	r3, r3, #1
 8002684:	4013      	ands	r3, r2
 8002686:	d11a      	bne.n	80026be <HAL_RCC_OscConfig+0x496>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002688:	4b84      	ldr	r3, [pc, #528]	@ (800289c <HAL_RCC_OscConfig+0x674>)
 800268a:	681a      	ldr	r2, [r3, #0]
 800268c:	4b83      	ldr	r3, [pc, #524]	@ (800289c <HAL_RCC_OscConfig+0x674>)
 800268e:	2180      	movs	r1, #128	@ 0x80
 8002690:	0049      	lsls	r1, r1, #1
 8002692:	430a      	orrs	r2, r1
 8002694:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002696:	f7fe fd23 	bl	80010e0 <HAL_GetTick>
 800269a:	0003      	movs	r3, r0
 800269c:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800269e:	e008      	b.n	80026b2 <HAL_RCC_OscConfig+0x48a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80026a0:	f7fe fd1e 	bl	80010e0 <HAL_GetTick>
 80026a4:	0002      	movs	r2, r0
 80026a6:	69bb      	ldr	r3, [r7, #24]
 80026a8:	1ad3      	subs	r3, r2, r3
 80026aa:	2b64      	cmp	r3, #100	@ 0x64
 80026ac:	d901      	bls.n	80026b2 <HAL_RCC_OscConfig+0x48a>
        {
          return HAL_TIMEOUT;
 80026ae:	2303      	movs	r3, #3
 80026b0:	e173      	b.n	800299a <HAL_RCC_OscConfig+0x772>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80026b2:	4b7a      	ldr	r3, [pc, #488]	@ (800289c <HAL_RCC_OscConfig+0x674>)
 80026b4:	681a      	ldr	r2, [r3, #0]
 80026b6:	2380      	movs	r3, #128	@ 0x80
 80026b8:	005b      	lsls	r3, r3, #1
 80026ba:	4013      	ands	r3, r2
 80026bc:	d0f0      	beq.n	80026a0 <HAL_RCC_OscConfig+0x478>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	689a      	ldr	r2, [r3, #8]
 80026c2:	2380      	movs	r3, #128	@ 0x80
 80026c4:	005b      	lsls	r3, r3, #1
 80026c6:	429a      	cmp	r2, r3
 80026c8:	d107      	bne.n	80026da <HAL_RCC_OscConfig+0x4b2>
 80026ca:	4b72      	ldr	r3, [pc, #456]	@ (8002894 <HAL_RCC_OscConfig+0x66c>)
 80026cc:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80026ce:	4b71      	ldr	r3, [pc, #452]	@ (8002894 <HAL_RCC_OscConfig+0x66c>)
 80026d0:	2180      	movs	r1, #128	@ 0x80
 80026d2:	0049      	lsls	r1, r1, #1
 80026d4:	430a      	orrs	r2, r1
 80026d6:	651a      	str	r2, [r3, #80]	@ 0x50
 80026d8:	e031      	b.n	800273e <HAL_RCC_OscConfig+0x516>
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	689b      	ldr	r3, [r3, #8]
 80026de:	2b00      	cmp	r3, #0
 80026e0:	d10c      	bne.n	80026fc <HAL_RCC_OscConfig+0x4d4>
 80026e2:	4b6c      	ldr	r3, [pc, #432]	@ (8002894 <HAL_RCC_OscConfig+0x66c>)
 80026e4:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80026e6:	4b6b      	ldr	r3, [pc, #428]	@ (8002894 <HAL_RCC_OscConfig+0x66c>)
 80026e8:	496b      	ldr	r1, [pc, #428]	@ (8002898 <HAL_RCC_OscConfig+0x670>)
 80026ea:	400a      	ands	r2, r1
 80026ec:	651a      	str	r2, [r3, #80]	@ 0x50
 80026ee:	4b69      	ldr	r3, [pc, #420]	@ (8002894 <HAL_RCC_OscConfig+0x66c>)
 80026f0:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80026f2:	4b68      	ldr	r3, [pc, #416]	@ (8002894 <HAL_RCC_OscConfig+0x66c>)
 80026f4:	496a      	ldr	r1, [pc, #424]	@ (80028a0 <HAL_RCC_OscConfig+0x678>)
 80026f6:	400a      	ands	r2, r1
 80026f8:	651a      	str	r2, [r3, #80]	@ 0x50
 80026fa:	e020      	b.n	800273e <HAL_RCC_OscConfig+0x516>
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	689a      	ldr	r2, [r3, #8]
 8002700:	23a0      	movs	r3, #160	@ 0xa0
 8002702:	00db      	lsls	r3, r3, #3
 8002704:	429a      	cmp	r2, r3
 8002706:	d10e      	bne.n	8002726 <HAL_RCC_OscConfig+0x4fe>
 8002708:	4b62      	ldr	r3, [pc, #392]	@ (8002894 <HAL_RCC_OscConfig+0x66c>)
 800270a:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800270c:	4b61      	ldr	r3, [pc, #388]	@ (8002894 <HAL_RCC_OscConfig+0x66c>)
 800270e:	2180      	movs	r1, #128	@ 0x80
 8002710:	00c9      	lsls	r1, r1, #3
 8002712:	430a      	orrs	r2, r1
 8002714:	651a      	str	r2, [r3, #80]	@ 0x50
 8002716:	4b5f      	ldr	r3, [pc, #380]	@ (8002894 <HAL_RCC_OscConfig+0x66c>)
 8002718:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800271a:	4b5e      	ldr	r3, [pc, #376]	@ (8002894 <HAL_RCC_OscConfig+0x66c>)
 800271c:	2180      	movs	r1, #128	@ 0x80
 800271e:	0049      	lsls	r1, r1, #1
 8002720:	430a      	orrs	r2, r1
 8002722:	651a      	str	r2, [r3, #80]	@ 0x50
 8002724:	e00b      	b.n	800273e <HAL_RCC_OscConfig+0x516>
 8002726:	4b5b      	ldr	r3, [pc, #364]	@ (8002894 <HAL_RCC_OscConfig+0x66c>)
 8002728:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800272a:	4b5a      	ldr	r3, [pc, #360]	@ (8002894 <HAL_RCC_OscConfig+0x66c>)
 800272c:	495a      	ldr	r1, [pc, #360]	@ (8002898 <HAL_RCC_OscConfig+0x670>)
 800272e:	400a      	ands	r2, r1
 8002730:	651a      	str	r2, [r3, #80]	@ 0x50
 8002732:	4b58      	ldr	r3, [pc, #352]	@ (8002894 <HAL_RCC_OscConfig+0x66c>)
 8002734:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8002736:	4b57      	ldr	r3, [pc, #348]	@ (8002894 <HAL_RCC_OscConfig+0x66c>)
 8002738:	4959      	ldr	r1, [pc, #356]	@ (80028a0 <HAL_RCC_OscConfig+0x678>)
 800273a:	400a      	ands	r2, r1
 800273c:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	689b      	ldr	r3, [r3, #8]
 8002742:	2b00      	cmp	r3, #0
 8002744:	d015      	beq.n	8002772 <HAL_RCC_OscConfig+0x54a>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002746:	f7fe fccb 	bl	80010e0 <HAL_GetTick>
 800274a:	0003      	movs	r3, r0
 800274c:	61bb      	str	r3, [r7, #24]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800274e:	e009      	b.n	8002764 <HAL_RCC_OscConfig+0x53c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002750:	f7fe fcc6 	bl	80010e0 <HAL_GetTick>
 8002754:	0002      	movs	r2, r0
 8002756:	69bb      	ldr	r3, [r7, #24]
 8002758:	1ad3      	subs	r3, r2, r3
 800275a:	4a52      	ldr	r2, [pc, #328]	@ (80028a4 <HAL_RCC_OscConfig+0x67c>)
 800275c:	4293      	cmp	r3, r2
 800275e:	d901      	bls.n	8002764 <HAL_RCC_OscConfig+0x53c>
        {
          return HAL_TIMEOUT;
 8002760:	2303      	movs	r3, #3
 8002762:	e11a      	b.n	800299a <HAL_RCC_OscConfig+0x772>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002764:	4b4b      	ldr	r3, [pc, #300]	@ (8002894 <HAL_RCC_OscConfig+0x66c>)
 8002766:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8002768:	2380      	movs	r3, #128	@ 0x80
 800276a:	009b      	lsls	r3, r3, #2
 800276c:	4013      	ands	r3, r2
 800276e:	d0ef      	beq.n	8002750 <HAL_RCC_OscConfig+0x528>
 8002770:	e014      	b.n	800279c <HAL_RCC_OscConfig+0x574>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002772:	f7fe fcb5 	bl	80010e0 <HAL_GetTick>
 8002776:	0003      	movs	r3, r0
 8002778:	61bb      	str	r3, [r7, #24]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800277a:	e009      	b.n	8002790 <HAL_RCC_OscConfig+0x568>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800277c:	f7fe fcb0 	bl	80010e0 <HAL_GetTick>
 8002780:	0002      	movs	r2, r0
 8002782:	69bb      	ldr	r3, [r7, #24]
 8002784:	1ad3      	subs	r3, r2, r3
 8002786:	4a47      	ldr	r2, [pc, #284]	@ (80028a4 <HAL_RCC_OscConfig+0x67c>)
 8002788:	4293      	cmp	r3, r2
 800278a:	d901      	bls.n	8002790 <HAL_RCC_OscConfig+0x568>
        {
          return HAL_TIMEOUT;
 800278c:	2303      	movs	r3, #3
 800278e:	e104      	b.n	800299a <HAL_RCC_OscConfig+0x772>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8002790:	4b40      	ldr	r3, [pc, #256]	@ (8002894 <HAL_RCC_OscConfig+0x66c>)
 8002792:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8002794:	2380      	movs	r3, #128	@ 0x80
 8002796:	009b      	lsls	r3, r3, #2
 8002798:	4013      	ands	r3, r2
 800279a:	d1ef      	bne.n	800277c <HAL_RCC_OscConfig+0x554>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800279c:	2327      	movs	r3, #39	@ 0x27
 800279e:	18fb      	adds	r3, r7, r3
 80027a0:	781b      	ldrb	r3, [r3, #0]
 80027a2:	2b01      	cmp	r3, #1
 80027a4:	d105      	bne.n	80027b2 <HAL_RCC_OscConfig+0x58a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80027a6:	4b3b      	ldr	r3, [pc, #236]	@ (8002894 <HAL_RCC_OscConfig+0x66c>)
 80027a8:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80027aa:	4b3a      	ldr	r3, [pc, #232]	@ (8002894 <HAL_RCC_OscConfig+0x66c>)
 80027ac:	493e      	ldr	r1, [pc, #248]	@ (80028a8 <HAL_RCC_OscConfig+0x680>)
 80027ae:	400a      	ands	r2, r1
 80027b0:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	2220      	movs	r2, #32
 80027b8:	4013      	ands	r3, r2
 80027ba:	d049      	beq.n	8002850 <HAL_RCC_OscConfig+0x628>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	699b      	ldr	r3, [r3, #24]
 80027c0:	2b00      	cmp	r3, #0
 80027c2:	d026      	beq.n	8002812 <HAL_RCC_OscConfig+0x5ea>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 80027c4:	4b33      	ldr	r3, [pc, #204]	@ (8002894 <HAL_RCC_OscConfig+0x66c>)
 80027c6:	689a      	ldr	r2, [r3, #8]
 80027c8:	4b32      	ldr	r3, [pc, #200]	@ (8002894 <HAL_RCC_OscConfig+0x66c>)
 80027ca:	2101      	movs	r1, #1
 80027cc:	430a      	orrs	r2, r1
 80027ce:	609a      	str	r2, [r3, #8]
 80027d0:	4b30      	ldr	r3, [pc, #192]	@ (8002894 <HAL_RCC_OscConfig+0x66c>)
 80027d2:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80027d4:	4b2f      	ldr	r3, [pc, #188]	@ (8002894 <HAL_RCC_OscConfig+0x66c>)
 80027d6:	2101      	movs	r1, #1
 80027d8:	430a      	orrs	r2, r1
 80027da:	635a      	str	r2, [r3, #52]	@ 0x34
 80027dc:	4b33      	ldr	r3, [pc, #204]	@ (80028ac <HAL_RCC_OscConfig+0x684>)
 80027de:	6a1a      	ldr	r2, [r3, #32]
 80027e0:	4b32      	ldr	r3, [pc, #200]	@ (80028ac <HAL_RCC_OscConfig+0x684>)
 80027e2:	2180      	movs	r1, #128	@ 0x80
 80027e4:	0189      	lsls	r1, r1, #6
 80027e6:	430a      	orrs	r2, r1
 80027e8:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80027ea:	f7fe fc79 	bl	80010e0 <HAL_GetTick>
 80027ee:	0003      	movs	r3, r0
 80027f0:	61bb      	str	r3, [r7, #24]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80027f2:	e008      	b.n	8002806 <HAL_RCC_OscConfig+0x5de>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80027f4:	f7fe fc74 	bl	80010e0 <HAL_GetTick>
 80027f8:	0002      	movs	r2, r0
 80027fa:	69bb      	ldr	r3, [r7, #24]
 80027fc:	1ad3      	subs	r3, r2, r3
 80027fe:	2b02      	cmp	r3, #2
 8002800:	d901      	bls.n	8002806 <HAL_RCC_OscConfig+0x5de>
          {
            return HAL_TIMEOUT;
 8002802:	2303      	movs	r3, #3
 8002804:	e0c9      	b.n	800299a <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8002806:	4b23      	ldr	r3, [pc, #140]	@ (8002894 <HAL_RCC_OscConfig+0x66c>)
 8002808:	689b      	ldr	r3, [r3, #8]
 800280a:	2202      	movs	r2, #2
 800280c:	4013      	ands	r3, r2
 800280e:	d0f1      	beq.n	80027f4 <HAL_RCC_OscConfig+0x5cc>
 8002810:	e01e      	b.n	8002850 <HAL_RCC_OscConfig+0x628>
        }
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 8002812:	4b20      	ldr	r3, [pc, #128]	@ (8002894 <HAL_RCC_OscConfig+0x66c>)
 8002814:	689a      	ldr	r2, [r3, #8]
 8002816:	4b1f      	ldr	r3, [pc, #124]	@ (8002894 <HAL_RCC_OscConfig+0x66c>)
 8002818:	2101      	movs	r1, #1
 800281a:	438a      	bics	r2, r1
 800281c:	609a      	str	r2, [r3, #8]
 800281e:	4b23      	ldr	r3, [pc, #140]	@ (80028ac <HAL_RCC_OscConfig+0x684>)
 8002820:	6a1a      	ldr	r2, [r3, #32]
 8002822:	4b22      	ldr	r3, [pc, #136]	@ (80028ac <HAL_RCC_OscConfig+0x684>)
 8002824:	4922      	ldr	r1, [pc, #136]	@ (80028b0 <HAL_RCC_OscConfig+0x688>)
 8002826:	400a      	ands	r2, r1
 8002828:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800282a:	f7fe fc59 	bl	80010e0 <HAL_GetTick>
 800282e:	0003      	movs	r3, r0
 8002830:	61bb      	str	r3, [r7, #24]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8002832:	e008      	b.n	8002846 <HAL_RCC_OscConfig+0x61e>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002834:	f7fe fc54 	bl	80010e0 <HAL_GetTick>
 8002838:	0002      	movs	r2, r0
 800283a:	69bb      	ldr	r3, [r7, #24]
 800283c:	1ad3      	subs	r3, r2, r3
 800283e:	2b02      	cmp	r3, #2
 8002840:	d901      	bls.n	8002846 <HAL_RCC_OscConfig+0x61e>
          {
            return HAL_TIMEOUT;
 8002842:	2303      	movs	r3, #3
 8002844:	e0a9      	b.n	800299a <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8002846:	4b13      	ldr	r3, [pc, #76]	@ (8002894 <HAL_RCC_OscConfig+0x66c>)
 8002848:	689b      	ldr	r3, [r3, #8]
 800284a:	2202      	movs	r2, #2
 800284c:	4013      	ands	r3, r2
 800284e:	d1f1      	bne.n	8002834 <HAL_RCC_OscConfig+0x60c>
#endif /* RCC_HSI48_SUPPORT */

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002854:	2b00      	cmp	r3, #0
 8002856:	d100      	bne.n	800285a <HAL_RCC_OscConfig+0x632>
 8002858:	e09e      	b.n	8002998 <HAL_RCC_OscConfig+0x770>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800285a:	6a3b      	ldr	r3, [r7, #32]
 800285c:	2b0c      	cmp	r3, #12
 800285e:	d100      	bne.n	8002862 <HAL_RCC_OscConfig+0x63a>
 8002860:	e077      	b.n	8002952 <HAL_RCC_OscConfig+0x72a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002866:	2b02      	cmp	r3, #2
 8002868:	d158      	bne.n	800291c <HAL_RCC_OscConfig+0x6f4>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800286a:	4b0a      	ldr	r3, [pc, #40]	@ (8002894 <HAL_RCC_OscConfig+0x66c>)
 800286c:	681a      	ldr	r2, [r3, #0]
 800286e:	4b09      	ldr	r3, [pc, #36]	@ (8002894 <HAL_RCC_OscConfig+0x66c>)
 8002870:	4910      	ldr	r1, [pc, #64]	@ (80028b4 <HAL_RCC_OscConfig+0x68c>)
 8002872:	400a      	ands	r2, r1
 8002874:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002876:	f7fe fc33 	bl	80010e0 <HAL_GetTick>
 800287a:	0003      	movs	r3, r0
 800287c:	61bb      	str	r3, [r7, #24]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 800287e:	e01b      	b.n	80028b8 <HAL_RCC_OscConfig+0x690>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002880:	f7fe fc2e 	bl	80010e0 <HAL_GetTick>
 8002884:	0002      	movs	r2, r0
 8002886:	69bb      	ldr	r3, [r7, #24]
 8002888:	1ad3      	subs	r3, r2, r3
 800288a:	2b02      	cmp	r3, #2
 800288c:	d914      	bls.n	80028b8 <HAL_RCC_OscConfig+0x690>
          {
            return HAL_TIMEOUT;
 800288e:	2303      	movs	r3, #3
 8002890:	e083      	b.n	800299a <HAL_RCC_OscConfig+0x772>
 8002892:	46c0      	nop			@ (mov r8, r8)
 8002894:	40021000 	.word	0x40021000
 8002898:	fffffeff 	.word	0xfffffeff
 800289c:	40007000 	.word	0x40007000
 80028a0:	fffffbff 	.word	0xfffffbff
 80028a4:	00001388 	.word	0x00001388
 80028a8:	efffffff 	.word	0xefffffff
 80028ac:	40010000 	.word	0x40010000
 80028b0:	ffffdfff 	.word	0xffffdfff
 80028b4:	feffffff 	.word	0xfeffffff
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 80028b8:	4b3a      	ldr	r3, [pc, #232]	@ (80029a4 <HAL_RCC_OscConfig+0x77c>)
 80028ba:	681a      	ldr	r2, [r3, #0]
 80028bc:	2380      	movs	r3, #128	@ 0x80
 80028be:	049b      	lsls	r3, r3, #18
 80028c0:	4013      	ands	r3, r2
 80028c2:	d1dd      	bne.n	8002880 <HAL_RCC_OscConfig+0x658>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80028c4:	4b37      	ldr	r3, [pc, #220]	@ (80029a4 <HAL_RCC_OscConfig+0x77c>)
 80028c6:	68db      	ldr	r3, [r3, #12]
 80028c8:	4a37      	ldr	r2, [pc, #220]	@ (80029a8 <HAL_RCC_OscConfig+0x780>)
 80028ca:	4013      	ands	r3, r2
 80028cc:	0019      	movs	r1, r3
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80028d6:	431a      	orrs	r2, r3
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80028dc:	431a      	orrs	r2, r3
 80028de:	4b31      	ldr	r3, [pc, #196]	@ (80029a4 <HAL_RCC_OscConfig+0x77c>)
 80028e0:	430a      	orrs	r2, r1
 80028e2:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80028e4:	4b2f      	ldr	r3, [pc, #188]	@ (80029a4 <HAL_RCC_OscConfig+0x77c>)
 80028e6:	681a      	ldr	r2, [r3, #0]
 80028e8:	4b2e      	ldr	r3, [pc, #184]	@ (80029a4 <HAL_RCC_OscConfig+0x77c>)
 80028ea:	2180      	movs	r1, #128	@ 0x80
 80028ec:	0449      	lsls	r1, r1, #17
 80028ee:	430a      	orrs	r2, r1
 80028f0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80028f2:	f7fe fbf5 	bl	80010e0 <HAL_GetTick>
 80028f6:	0003      	movs	r3, r0
 80028f8:	61bb      	str	r3, [r7, #24]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 80028fa:	e008      	b.n	800290e <HAL_RCC_OscConfig+0x6e6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80028fc:	f7fe fbf0 	bl	80010e0 <HAL_GetTick>
 8002900:	0002      	movs	r2, r0
 8002902:	69bb      	ldr	r3, [r7, #24]
 8002904:	1ad3      	subs	r3, r2, r3
 8002906:	2b02      	cmp	r3, #2
 8002908:	d901      	bls.n	800290e <HAL_RCC_OscConfig+0x6e6>
          {
            return HAL_TIMEOUT;
 800290a:	2303      	movs	r3, #3
 800290c:	e045      	b.n	800299a <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 800290e:	4b25      	ldr	r3, [pc, #148]	@ (80029a4 <HAL_RCC_OscConfig+0x77c>)
 8002910:	681a      	ldr	r2, [r3, #0]
 8002912:	2380      	movs	r3, #128	@ 0x80
 8002914:	049b      	lsls	r3, r3, #18
 8002916:	4013      	ands	r3, r2
 8002918:	d0f0      	beq.n	80028fc <HAL_RCC_OscConfig+0x6d4>
 800291a:	e03d      	b.n	8002998 <HAL_RCC_OscConfig+0x770>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800291c:	4b21      	ldr	r3, [pc, #132]	@ (80029a4 <HAL_RCC_OscConfig+0x77c>)
 800291e:	681a      	ldr	r2, [r3, #0]
 8002920:	4b20      	ldr	r3, [pc, #128]	@ (80029a4 <HAL_RCC_OscConfig+0x77c>)
 8002922:	4922      	ldr	r1, [pc, #136]	@ (80029ac <HAL_RCC_OscConfig+0x784>)
 8002924:	400a      	ands	r2, r1
 8002926:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002928:	f7fe fbda 	bl	80010e0 <HAL_GetTick>
 800292c:	0003      	movs	r3, r0
 800292e:	61bb      	str	r3, [r7, #24]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8002930:	e008      	b.n	8002944 <HAL_RCC_OscConfig+0x71c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002932:	f7fe fbd5 	bl	80010e0 <HAL_GetTick>
 8002936:	0002      	movs	r2, r0
 8002938:	69bb      	ldr	r3, [r7, #24]
 800293a:	1ad3      	subs	r3, r2, r3
 800293c:	2b02      	cmp	r3, #2
 800293e:	d901      	bls.n	8002944 <HAL_RCC_OscConfig+0x71c>
          {
            return HAL_TIMEOUT;
 8002940:	2303      	movs	r3, #3
 8002942:	e02a      	b.n	800299a <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8002944:	4b17      	ldr	r3, [pc, #92]	@ (80029a4 <HAL_RCC_OscConfig+0x77c>)
 8002946:	681a      	ldr	r2, [r3, #0]
 8002948:	2380      	movs	r3, #128	@ 0x80
 800294a:	049b      	lsls	r3, r3, #18
 800294c:	4013      	ands	r3, r2
 800294e:	d1f0      	bne.n	8002932 <HAL_RCC_OscConfig+0x70a>
 8002950:	e022      	b.n	8002998 <HAL_RCC_OscConfig+0x770>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002956:	2b01      	cmp	r3, #1
 8002958:	d101      	bne.n	800295e <HAL_RCC_OscConfig+0x736>
      {
        return HAL_ERROR;
 800295a:	2301      	movs	r3, #1
 800295c:	e01d      	b.n	800299a <HAL_RCC_OscConfig+0x772>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800295e:	4b11      	ldr	r3, [pc, #68]	@ (80029a4 <HAL_RCC_OscConfig+0x77c>)
 8002960:	68db      	ldr	r3, [r3, #12]
 8002962:	61fb      	str	r3, [r7, #28]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002964:	69fa      	ldr	r2, [r7, #28]
 8002966:	2380      	movs	r3, #128	@ 0x80
 8002968:	025b      	lsls	r3, r3, #9
 800296a:	401a      	ands	r2, r3
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002970:	429a      	cmp	r2, r3
 8002972:	d10f      	bne.n	8002994 <HAL_RCC_OscConfig+0x76c>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8002974:	69fa      	ldr	r2, [r7, #28]
 8002976:	23f0      	movs	r3, #240	@ 0xf0
 8002978:	039b      	lsls	r3, r3, #14
 800297a:	401a      	ands	r2, r3
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002980:	429a      	cmp	r2, r3
 8002982:	d107      	bne.n	8002994 <HAL_RCC_OscConfig+0x76c>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 8002984:	69fa      	ldr	r2, [r7, #28]
 8002986:	23c0      	movs	r3, #192	@ 0xc0
 8002988:	041b      	lsls	r3, r3, #16
 800298a:	401a      	ands	r2, r3
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8002990:	429a      	cmp	r2, r3
 8002992:	d001      	beq.n	8002998 <HAL_RCC_OscConfig+0x770>
        {
          return HAL_ERROR;
 8002994:	2301      	movs	r3, #1
 8002996:	e000      	b.n	800299a <HAL_RCC_OscConfig+0x772>
        }
      }
    }
  }
  return HAL_OK;
 8002998:	2300      	movs	r3, #0
}
 800299a:	0018      	movs	r0, r3
 800299c:	46bd      	mov	sp, r7
 800299e:	b00a      	add	sp, #40	@ 0x28
 80029a0:	bdb0      	pop	{r4, r5, r7, pc}
 80029a2:	46c0      	nop			@ (mov r8, r8)
 80029a4:	40021000 	.word	0x40021000
 80029a8:	ff02ffff 	.word	0xff02ffff
 80029ac:	feffffff 	.word	0xfeffffff

080029b0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80029b0:	b5b0      	push	{r4, r5, r7, lr}
 80029b2:	b084      	sub	sp, #16
 80029b4:	af00      	add	r7, sp, #0
 80029b6:	6078      	str	r0, [r7, #4]
 80029b8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	2b00      	cmp	r3, #0
 80029be:	d101      	bne.n	80029c4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80029c0:	2301      	movs	r3, #1
 80029c2:	e128      	b.n	8002c16 <HAL_RCC_ClockConfig+0x266>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80029c4:	4b96      	ldr	r3, [pc, #600]	@ (8002c20 <HAL_RCC_ClockConfig+0x270>)
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	2201      	movs	r2, #1
 80029ca:	4013      	ands	r3, r2
 80029cc:	683a      	ldr	r2, [r7, #0]
 80029ce:	429a      	cmp	r2, r3
 80029d0:	d91e      	bls.n	8002a10 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80029d2:	4b93      	ldr	r3, [pc, #588]	@ (8002c20 <HAL_RCC_ClockConfig+0x270>)
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	2201      	movs	r2, #1
 80029d8:	4393      	bics	r3, r2
 80029da:	0019      	movs	r1, r3
 80029dc:	4b90      	ldr	r3, [pc, #576]	@ (8002c20 <HAL_RCC_ClockConfig+0x270>)
 80029de:	683a      	ldr	r2, [r7, #0]
 80029e0:	430a      	orrs	r2, r1
 80029e2:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80029e4:	f7fe fb7c 	bl	80010e0 <HAL_GetTick>
 80029e8:	0003      	movs	r3, r0
 80029ea:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80029ec:	e009      	b.n	8002a02 <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80029ee:	f7fe fb77 	bl	80010e0 <HAL_GetTick>
 80029f2:	0002      	movs	r2, r0
 80029f4:	68fb      	ldr	r3, [r7, #12]
 80029f6:	1ad3      	subs	r3, r2, r3
 80029f8:	4a8a      	ldr	r2, [pc, #552]	@ (8002c24 <HAL_RCC_ClockConfig+0x274>)
 80029fa:	4293      	cmp	r3, r2
 80029fc:	d901      	bls.n	8002a02 <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 80029fe:	2303      	movs	r3, #3
 8002a00:	e109      	b.n	8002c16 <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002a02:	4b87      	ldr	r3, [pc, #540]	@ (8002c20 <HAL_RCC_ClockConfig+0x270>)
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	2201      	movs	r2, #1
 8002a08:	4013      	ands	r3, r2
 8002a0a:	683a      	ldr	r2, [r7, #0]
 8002a0c:	429a      	cmp	r2, r3
 8002a0e:	d1ee      	bne.n	80029ee <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	2202      	movs	r2, #2
 8002a16:	4013      	ands	r3, r2
 8002a18:	d009      	beq.n	8002a2e <HAL_RCC_ClockConfig+0x7e>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002a1a:	4b83      	ldr	r3, [pc, #524]	@ (8002c28 <HAL_RCC_ClockConfig+0x278>)
 8002a1c:	68db      	ldr	r3, [r3, #12]
 8002a1e:	22f0      	movs	r2, #240	@ 0xf0
 8002a20:	4393      	bics	r3, r2
 8002a22:	0019      	movs	r1, r3
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	689a      	ldr	r2, [r3, #8]
 8002a28:	4b7f      	ldr	r3, [pc, #508]	@ (8002c28 <HAL_RCC_ClockConfig+0x278>)
 8002a2a:	430a      	orrs	r2, r1
 8002a2c:	60da      	str	r2, [r3, #12]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	2201      	movs	r2, #1
 8002a34:	4013      	ands	r3, r2
 8002a36:	d100      	bne.n	8002a3a <HAL_RCC_ClockConfig+0x8a>
 8002a38:	e089      	b.n	8002b4e <HAL_RCC_ClockConfig+0x19e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	685b      	ldr	r3, [r3, #4]
 8002a3e:	2b02      	cmp	r3, #2
 8002a40:	d107      	bne.n	8002a52 <HAL_RCC_ClockConfig+0xa2>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002a42:	4b79      	ldr	r3, [pc, #484]	@ (8002c28 <HAL_RCC_ClockConfig+0x278>)
 8002a44:	681a      	ldr	r2, [r3, #0]
 8002a46:	2380      	movs	r3, #128	@ 0x80
 8002a48:	029b      	lsls	r3, r3, #10
 8002a4a:	4013      	ands	r3, r2
 8002a4c:	d120      	bne.n	8002a90 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8002a4e:	2301      	movs	r3, #1
 8002a50:	e0e1      	b.n	8002c16 <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	685b      	ldr	r3, [r3, #4]
 8002a56:	2b03      	cmp	r3, #3
 8002a58:	d107      	bne.n	8002a6a <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002a5a:	4b73      	ldr	r3, [pc, #460]	@ (8002c28 <HAL_RCC_ClockConfig+0x278>)
 8002a5c:	681a      	ldr	r2, [r3, #0]
 8002a5e:	2380      	movs	r3, #128	@ 0x80
 8002a60:	049b      	lsls	r3, r3, #18
 8002a62:	4013      	ands	r3, r2
 8002a64:	d114      	bne.n	8002a90 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8002a66:	2301      	movs	r3, #1
 8002a68:	e0d5      	b.n	8002c16 <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	685b      	ldr	r3, [r3, #4]
 8002a6e:	2b01      	cmp	r3, #1
 8002a70:	d106      	bne.n	8002a80 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002a72:	4b6d      	ldr	r3, [pc, #436]	@ (8002c28 <HAL_RCC_ClockConfig+0x278>)
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	2204      	movs	r2, #4
 8002a78:	4013      	ands	r3, r2
 8002a7a:	d109      	bne.n	8002a90 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8002a7c:	2301      	movs	r3, #1
 8002a7e:	e0ca      	b.n	8002c16 <HAL_RCC_ClockConfig+0x266>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8002a80:	4b69      	ldr	r3, [pc, #420]	@ (8002c28 <HAL_RCC_ClockConfig+0x278>)
 8002a82:	681a      	ldr	r2, [r3, #0]
 8002a84:	2380      	movs	r3, #128	@ 0x80
 8002a86:	009b      	lsls	r3, r3, #2
 8002a88:	4013      	ands	r3, r2
 8002a8a:	d101      	bne.n	8002a90 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8002a8c:	2301      	movs	r3, #1
 8002a8e:	e0c2      	b.n	8002c16 <HAL_RCC_ClockConfig+0x266>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002a90:	4b65      	ldr	r3, [pc, #404]	@ (8002c28 <HAL_RCC_ClockConfig+0x278>)
 8002a92:	68db      	ldr	r3, [r3, #12]
 8002a94:	2203      	movs	r2, #3
 8002a96:	4393      	bics	r3, r2
 8002a98:	0019      	movs	r1, r3
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	685a      	ldr	r2, [r3, #4]
 8002a9e:	4b62      	ldr	r3, [pc, #392]	@ (8002c28 <HAL_RCC_ClockConfig+0x278>)
 8002aa0:	430a      	orrs	r2, r1
 8002aa2:	60da      	str	r2, [r3, #12]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002aa4:	f7fe fb1c 	bl	80010e0 <HAL_GetTick>
 8002aa8:	0003      	movs	r3, r0
 8002aaa:	60fb      	str	r3, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	685b      	ldr	r3, [r3, #4]
 8002ab0:	2b02      	cmp	r3, #2
 8002ab2:	d111      	bne.n	8002ad8 <HAL_RCC_ClockConfig+0x128>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8002ab4:	e009      	b.n	8002aca <HAL_RCC_ClockConfig+0x11a>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002ab6:	f7fe fb13 	bl	80010e0 <HAL_GetTick>
 8002aba:	0002      	movs	r2, r0
 8002abc:	68fb      	ldr	r3, [r7, #12]
 8002abe:	1ad3      	subs	r3, r2, r3
 8002ac0:	4a58      	ldr	r2, [pc, #352]	@ (8002c24 <HAL_RCC_ClockConfig+0x274>)
 8002ac2:	4293      	cmp	r3, r2
 8002ac4:	d901      	bls.n	8002aca <HAL_RCC_ClockConfig+0x11a>
        {
          return HAL_TIMEOUT;
 8002ac6:	2303      	movs	r3, #3
 8002ac8:	e0a5      	b.n	8002c16 <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8002aca:	4b57      	ldr	r3, [pc, #348]	@ (8002c28 <HAL_RCC_ClockConfig+0x278>)
 8002acc:	68db      	ldr	r3, [r3, #12]
 8002ace:	220c      	movs	r2, #12
 8002ad0:	4013      	ands	r3, r2
 8002ad2:	2b08      	cmp	r3, #8
 8002ad4:	d1ef      	bne.n	8002ab6 <HAL_RCC_ClockConfig+0x106>
 8002ad6:	e03a      	b.n	8002b4e <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	685b      	ldr	r3, [r3, #4]
 8002adc:	2b03      	cmp	r3, #3
 8002ade:	d111      	bne.n	8002b04 <HAL_RCC_ClockConfig+0x154>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002ae0:	e009      	b.n	8002af6 <HAL_RCC_ClockConfig+0x146>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002ae2:	f7fe fafd 	bl	80010e0 <HAL_GetTick>
 8002ae6:	0002      	movs	r2, r0
 8002ae8:	68fb      	ldr	r3, [r7, #12]
 8002aea:	1ad3      	subs	r3, r2, r3
 8002aec:	4a4d      	ldr	r2, [pc, #308]	@ (8002c24 <HAL_RCC_ClockConfig+0x274>)
 8002aee:	4293      	cmp	r3, r2
 8002af0:	d901      	bls.n	8002af6 <HAL_RCC_ClockConfig+0x146>
        {
          return HAL_TIMEOUT;
 8002af2:	2303      	movs	r3, #3
 8002af4:	e08f      	b.n	8002c16 <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002af6:	4b4c      	ldr	r3, [pc, #304]	@ (8002c28 <HAL_RCC_ClockConfig+0x278>)
 8002af8:	68db      	ldr	r3, [r3, #12]
 8002afa:	220c      	movs	r2, #12
 8002afc:	4013      	ands	r3, r2
 8002afe:	2b0c      	cmp	r3, #12
 8002b00:	d1ef      	bne.n	8002ae2 <HAL_RCC_ClockConfig+0x132>
 8002b02:	e024      	b.n	8002b4e <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	685b      	ldr	r3, [r3, #4]
 8002b08:	2b01      	cmp	r3, #1
 8002b0a:	d11b      	bne.n	8002b44 <HAL_RCC_ClockConfig+0x194>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8002b0c:	e009      	b.n	8002b22 <HAL_RCC_ClockConfig+0x172>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002b0e:	f7fe fae7 	bl	80010e0 <HAL_GetTick>
 8002b12:	0002      	movs	r2, r0
 8002b14:	68fb      	ldr	r3, [r7, #12]
 8002b16:	1ad3      	subs	r3, r2, r3
 8002b18:	4a42      	ldr	r2, [pc, #264]	@ (8002c24 <HAL_RCC_ClockConfig+0x274>)
 8002b1a:	4293      	cmp	r3, r2
 8002b1c:	d901      	bls.n	8002b22 <HAL_RCC_ClockConfig+0x172>
        {
          return HAL_TIMEOUT;
 8002b1e:	2303      	movs	r3, #3
 8002b20:	e079      	b.n	8002c16 <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8002b22:	4b41      	ldr	r3, [pc, #260]	@ (8002c28 <HAL_RCC_ClockConfig+0x278>)
 8002b24:	68db      	ldr	r3, [r3, #12]
 8002b26:	220c      	movs	r2, #12
 8002b28:	4013      	ands	r3, r2
 8002b2a:	2b04      	cmp	r3, #4
 8002b2c:	d1ef      	bne.n	8002b0e <HAL_RCC_ClockConfig+0x15e>
 8002b2e:	e00e      	b.n	8002b4e <HAL_RCC_ClockConfig+0x19e>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002b30:	f7fe fad6 	bl	80010e0 <HAL_GetTick>
 8002b34:	0002      	movs	r2, r0
 8002b36:	68fb      	ldr	r3, [r7, #12]
 8002b38:	1ad3      	subs	r3, r2, r3
 8002b3a:	4a3a      	ldr	r2, [pc, #232]	@ (8002c24 <HAL_RCC_ClockConfig+0x274>)
 8002b3c:	4293      	cmp	r3, r2
 8002b3e:	d901      	bls.n	8002b44 <HAL_RCC_ClockConfig+0x194>
        {
          return HAL_TIMEOUT;
 8002b40:	2303      	movs	r3, #3
 8002b42:	e068      	b.n	8002c16 <HAL_RCC_ClockConfig+0x266>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8002b44:	4b38      	ldr	r3, [pc, #224]	@ (8002c28 <HAL_RCC_ClockConfig+0x278>)
 8002b46:	68db      	ldr	r3, [r3, #12]
 8002b48:	220c      	movs	r2, #12
 8002b4a:	4013      	ands	r3, r2
 8002b4c:	d1f0      	bne.n	8002b30 <HAL_RCC_ClockConfig+0x180>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002b4e:	4b34      	ldr	r3, [pc, #208]	@ (8002c20 <HAL_RCC_ClockConfig+0x270>)
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	2201      	movs	r2, #1
 8002b54:	4013      	ands	r3, r2
 8002b56:	683a      	ldr	r2, [r7, #0]
 8002b58:	429a      	cmp	r2, r3
 8002b5a:	d21e      	bcs.n	8002b9a <HAL_RCC_ClockConfig+0x1ea>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002b5c:	4b30      	ldr	r3, [pc, #192]	@ (8002c20 <HAL_RCC_ClockConfig+0x270>)
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	2201      	movs	r2, #1
 8002b62:	4393      	bics	r3, r2
 8002b64:	0019      	movs	r1, r3
 8002b66:	4b2e      	ldr	r3, [pc, #184]	@ (8002c20 <HAL_RCC_ClockConfig+0x270>)
 8002b68:	683a      	ldr	r2, [r7, #0]
 8002b6a:	430a      	orrs	r2, r1
 8002b6c:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8002b6e:	f7fe fab7 	bl	80010e0 <HAL_GetTick>
 8002b72:	0003      	movs	r3, r0
 8002b74:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002b76:	e009      	b.n	8002b8c <HAL_RCC_ClockConfig+0x1dc>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002b78:	f7fe fab2 	bl	80010e0 <HAL_GetTick>
 8002b7c:	0002      	movs	r2, r0
 8002b7e:	68fb      	ldr	r3, [r7, #12]
 8002b80:	1ad3      	subs	r3, r2, r3
 8002b82:	4a28      	ldr	r2, [pc, #160]	@ (8002c24 <HAL_RCC_ClockConfig+0x274>)
 8002b84:	4293      	cmp	r3, r2
 8002b86:	d901      	bls.n	8002b8c <HAL_RCC_ClockConfig+0x1dc>
      {
        return HAL_TIMEOUT;
 8002b88:	2303      	movs	r3, #3
 8002b8a:	e044      	b.n	8002c16 <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002b8c:	4b24      	ldr	r3, [pc, #144]	@ (8002c20 <HAL_RCC_ClockConfig+0x270>)
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	2201      	movs	r2, #1
 8002b92:	4013      	ands	r3, r2
 8002b94:	683a      	ldr	r2, [r7, #0]
 8002b96:	429a      	cmp	r2, r3
 8002b98:	d1ee      	bne.n	8002b78 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	2204      	movs	r2, #4
 8002ba0:	4013      	ands	r3, r2
 8002ba2:	d009      	beq.n	8002bb8 <HAL_RCC_ClockConfig+0x208>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002ba4:	4b20      	ldr	r3, [pc, #128]	@ (8002c28 <HAL_RCC_ClockConfig+0x278>)
 8002ba6:	68db      	ldr	r3, [r3, #12]
 8002ba8:	4a20      	ldr	r2, [pc, #128]	@ (8002c2c <HAL_RCC_ClockConfig+0x27c>)
 8002baa:	4013      	ands	r3, r2
 8002bac:	0019      	movs	r1, r3
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	68da      	ldr	r2, [r3, #12]
 8002bb2:	4b1d      	ldr	r3, [pc, #116]	@ (8002c28 <HAL_RCC_ClockConfig+0x278>)
 8002bb4:	430a      	orrs	r2, r1
 8002bb6:	60da      	str	r2, [r3, #12]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	2208      	movs	r2, #8
 8002bbe:	4013      	ands	r3, r2
 8002bc0:	d00a      	beq.n	8002bd8 <HAL_RCC_ClockConfig+0x228>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002bc2:	4b19      	ldr	r3, [pc, #100]	@ (8002c28 <HAL_RCC_ClockConfig+0x278>)
 8002bc4:	68db      	ldr	r3, [r3, #12]
 8002bc6:	4a1a      	ldr	r2, [pc, #104]	@ (8002c30 <HAL_RCC_ClockConfig+0x280>)
 8002bc8:	4013      	ands	r3, r2
 8002bca:	0019      	movs	r1, r3
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	691b      	ldr	r3, [r3, #16]
 8002bd0:	00da      	lsls	r2, r3, #3
 8002bd2:	4b15      	ldr	r3, [pc, #84]	@ (8002c28 <HAL_RCC_ClockConfig+0x278>)
 8002bd4:	430a      	orrs	r2, r1
 8002bd6:	60da      	str	r2, [r3, #12]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002bd8:	f000 f832 	bl	8002c40 <HAL_RCC_GetSysClockFreq>
 8002bdc:	0001      	movs	r1, r0
 8002bde:	4b12      	ldr	r3, [pc, #72]	@ (8002c28 <HAL_RCC_ClockConfig+0x278>)
 8002be0:	68db      	ldr	r3, [r3, #12]
 8002be2:	091b      	lsrs	r3, r3, #4
 8002be4:	220f      	movs	r2, #15
 8002be6:	4013      	ands	r3, r2
 8002be8:	4a12      	ldr	r2, [pc, #72]	@ (8002c34 <HAL_RCC_ClockConfig+0x284>)
 8002bea:	5cd3      	ldrb	r3, [r2, r3]
 8002bec:	000a      	movs	r2, r1
 8002bee:	40da      	lsrs	r2, r3
 8002bf0:	4b11      	ldr	r3, [pc, #68]	@ (8002c38 <HAL_RCC_ClockConfig+0x288>)
 8002bf2:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8002bf4:	4b11      	ldr	r3, [pc, #68]	@ (8002c3c <HAL_RCC_ClockConfig+0x28c>)
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	250b      	movs	r5, #11
 8002bfa:	197c      	adds	r4, r7, r5
 8002bfc:	0018      	movs	r0, r3
 8002bfe:	f7fe fa29 	bl	8001054 <HAL_InitTick>
 8002c02:	0003      	movs	r3, r0
 8002c04:	7023      	strb	r3, [r4, #0]
  if(status != HAL_OK)
 8002c06:	197b      	adds	r3, r7, r5
 8002c08:	781b      	ldrb	r3, [r3, #0]
 8002c0a:	2b00      	cmp	r3, #0
 8002c0c:	d002      	beq.n	8002c14 <HAL_RCC_ClockConfig+0x264>
  {
    return status;
 8002c0e:	197b      	adds	r3, r7, r5
 8002c10:	781b      	ldrb	r3, [r3, #0]
 8002c12:	e000      	b.n	8002c16 <HAL_RCC_ClockConfig+0x266>
  }

  return HAL_OK;
 8002c14:	2300      	movs	r3, #0
}
 8002c16:	0018      	movs	r0, r3
 8002c18:	46bd      	mov	sp, r7
 8002c1a:	b004      	add	sp, #16
 8002c1c:	bdb0      	pop	{r4, r5, r7, pc}
 8002c1e:	46c0      	nop			@ (mov r8, r8)
 8002c20:	40022000 	.word	0x40022000
 8002c24:	00001388 	.word	0x00001388
 8002c28:	40021000 	.word	0x40021000
 8002c2c:	fffff8ff 	.word	0xfffff8ff
 8002c30:	ffffc7ff 	.word	0xffffc7ff
 8002c34:	0800554c 	.word	0x0800554c
 8002c38:	20000008 	.word	0x20000008
 8002c3c:	2000000c 	.word	0x2000000c

08002c40 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002c40:	b5b0      	push	{r4, r5, r7, lr}
 8002c42:	b08e      	sub	sp, #56	@ 0x38
 8002c44:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange;    /* no init needed */
  uint32_t sysclockfreq;

  tmpreg = RCC->CFGR;
 8002c46:	4b4c      	ldr	r3, [pc, #304]	@ (8002d78 <HAL_RCC_GetSysClockFreq+0x138>)
 8002c48:	68db      	ldr	r3, [r3, #12]
 8002c4a:	62fb      	str	r3, [r7, #44]	@ 0x2c

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002c4c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002c4e:	230c      	movs	r3, #12
 8002c50:	4013      	ands	r3, r2
 8002c52:	2b0c      	cmp	r3, #12
 8002c54:	d014      	beq.n	8002c80 <HAL_RCC_GetSysClockFreq+0x40>
 8002c56:	d900      	bls.n	8002c5a <HAL_RCC_GetSysClockFreq+0x1a>
 8002c58:	e07b      	b.n	8002d52 <HAL_RCC_GetSysClockFreq+0x112>
 8002c5a:	2b04      	cmp	r3, #4
 8002c5c:	d002      	beq.n	8002c64 <HAL_RCC_GetSysClockFreq+0x24>
 8002c5e:	2b08      	cmp	r3, #8
 8002c60:	d00b      	beq.n	8002c7a <HAL_RCC_GetSysClockFreq+0x3a>
 8002c62:	e076      	b.n	8002d52 <HAL_RCC_GetSysClockFreq+0x112>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8002c64:	4b44      	ldr	r3, [pc, #272]	@ (8002d78 <HAL_RCC_GetSysClockFreq+0x138>)
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	2210      	movs	r2, #16
 8002c6a:	4013      	ands	r3, r2
 8002c6c:	d002      	beq.n	8002c74 <HAL_RCC_GetSysClockFreq+0x34>
      {
        sysclockfreq =  (HSI_VALUE >> 2);
 8002c6e:	4b43      	ldr	r3, [pc, #268]	@ (8002d7c <HAL_RCC_GetSysClockFreq+0x13c>)
 8002c70:	633b      	str	r3, [r7, #48]	@ 0x30
      }
      else
      {
        sysclockfreq =  HSI_VALUE;
      }
      break;
 8002c72:	e07c      	b.n	8002d6e <HAL_RCC_GetSysClockFreq+0x12e>
        sysclockfreq =  HSI_VALUE;
 8002c74:	4b42      	ldr	r3, [pc, #264]	@ (8002d80 <HAL_RCC_GetSysClockFreq+0x140>)
 8002c76:	633b      	str	r3, [r7, #48]	@ 0x30
      break;
 8002c78:	e079      	b.n	8002d6e <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002c7a:	4b42      	ldr	r3, [pc, #264]	@ (8002d84 <HAL_RCC_GetSysClockFreq+0x144>)
 8002c7c:	633b      	str	r3, [r7, #48]	@ 0x30
      break;
 8002c7e:	e076      	b.n	8002d6e <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 8002c80:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002c82:	0c9a      	lsrs	r2, r3, #18
 8002c84:	230f      	movs	r3, #15
 8002c86:	401a      	ands	r2, r3
 8002c88:	4b3f      	ldr	r3, [pc, #252]	@ (8002d88 <HAL_RCC_GetSysClockFreq+0x148>)
 8002c8a:	5c9b      	ldrb	r3, [r3, r2]
 8002c8c:	62bb      	str	r3, [r7, #40]	@ 0x28
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 8002c8e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002c90:	0d9a      	lsrs	r2, r3, #22
 8002c92:	2303      	movs	r3, #3
 8002c94:	4013      	ands	r3, r2
 8002c96:	3301      	adds	r3, #1
 8002c98:	627b      	str	r3, [r7, #36]	@ 0x24
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002c9a:	4b37      	ldr	r3, [pc, #220]	@ (8002d78 <HAL_RCC_GetSysClockFreq+0x138>)
 8002c9c:	68da      	ldr	r2, [r3, #12]
 8002c9e:	2380      	movs	r3, #128	@ 0x80
 8002ca0:	025b      	lsls	r3, r3, #9
 8002ca2:	4013      	ands	r3, r2
 8002ca4:	d01a      	beq.n	8002cdc <HAL_RCC_GetSysClockFreq+0x9c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8002ca6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002ca8:	61bb      	str	r3, [r7, #24]
 8002caa:	2300      	movs	r3, #0
 8002cac:	61fb      	str	r3, [r7, #28]
 8002cae:	4a35      	ldr	r2, [pc, #212]	@ (8002d84 <HAL_RCC_GetSysClockFreq+0x144>)
 8002cb0:	2300      	movs	r3, #0
 8002cb2:	69b8      	ldr	r0, [r7, #24]
 8002cb4:	69f9      	ldr	r1, [r7, #28]
 8002cb6:	f7fd fad3 	bl	8000260 <__aeabi_lmul>
 8002cba:	0002      	movs	r2, r0
 8002cbc:	000b      	movs	r3, r1
 8002cbe:	0010      	movs	r0, r2
 8002cc0:	0019      	movs	r1, r3
 8002cc2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002cc4:	613b      	str	r3, [r7, #16]
 8002cc6:	2300      	movs	r3, #0
 8002cc8:	617b      	str	r3, [r7, #20]
 8002cca:	693a      	ldr	r2, [r7, #16]
 8002ccc:	697b      	ldr	r3, [r7, #20]
 8002cce:	f7fd faa7 	bl	8000220 <__aeabi_uldivmod>
 8002cd2:	0002      	movs	r2, r0
 8002cd4:	000b      	movs	r3, r1
 8002cd6:	0013      	movs	r3, r2
 8002cd8:	637b      	str	r3, [r7, #52]	@ 0x34
 8002cda:	e037      	b.n	8002d4c <HAL_RCC_GetSysClockFreq+0x10c>
      }
      else
      {
        if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8002cdc:	4b26      	ldr	r3, [pc, #152]	@ (8002d78 <HAL_RCC_GetSysClockFreq+0x138>)
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	2210      	movs	r2, #16
 8002ce2:	4013      	ands	r3, r2
 8002ce4:	d01a      	beq.n	8002d1c <HAL_RCC_GetSysClockFreq+0xdc>
        {
          pllvco = (uint32_t)((((uint64_t)(HSI_VALUE >> 2)) * (uint64_t)pllm) / (uint64_t)plld);
 8002ce6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002ce8:	60bb      	str	r3, [r7, #8]
 8002cea:	2300      	movs	r3, #0
 8002cec:	60fb      	str	r3, [r7, #12]
 8002cee:	4a23      	ldr	r2, [pc, #140]	@ (8002d7c <HAL_RCC_GetSysClockFreq+0x13c>)
 8002cf0:	2300      	movs	r3, #0
 8002cf2:	68b8      	ldr	r0, [r7, #8]
 8002cf4:	68f9      	ldr	r1, [r7, #12]
 8002cf6:	f7fd fab3 	bl	8000260 <__aeabi_lmul>
 8002cfa:	0002      	movs	r2, r0
 8002cfc:	000b      	movs	r3, r1
 8002cfe:	0010      	movs	r0, r2
 8002d00:	0019      	movs	r1, r3
 8002d02:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d04:	603b      	str	r3, [r7, #0]
 8002d06:	2300      	movs	r3, #0
 8002d08:	607b      	str	r3, [r7, #4]
 8002d0a:	683a      	ldr	r2, [r7, #0]
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	f7fd fa87 	bl	8000220 <__aeabi_uldivmod>
 8002d12:	0002      	movs	r2, r0
 8002d14:	000b      	movs	r3, r1
 8002d16:	0013      	movs	r3, r2
 8002d18:	637b      	str	r3, [r7, #52]	@ 0x34
 8002d1a:	e017      	b.n	8002d4c <HAL_RCC_GetSysClockFreq+0x10c>
        }
        else
        {
         pllvco = (uint32_t)(((uint64_t)HSI_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8002d1c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002d1e:	0018      	movs	r0, r3
 8002d20:	2300      	movs	r3, #0
 8002d22:	0019      	movs	r1, r3
 8002d24:	4a16      	ldr	r2, [pc, #88]	@ (8002d80 <HAL_RCC_GetSysClockFreq+0x140>)
 8002d26:	2300      	movs	r3, #0
 8002d28:	f7fd fa9a 	bl	8000260 <__aeabi_lmul>
 8002d2c:	0002      	movs	r2, r0
 8002d2e:	000b      	movs	r3, r1
 8002d30:	0010      	movs	r0, r2
 8002d32:	0019      	movs	r1, r3
 8002d34:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d36:	001c      	movs	r4, r3
 8002d38:	2300      	movs	r3, #0
 8002d3a:	001d      	movs	r5, r3
 8002d3c:	0022      	movs	r2, r4
 8002d3e:	002b      	movs	r3, r5
 8002d40:	f7fd fa6e 	bl	8000220 <__aeabi_uldivmod>
 8002d44:	0002      	movs	r2, r0
 8002d46:	000b      	movs	r3, r1
 8002d48:	0013      	movs	r3, r2
 8002d4a:	637b      	str	r3, [r7, #52]	@ 0x34
        }
      }
      sysclockfreq = pllvco;
 8002d4c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002d4e:	633b      	str	r3, [r7, #48]	@ 0x30
      break;
 8002d50:	e00d      	b.n	8002d6e <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 8002d52:	4b09      	ldr	r3, [pc, #36]	@ (8002d78 <HAL_RCC_GetSysClockFreq+0x138>)
 8002d54:	685b      	ldr	r3, [r3, #4]
 8002d56:	0b5b      	lsrs	r3, r3, #13
 8002d58:	2207      	movs	r2, #7
 8002d5a:	4013      	ands	r3, r2
 8002d5c:	623b      	str	r3, [r7, #32]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 8002d5e:	6a3b      	ldr	r3, [r7, #32]
 8002d60:	3301      	adds	r3, #1
 8002d62:	2280      	movs	r2, #128	@ 0x80
 8002d64:	0212      	lsls	r2, r2, #8
 8002d66:	409a      	lsls	r2, r3
 8002d68:	0013      	movs	r3, r2
 8002d6a:	633b      	str	r3, [r7, #48]	@ 0x30
      break;
 8002d6c:	46c0      	nop			@ (mov r8, r8)
    }
  }
  return sysclockfreq;
 8002d6e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
}
 8002d70:	0018      	movs	r0, r3
 8002d72:	46bd      	mov	sp, r7
 8002d74:	b00e      	add	sp, #56	@ 0x38
 8002d76:	bdb0      	pop	{r4, r5, r7, pc}
 8002d78:	40021000 	.word	0x40021000
 8002d7c:	003d0900 	.word	0x003d0900
 8002d80:	00f42400 	.word	0x00f42400
 8002d84:	007a1200 	.word	0x007a1200
 8002d88:	08005564 	.word	0x08005564

08002d8c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002d8c:	b580      	push	{r7, lr}
 8002d8e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002d90:	4b02      	ldr	r3, [pc, #8]	@ (8002d9c <HAL_RCC_GetHCLKFreq+0x10>)
 8002d92:	681b      	ldr	r3, [r3, #0]
}
 8002d94:	0018      	movs	r0, r3
 8002d96:	46bd      	mov	sp, r7
 8002d98:	bd80      	pop	{r7, pc}
 8002d9a:	46c0      	nop			@ (mov r8, r8)
 8002d9c:	20000008 	.word	0x20000008

08002da0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002da0:	b580      	push	{r7, lr}
 8002da2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002da4:	f7ff fff2 	bl	8002d8c <HAL_RCC_GetHCLKFreq>
 8002da8:	0001      	movs	r1, r0
 8002daa:	4b06      	ldr	r3, [pc, #24]	@ (8002dc4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002dac:	68db      	ldr	r3, [r3, #12]
 8002dae:	0a1b      	lsrs	r3, r3, #8
 8002db0:	2207      	movs	r2, #7
 8002db2:	4013      	ands	r3, r2
 8002db4:	4a04      	ldr	r2, [pc, #16]	@ (8002dc8 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002db6:	5cd3      	ldrb	r3, [r2, r3]
 8002db8:	40d9      	lsrs	r1, r3
 8002dba:	000b      	movs	r3, r1
}
 8002dbc:	0018      	movs	r0, r3
 8002dbe:	46bd      	mov	sp, r7
 8002dc0:	bd80      	pop	{r7, pc}
 8002dc2:	46c0      	nop			@ (mov r8, r8)
 8002dc4:	40021000 	.word	0x40021000
 8002dc8:	0800555c 	.word	0x0800555c

08002dcc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002dcc:	b580      	push	{r7, lr}
 8002dce:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002dd0:	f7ff ffdc 	bl	8002d8c <HAL_RCC_GetHCLKFreq>
 8002dd4:	0001      	movs	r1, r0
 8002dd6:	4b06      	ldr	r3, [pc, #24]	@ (8002df0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002dd8:	68db      	ldr	r3, [r3, #12]
 8002dda:	0adb      	lsrs	r3, r3, #11
 8002ddc:	2207      	movs	r2, #7
 8002dde:	4013      	ands	r3, r2
 8002de0:	4a04      	ldr	r2, [pc, #16]	@ (8002df4 <HAL_RCC_GetPCLK2Freq+0x28>)
 8002de2:	5cd3      	ldrb	r3, [r2, r3]
 8002de4:	40d9      	lsrs	r1, r3
 8002de6:	000b      	movs	r3, r1
}
 8002de8:	0018      	movs	r0, r3
 8002dea:	46bd      	mov	sp, r7
 8002dec:	bd80      	pop	{r7, pc}
 8002dee:	46c0      	nop			@ (mov r8, r8)
 8002df0:	40021000 	.word	0x40021000
 8002df4:	0800555c 	.word	0x0800555c

08002df8 <HAL_RCCEx_PeriphCLKConfig>:
  * @retval HAL status
  * @note   If HAL_ERROR returned, first switch-OFF HSE clock oscillator with @ref HAL_RCC_OscConfig()
  *         to possibly update HSE divider.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002df8:	b580      	push	{r7, lr}
 8002dfa:	b086      	sub	sp, #24
 8002dfc:	af00      	add	r7, sp, #0
 8002dfe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_reg;
  FlagStatus       pwrclkchanged = RESET;
 8002e00:	2317      	movs	r3, #23
 8002e02:	18fb      	adds	r3, r7, r3
 8002e04:	2200      	movs	r2, #0
 8002e06:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	2220      	movs	r2, #32
 8002e0e:	4013      	ands	r3, r2
 8002e10:	d106      	bne.n	8002e20 <HAL_RCCEx_PeriphCLKConfig+0x28>
#if defined(LCD)
   || (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD)
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	681a      	ldr	r2, [r3, #0]
 8002e16:	2380      	movs	r3, #128	@ 0x80
 8002e18:	011b      	lsls	r3, r3, #4
 8002e1a:	4013      	ands	r3, r2
 8002e1c:	d100      	bne.n	8002e20 <HAL_RCCEx_PeriphCLKConfig+0x28>
 8002e1e:	e104      	b.n	800302a <HAL_RCCEx_PeriphCLKConfig+0x232>
#endif /* LCD */

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002e20:	4bb1      	ldr	r3, [pc, #708]	@ (80030e8 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8002e22:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002e24:	2380      	movs	r3, #128	@ 0x80
 8002e26:	055b      	lsls	r3, r3, #21
 8002e28:	4013      	ands	r3, r2
 8002e2a:	d10a      	bne.n	8002e42 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002e2c:	4bae      	ldr	r3, [pc, #696]	@ (80030e8 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8002e2e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002e30:	4bad      	ldr	r3, [pc, #692]	@ (80030e8 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8002e32:	2180      	movs	r1, #128	@ 0x80
 8002e34:	0549      	lsls	r1, r1, #21
 8002e36:	430a      	orrs	r2, r1
 8002e38:	639a      	str	r2, [r3, #56]	@ 0x38
      pwrclkchanged = SET;
 8002e3a:	2317      	movs	r3, #23
 8002e3c:	18fb      	adds	r3, r7, r3
 8002e3e:	2201      	movs	r2, #1
 8002e40:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002e42:	4baa      	ldr	r3, [pc, #680]	@ (80030ec <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8002e44:	681a      	ldr	r2, [r3, #0]
 8002e46:	2380      	movs	r3, #128	@ 0x80
 8002e48:	005b      	lsls	r3, r3, #1
 8002e4a:	4013      	ands	r3, r2
 8002e4c:	d11a      	bne.n	8002e84 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002e4e:	4ba7      	ldr	r3, [pc, #668]	@ (80030ec <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8002e50:	681a      	ldr	r2, [r3, #0]
 8002e52:	4ba6      	ldr	r3, [pc, #664]	@ (80030ec <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8002e54:	2180      	movs	r1, #128	@ 0x80
 8002e56:	0049      	lsls	r1, r1, #1
 8002e58:	430a      	orrs	r2, r1
 8002e5a:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002e5c:	f7fe f940 	bl	80010e0 <HAL_GetTick>
 8002e60:	0003      	movs	r3, r0
 8002e62:	613b      	str	r3, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002e64:	e008      	b.n	8002e78 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002e66:	f7fe f93b 	bl	80010e0 <HAL_GetTick>
 8002e6a:	0002      	movs	r2, r0
 8002e6c:	693b      	ldr	r3, [r7, #16]
 8002e6e:	1ad3      	subs	r3, r2, r3
 8002e70:	2b64      	cmp	r3, #100	@ 0x64
 8002e72:	d901      	bls.n	8002e78 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8002e74:	2303      	movs	r3, #3
 8002e76:	e133      	b.n	80030e0 <HAL_RCCEx_PeriphCLKConfig+0x2e8>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002e78:	4b9c      	ldr	r3, [pc, #624]	@ (80030ec <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8002e7a:	681a      	ldr	r2, [r3, #0]
 8002e7c:	2380      	movs	r3, #128	@ 0x80
 8002e7e:	005b      	lsls	r3, r3, #1
 8002e80:	4013      	ands	r3, r2
 8002e82:	d0f0      	beq.n	8002e66 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }

    /* Check if user wants to change HSE RTC prescaler whereas HSE is enabled */
    temp_reg = (RCC->CR & RCC_CR_RTCPRE);
 8002e84:	4b98      	ldr	r3, [pc, #608]	@ (80030e8 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8002e86:	681a      	ldr	r2, [r3, #0]
 8002e88:	23c0      	movs	r3, #192	@ 0xc0
 8002e8a:	039b      	lsls	r3, r3, #14
 8002e8c:	4013      	ands	r3, r2
 8002e8e:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CR_RTCPRE))
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	685a      	ldr	r2, [r3, #4]
 8002e94:	23c0      	movs	r3, #192	@ 0xc0
 8002e96:	039b      	lsls	r3, r3, #14
 8002e98:	4013      	ands	r3, r2
 8002e9a:	68fa      	ldr	r2, [r7, #12]
 8002e9c:	429a      	cmp	r2, r3
 8002e9e:	d107      	bne.n	8002eb0 <HAL_RCCEx_PeriphCLKConfig+0xb8>
#if defined (LCD)
     || (temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CR_RTCPRE))
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	689a      	ldr	r2, [r3, #8]
 8002ea4:	23c0      	movs	r3, #192	@ 0xc0
 8002ea6:	039b      	lsls	r3, r3, #14
 8002ea8:	4013      	ands	r3, r2
 8002eaa:	68fa      	ldr	r2, [r7, #12]
 8002eac:	429a      	cmp	r2, r3
 8002eae:	d013      	beq.n	8002ed8 <HAL_RCCEx_PeriphCLKConfig+0xe0>
#endif /* LCD */
       )
    { /* Check HSE State */
      if ((PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL) == RCC_CSR_RTCSEL_HSE)
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	685a      	ldr	r2, [r3, #4]
 8002eb4:	23c0      	movs	r3, #192	@ 0xc0
 8002eb6:	029b      	lsls	r3, r3, #10
 8002eb8:	401a      	ands	r2, r3
 8002eba:	23c0      	movs	r3, #192	@ 0xc0
 8002ebc:	029b      	lsls	r3, r3, #10
 8002ebe:	429a      	cmp	r2, r3
 8002ec0:	d10a      	bne.n	8002ed8 <HAL_RCCEx_PeriphCLKConfig+0xe0>
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8002ec2:	4b89      	ldr	r3, [pc, #548]	@ (80030e8 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8002ec4:	681a      	ldr	r2, [r3, #0]
 8002ec6:	2380      	movs	r3, #128	@ 0x80
 8002ec8:	029b      	lsls	r3, r3, #10
 8002eca:	401a      	ands	r2, r3
 8002ecc:	2380      	movs	r3, #128	@ 0x80
 8002ece:	029b      	lsls	r3, r3, #10
 8002ed0:	429a      	cmp	r2, r3
 8002ed2:	d101      	bne.n	8002ed8 <HAL_RCCEx_PeriphCLKConfig+0xe0>
        {
          /* To update HSE divider, first switch-OFF HSE clock oscillator*/
          return HAL_ERROR;
 8002ed4:	2301      	movs	r3, #1
 8002ed6:	e103      	b.n	80030e0 <HAL_RCCEx_PeriphCLKConfig+0x2e8>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->CSR & RCC_CSR_RTCSEL);
 8002ed8:	4b83      	ldr	r3, [pc, #524]	@ (80030e8 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8002eda:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8002edc:	23c0      	movs	r3, #192	@ 0xc0
 8002ede:	029b      	lsls	r3, r3, #10
 8002ee0:	4013      	ands	r3, r2
 8002ee2:	60fb      	str	r3, [r7, #12]

    if((temp_reg != 0x00000000U) && (((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL)) \
 8002ee4:	68fb      	ldr	r3, [r7, #12]
 8002ee6:	2b00      	cmp	r3, #0
 8002ee8:	d049      	beq.n	8002f7e <HAL_RCCEx_PeriphCLKConfig+0x186>
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	685a      	ldr	r2, [r3, #4]
 8002eee:	23c0      	movs	r3, #192	@ 0xc0
 8002ef0:	029b      	lsls	r3, r3, #10
 8002ef2:	4013      	ands	r3, r2
 8002ef4:	68fa      	ldr	r2, [r7, #12]
 8002ef6:	429a      	cmp	r2, r3
 8002ef8:	d004      	beq.n	8002f04 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	2220      	movs	r2, #32
 8002f00:	4013      	ands	r3, r2
 8002f02:	d10d      	bne.n	8002f20 <HAL_RCCEx_PeriphCLKConfig+0x128>
#if defined(LCD)
      || ((temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CSR_RTCSEL)) \
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	689a      	ldr	r2, [r3, #8]
 8002f08:	23c0      	movs	r3, #192	@ 0xc0
 8002f0a:	029b      	lsls	r3, r3, #10
 8002f0c:	4013      	ands	r3, r2
 8002f0e:	68fa      	ldr	r2, [r7, #12]
 8002f10:	429a      	cmp	r2, r3
 8002f12:	d034      	beq.n	8002f7e <HAL_RCCEx_PeriphCLKConfig+0x186>
       && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD))
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	681a      	ldr	r2, [r3, #0]
 8002f18:	2380      	movs	r3, #128	@ 0x80
 8002f1a:	011b      	lsls	r3, r3, #4
 8002f1c:	4013      	ands	r3, r2
 8002f1e:	d02e      	beq.n	8002f7e <HAL_RCCEx_PeriphCLKConfig+0x186>
#endif /* LCD */
     ))
    {
      /* Store the content of CSR register before the reset of Backup Domain */
      temp_reg = (RCC->CSR & ~(RCC_CSR_RTCSEL));
 8002f20:	4b71      	ldr	r3, [pc, #452]	@ (80030e8 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8002f22:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002f24:	4a72      	ldr	r2, [pc, #456]	@ (80030f0 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 8002f26:	4013      	ands	r3, r2
 8002f28:	60fb      	str	r3, [r7, #12]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002f2a:	4b6f      	ldr	r3, [pc, #444]	@ (80030e8 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8002f2c:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8002f2e:	4b6e      	ldr	r3, [pc, #440]	@ (80030e8 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8002f30:	2180      	movs	r1, #128	@ 0x80
 8002f32:	0309      	lsls	r1, r1, #12
 8002f34:	430a      	orrs	r2, r1
 8002f36:	651a      	str	r2, [r3, #80]	@ 0x50
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002f38:	4b6b      	ldr	r3, [pc, #428]	@ (80030e8 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8002f3a:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8002f3c:	4b6a      	ldr	r3, [pc, #424]	@ (80030e8 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8002f3e:	496d      	ldr	r1, [pc, #436]	@ (80030f4 <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 8002f40:	400a      	ands	r2, r1
 8002f42:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Restore the Content of CSR register */
      RCC->CSR = temp_reg;
 8002f44:	4b68      	ldr	r3, [pc, #416]	@ (80030e8 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8002f46:	68fa      	ldr	r2, [r7, #12]
 8002f48:	651a      	str	r2, [r3, #80]	@ 0x50

       /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_CSR_LSEON))
 8002f4a:	68fa      	ldr	r2, [r7, #12]
 8002f4c:	2380      	movs	r3, #128	@ 0x80
 8002f4e:	005b      	lsls	r3, r3, #1
 8002f50:	4013      	ands	r3, r2
 8002f52:	d014      	beq.n	8002f7e <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f54:	f7fe f8c4 	bl	80010e0 <HAL_GetTick>
 8002f58:	0003      	movs	r3, r0
 8002f5a:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002f5c:	e009      	b.n	8002f72 <HAL_RCCEx_PeriphCLKConfig+0x17a>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002f5e:	f7fe f8bf 	bl	80010e0 <HAL_GetTick>
 8002f62:	0002      	movs	r2, r0
 8002f64:	693b      	ldr	r3, [r7, #16]
 8002f66:	1ad3      	subs	r3, r2, r3
 8002f68:	4a63      	ldr	r2, [pc, #396]	@ (80030f8 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8002f6a:	4293      	cmp	r3, r2
 8002f6c:	d901      	bls.n	8002f72 <HAL_RCCEx_PeriphCLKConfig+0x17a>
          {
            return HAL_TIMEOUT;
 8002f6e:	2303      	movs	r3, #3
 8002f70:	e0b6      	b.n	80030e0 <HAL_RCCEx_PeriphCLKConfig+0x2e8>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002f72:	4b5d      	ldr	r3, [pc, #372]	@ (80030e8 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8002f74:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8002f76:	2380      	movs	r3, #128	@ 0x80
 8002f78:	009b      	lsls	r3, r3, #2
 8002f7a:	4013      	ands	r3, r2
 8002f7c:	d0ef      	beq.n	8002f5e <HAL_RCCEx_PeriphCLKConfig+0x166>
          }
        }
      }
    }
#if defined(LCD)
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD)
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	681a      	ldr	r2, [r3, #0]
 8002f82:	2380      	movs	r3, #128	@ 0x80
 8002f84:	011b      	lsls	r3, r3, #4
 8002f86:	4013      	ands	r3, r2
 8002f88:	d01f      	beq.n	8002fca <HAL_RCCEx_PeriphCLKConfig+0x1d2>
    {
      __HAL_RCC_LCD_CONFIG(PeriphClkInit->LCDClockSelection);
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	689a      	ldr	r2, [r3, #8]
 8002f8e:	23c0      	movs	r3, #192	@ 0xc0
 8002f90:	029b      	lsls	r3, r3, #10
 8002f92:	401a      	ands	r2, r3
 8002f94:	23c0      	movs	r3, #192	@ 0xc0
 8002f96:	029b      	lsls	r3, r3, #10
 8002f98:	429a      	cmp	r2, r3
 8002f9a:	d10c      	bne.n	8002fb6 <HAL_RCCEx_PeriphCLKConfig+0x1be>
 8002f9c:	4b52      	ldr	r3, [pc, #328]	@ (80030e8 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	4a56      	ldr	r2, [pc, #344]	@ (80030fc <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8002fa2:	4013      	ands	r3, r2
 8002fa4:	0019      	movs	r1, r3
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	689a      	ldr	r2, [r3, #8]
 8002faa:	23c0      	movs	r3, #192	@ 0xc0
 8002fac:	039b      	lsls	r3, r3, #14
 8002fae:	401a      	ands	r2, r3
 8002fb0:	4b4d      	ldr	r3, [pc, #308]	@ (80030e8 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8002fb2:	430a      	orrs	r2, r1
 8002fb4:	601a      	str	r2, [r3, #0]
 8002fb6:	4b4c      	ldr	r3, [pc, #304]	@ (80030e8 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8002fb8:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	689a      	ldr	r2, [r3, #8]
 8002fbe:	23c0      	movs	r3, #192	@ 0xc0
 8002fc0:	029b      	lsls	r3, r3, #10
 8002fc2:	401a      	ands	r2, r3
 8002fc4:	4b48      	ldr	r3, [pc, #288]	@ (80030e8 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8002fc6:	430a      	orrs	r2, r1
 8002fc8:	651a      	str	r2, [r3, #80]	@ 0x50
    } 
#endif /* LCD */

    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	2220      	movs	r2, #32
 8002fd0:	4013      	ands	r3, r2
 8002fd2:	d01f      	beq.n	8003014 <HAL_RCCEx_PeriphCLKConfig+0x21c>
    {
      __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	685a      	ldr	r2, [r3, #4]
 8002fd8:	23c0      	movs	r3, #192	@ 0xc0
 8002fda:	029b      	lsls	r3, r3, #10
 8002fdc:	401a      	ands	r2, r3
 8002fde:	23c0      	movs	r3, #192	@ 0xc0
 8002fe0:	029b      	lsls	r3, r3, #10
 8002fe2:	429a      	cmp	r2, r3
 8002fe4:	d10c      	bne.n	8003000 <HAL_RCCEx_PeriphCLKConfig+0x208>
 8002fe6:	4b40      	ldr	r3, [pc, #256]	@ (80030e8 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	4a44      	ldr	r2, [pc, #272]	@ (80030fc <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8002fec:	4013      	ands	r3, r2
 8002fee:	0019      	movs	r1, r3
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	685a      	ldr	r2, [r3, #4]
 8002ff4:	23c0      	movs	r3, #192	@ 0xc0
 8002ff6:	039b      	lsls	r3, r3, #14
 8002ff8:	401a      	ands	r2, r3
 8002ffa:	4b3b      	ldr	r3, [pc, #236]	@ (80030e8 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8002ffc:	430a      	orrs	r2, r1
 8002ffe:	601a      	str	r2, [r3, #0]
 8003000:	4b39      	ldr	r3, [pc, #228]	@ (80030e8 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8003002:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	685a      	ldr	r2, [r3, #4]
 8003008:	23c0      	movs	r3, #192	@ 0xc0
 800300a:	029b      	lsls	r3, r3, #10
 800300c:	401a      	ands	r2, r3
 800300e:	4b36      	ldr	r3, [pc, #216]	@ (80030e8 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8003010:	430a      	orrs	r2, r1
 8003012:	651a      	str	r2, [r3, #80]	@ 0x50
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8003014:	2317      	movs	r3, #23
 8003016:	18fb      	adds	r3, r7, r3
 8003018:	781b      	ldrb	r3, [r3, #0]
 800301a:	2b01      	cmp	r3, #1
 800301c:	d105      	bne.n	800302a <HAL_RCCEx_PeriphCLKConfig+0x232>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800301e:	4b32      	ldr	r3, [pc, #200]	@ (80030e8 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8003020:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003022:	4b31      	ldr	r3, [pc, #196]	@ (80030e8 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8003024:	4936      	ldr	r1, [pc, #216]	@ (8003100 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8003026:	400a      	ands	r2, r1
 8003028:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

#if defined (RCC_CCIPR_USART1SEL)
  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	2201      	movs	r2, #1
 8003030:	4013      	ands	r3, r2
 8003032:	d009      	beq.n	8003048 <HAL_RCCEx_PeriphCLKConfig+0x250>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003034:	4b2c      	ldr	r3, [pc, #176]	@ (80030e8 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8003036:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003038:	2203      	movs	r2, #3
 800303a:	4393      	bics	r3, r2
 800303c:	0019      	movs	r1, r3
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	68da      	ldr	r2, [r3, #12]
 8003042:	4b29      	ldr	r3, [pc, #164]	@ (80030e8 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8003044:	430a      	orrs	r2, r1
 8003046:	64da      	str	r2, [r3, #76]	@ 0x4c
  }
#endif /* RCC_CCIPR_USART1SEL */

  /*----------------------------- USART2 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	2202      	movs	r2, #2
 800304e:	4013      	ands	r3, r2
 8003050:	d009      	beq.n	8003066 <HAL_RCCEx_PeriphCLKConfig+0x26e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003052:	4b25      	ldr	r3, [pc, #148]	@ (80030e8 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8003054:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003056:	220c      	movs	r2, #12
 8003058:	4393      	bics	r3, r2
 800305a:	0019      	movs	r1, r3
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	691a      	ldr	r2, [r3, #16]
 8003060:	4b21      	ldr	r3, [pc, #132]	@ (80030e8 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8003062:	430a      	orrs	r2, r1
 8003064:	64da      	str	r2, [r3, #76]	@ 0x4c
  }

  /*------------------------------ LPUART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	2204      	movs	r2, #4
 800306c:	4013      	ands	r3, r2
 800306e:	d009      	beq.n	8003084 <HAL_RCCEx_PeriphCLKConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003070:	4b1d      	ldr	r3, [pc, #116]	@ (80030e8 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8003072:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003074:	4a23      	ldr	r2, [pc, #140]	@ (8003104 <HAL_RCCEx_PeriphCLKConfig+0x30c>)
 8003076:	4013      	ands	r3, r2
 8003078:	0019      	movs	r1, r3
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	695a      	ldr	r2, [r3, #20]
 800307e:	4b1a      	ldr	r3, [pc, #104]	@ (80030e8 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8003080:	430a      	orrs	r2, r1
 8003082:	64da      	str	r2, [r3, #76]	@ 0x4c
  }

  /*------------------------------ I2C1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	2208      	movs	r2, #8
 800308a:	4013      	ands	r3, r2
 800308c:	d009      	beq.n	80030a2 <HAL_RCCEx_PeriphCLKConfig+0x2aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800308e:	4b16      	ldr	r3, [pc, #88]	@ (80030e8 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8003090:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003092:	4a1d      	ldr	r2, [pc, #116]	@ (8003108 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8003094:	4013      	ands	r3, r2
 8003096:	0019      	movs	r1, r3
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	699a      	ldr	r2, [r3, #24]
 800309c:	4b12      	ldr	r3, [pc, #72]	@ (80030e8 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800309e:	430a      	orrs	r2, r1
 80030a0:	64da      	str	r2, [r3, #76]	@ 0x4c
  }
#endif /* RCC_CCIPR_I2C3SEL */

#if defined(USB)
 /*---------------------------- USB and RNG configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	2240      	movs	r2, #64	@ 0x40
 80030a8:	4013      	ands	r3, r2
 80030aa:	d009      	beq.n	80030c0 <HAL_RCCEx_PeriphCLKConfig+0x2c8>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80030ac:	4b0e      	ldr	r3, [pc, #56]	@ (80030e8 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80030ae:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80030b0:	4a16      	ldr	r2, [pc, #88]	@ (800310c <HAL_RCCEx_PeriphCLKConfig+0x314>)
 80030b2:	4013      	ands	r3, r2
 80030b4:	0019      	movs	r1, r3
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	6a1a      	ldr	r2, [r3, #32]
 80030ba:	4b0b      	ldr	r3, [pc, #44]	@ (80030e8 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80030bc:	430a      	orrs	r2, r1
 80030be:	64da      	str	r2, [r3, #76]	@ 0x4c
  }
#endif /* USB */

  /*---------------------------- LPTIM1 configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	2280      	movs	r2, #128	@ 0x80
 80030c6:	4013      	ands	r3, r2
 80030c8:	d009      	beq.n	80030de <HAL_RCCEx_PeriphCLKConfig+0x2e6>
  {
    assert_param(IS_RCC_LPTIMCLK(PeriphClkInit->LptimClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->LptimClockSelection);
 80030ca:	4b07      	ldr	r3, [pc, #28]	@ (80030e8 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80030cc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80030ce:	4a10      	ldr	r2, [pc, #64]	@ (8003110 <HAL_RCCEx_PeriphCLKConfig+0x318>)
 80030d0:	4013      	ands	r3, r2
 80030d2:	0019      	movs	r1, r3
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	69da      	ldr	r2, [r3, #28]
 80030d8:	4b03      	ldr	r3, [pc, #12]	@ (80030e8 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80030da:	430a      	orrs	r2, r1
 80030dc:	64da      	str	r2, [r3, #76]	@ 0x4c
  }

  return HAL_OK;
 80030de:	2300      	movs	r3, #0
}
 80030e0:	0018      	movs	r0, r3
 80030e2:	46bd      	mov	sp, r7
 80030e4:	b006      	add	sp, #24
 80030e6:	bd80      	pop	{r7, pc}
 80030e8:	40021000 	.word	0x40021000
 80030ec:	40007000 	.word	0x40007000
 80030f0:	fffcffff 	.word	0xfffcffff
 80030f4:	fff7ffff 	.word	0xfff7ffff
 80030f8:	00001388 	.word	0x00001388
 80030fc:	ffcfffff 	.word	0xffcfffff
 8003100:	efffffff 	.word	0xefffffff
 8003104:	fffff3ff 	.word	0xfffff3ff
 8003108:	ffffcfff 	.word	0xffffcfff
 800310c:	fbffffff 	.word	0xfbffffff
 8003110:	fff3ffff 	.word	0xfff3ffff

08003114 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003114:	b580      	push	{r7, lr}
 8003116:	b082      	sub	sp, #8
 8003118:	af00      	add	r7, sp, #0
 800311a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	2b00      	cmp	r3, #0
 8003120:	d101      	bne.n	8003126 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003122:	2301      	movs	r3, #1
 8003124:	e044      	b.n	80031b0 <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800312a:	2b00      	cmp	r3, #0
 800312c:	d107      	bne.n	800313e <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	2278      	movs	r2, #120	@ 0x78
 8003132:	2100      	movs	r1, #0
 8003134:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	0018      	movs	r0, r3
 800313a:	f7fd fec9 	bl	8000ed0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	2224      	movs	r2, #36	@ 0x24
 8003142:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	681a      	ldr	r2, [r3, #0]
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	2101      	movs	r1, #1
 8003150:	438a      	bics	r2, r1
 8003152:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	0018      	movs	r0, r3
 8003158:	f000 fb8c 	bl	8003874 <UART_SetConfig>
 800315c:	0003      	movs	r3, r0
 800315e:	2b01      	cmp	r3, #1
 8003160:	d101      	bne.n	8003166 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8003162:	2301      	movs	r3, #1
 8003164:	e024      	b.n	80031b0 <HAL_UART_Init+0x9c>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800316a:	2b00      	cmp	r3, #0
 800316c:	d003      	beq.n	8003176 <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	0018      	movs	r0, r3
 8003172:	f000 fe03 	bl	8003d7c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	685a      	ldr	r2, [r3, #4]
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	490d      	ldr	r1, [pc, #52]	@ (80031b8 <HAL_UART_Init+0xa4>)
 8003182:	400a      	ands	r2, r1
 8003184:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	689a      	ldr	r2, [r3, #8]
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	212a      	movs	r1, #42	@ 0x2a
 8003192:	438a      	bics	r2, r1
 8003194:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	681a      	ldr	r2, [r3, #0]
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	2101      	movs	r1, #1
 80031a2:	430a      	orrs	r2, r1
 80031a4:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	0018      	movs	r0, r3
 80031aa:	f000 fe9b 	bl	8003ee4 <UART_CheckIdleState>
 80031ae:	0003      	movs	r3, r0
}
 80031b0:	0018      	movs	r0, r3
 80031b2:	46bd      	mov	sp, r7
 80031b4:	b002      	add	sp, #8
 80031b6:	bd80      	pop	{r7, pc}
 80031b8:	ffffb7ff 	.word	0xffffb7ff

080031bc <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80031bc:	b580      	push	{r7, lr}
 80031be:	b088      	sub	sp, #32
 80031c0:	af00      	add	r7, sp, #0
 80031c2:	60f8      	str	r0, [r7, #12]
 80031c4:	60b9      	str	r1, [r7, #8]
 80031c6:	1dbb      	adds	r3, r7, #6
 80031c8:	801a      	strh	r2, [r3, #0]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80031ca:	68fb      	ldr	r3, [r7, #12]
 80031cc:	2280      	movs	r2, #128	@ 0x80
 80031ce:	589b      	ldr	r3, [r3, r2]
 80031d0:	2b20      	cmp	r3, #32
 80031d2:	d14a      	bne.n	800326a <HAL_UART_Receive_IT+0xae>
  {
    if ((pData == NULL) || (Size == 0U))
 80031d4:	68bb      	ldr	r3, [r7, #8]
 80031d6:	2b00      	cmp	r3, #0
 80031d8:	d003      	beq.n	80031e2 <HAL_UART_Receive_IT+0x26>
 80031da:	1dbb      	adds	r3, r7, #6
 80031dc:	881b      	ldrh	r3, [r3, #0]
 80031de:	2b00      	cmp	r3, #0
 80031e0:	d101      	bne.n	80031e6 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 80031e2:	2301      	movs	r3, #1
 80031e4:	e042      	b.n	800326c <HAL_UART_Receive_IT+0xb0>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be received from RDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80031e6:	68fb      	ldr	r3, [r7, #12]
 80031e8:	689a      	ldr	r2, [r3, #8]
 80031ea:	2380      	movs	r3, #128	@ 0x80
 80031ec:	015b      	lsls	r3, r3, #5
 80031ee:	429a      	cmp	r2, r3
 80031f0:	d109      	bne.n	8003206 <HAL_UART_Receive_IT+0x4a>
 80031f2:	68fb      	ldr	r3, [r7, #12]
 80031f4:	691b      	ldr	r3, [r3, #16]
 80031f6:	2b00      	cmp	r3, #0
 80031f8:	d105      	bne.n	8003206 <HAL_UART_Receive_IT+0x4a>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 80031fa:	68bb      	ldr	r3, [r7, #8]
 80031fc:	2201      	movs	r2, #1
 80031fe:	4013      	ands	r3, r2
 8003200:	d001      	beq.n	8003206 <HAL_UART_Receive_IT+0x4a>
      {
        return  HAL_ERROR;
 8003202:	2301      	movs	r3, #1
 8003204:	e032      	b.n	800326c <HAL_UART_Receive_IT+0xb0>
      }
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003206:	68fb      	ldr	r3, [r7, #12]
 8003208:	2200      	movs	r2, #0
 800320a:	661a      	str	r2, [r3, #96]	@ 0x60

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800320c:	68fb      	ldr	r3, [r7, #12]
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	4a18      	ldr	r2, [pc, #96]	@ (8003274 <HAL_UART_Receive_IT+0xb8>)
 8003212:	4293      	cmp	r3, r2
 8003214:	d020      	beq.n	8003258 <HAL_UART_Receive_IT+0x9c>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8003216:	68fb      	ldr	r3, [r7, #12]
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	685a      	ldr	r2, [r3, #4]
 800321c:	2380      	movs	r3, #128	@ 0x80
 800321e:	041b      	lsls	r3, r3, #16
 8003220:	4013      	ands	r3, r2
 8003222:	d019      	beq.n	8003258 <HAL_UART_Receive_IT+0x9c>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003224:	f3ef 8310 	mrs	r3, PRIMASK
 8003228:	613b      	str	r3, [r7, #16]
  return(result);
 800322a:	693b      	ldr	r3, [r7, #16]
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800322c:	61fb      	str	r3, [r7, #28]
 800322e:	2301      	movs	r3, #1
 8003230:	617b      	str	r3, [r7, #20]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003232:	697b      	ldr	r3, [r7, #20]
 8003234:	f383 8810 	msr	PRIMASK, r3
}
 8003238:	46c0      	nop			@ (mov r8, r8)
 800323a:	68fb      	ldr	r3, [r7, #12]
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	681a      	ldr	r2, [r3, #0]
 8003240:	68fb      	ldr	r3, [r7, #12]
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	2180      	movs	r1, #128	@ 0x80
 8003246:	04c9      	lsls	r1, r1, #19
 8003248:	430a      	orrs	r2, r1
 800324a:	601a      	str	r2, [r3, #0]
 800324c:	69fb      	ldr	r3, [r7, #28]
 800324e:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003250:	69bb      	ldr	r3, [r7, #24]
 8003252:	f383 8810 	msr	PRIMASK, r3
}
 8003256:	46c0      	nop			@ (mov r8, r8)
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8003258:	1dbb      	adds	r3, r7, #6
 800325a:	881a      	ldrh	r2, [r3, #0]
 800325c:	68b9      	ldr	r1, [r7, #8]
 800325e:	68fb      	ldr	r3, [r7, #12]
 8003260:	0018      	movs	r0, r3
 8003262:	f000 ff51 	bl	8004108 <UART_Start_Receive_IT>
 8003266:	0003      	movs	r3, r0
 8003268:	e000      	b.n	800326c <HAL_UART_Receive_IT+0xb0>
  }
  else
  {
    return HAL_BUSY;
 800326a:	2302      	movs	r3, #2
  }
}
 800326c:	0018      	movs	r0, r3
 800326e:	46bd      	mov	sp, r7
 8003270:	b008      	add	sp, #32
 8003272:	bd80      	pop	{r7, pc}
 8003274:	40004800 	.word	0x40004800

08003278 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003278:	b590      	push	{r4, r7, lr}
 800327a:	b0ab      	sub	sp, #172	@ 0xac
 800327c:	af00      	add	r7, sp, #0
 800327e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	69db      	ldr	r3, [r3, #28]
 8003286:	22a4      	movs	r2, #164	@ 0xa4
 8003288:	18b9      	adds	r1, r7, r2
 800328a:	600b      	str	r3, [r1, #0]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	20a0      	movs	r0, #160	@ 0xa0
 8003294:	1839      	adds	r1, r7, r0
 8003296:	600b      	str	r3, [r1, #0]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	689b      	ldr	r3, [r3, #8]
 800329e:	219c      	movs	r1, #156	@ 0x9c
 80032a0:	1879      	adds	r1, r7, r1
 80032a2:	600b      	str	r3, [r1, #0]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80032a4:	0011      	movs	r1, r2
 80032a6:	18bb      	adds	r3, r7, r2
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	4a99      	ldr	r2, [pc, #612]	@ (8003510 <HAL_UART_IRQHandler+0x298>)
 80032ac:	4013      	ands	r3, r2
 80032ae:	2298      	movs	r2, #152	@ 0x98
 80032b0:	18bc      	adds	r4, r7, r2
 80032b2:	6023      	str	r3, [r4, #0]
  if (errorflags == 0U)
 80032b4:	18bb      	adds	r3, r7, r2
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	2b00      	cmp	r3, #0
 80032ba:	d114      	bne.n	80032e6 <HAL_UART_IRQHandler+0x6e>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 80032bc:	187b      	adds	r3, r7, r1
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	2220      	movs	r2, #32
 80032c2:	4013      	ands	r3, r2
 80032c4:	d00f      	beq.n	80032e6 <HAL_UART_IRQHandler+0x6e>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80032c6:	183b      	adds	r3, r7, r0
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	2220      	movs	r2, #32
 80032cc:	4013      	ands	r3, r2
 80032ce:	d00a      	beq.n	80032e6 <HAL_UART_IRQHandler+0x6e>
    {
      if (huart->RxISR != NULL)
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80032d4:	2b00      	cmp	r3, #0
 80032d6:	d100      	bne.n	80032da <HAL_UART_IRQHandler+0x62>
 80032d8:	e2a0      	b.n	800381c <HAL_UART_IRQHandler+0x5a4>
      {
        huart->RxISR(huart);
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80032de:	687a      	ldr	r2, [r7, #4]
 80032e0:	0010      	movs	r0, r2
 80032e2:	4798      	blx	r3
      }
      return;
 80032e4:	e29a      	b.n	800381c <HAL_UART_IRQHandler+0x5a4>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 80032e6:	2398      	movs	r3, #152	@ 0x98
 80032e8:	18fb      	adds	r3, r7, r3
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	2b00      	cmp	r3, #0
 80032ee:	d100      	bne.n	80032f2 <HAL_UART_IRQHandler+0x7a>
 80032f0:	e114      	b.n	800351c <HAL_UART_IRQHandler+0x2a4>
      && (((cr3its & USART_CR3_EIE) != 0U)
 80032f2:	239c      	movs	r3, #156	@ 0x9c
 80032f4:	18fb      	adds	r3, r7, r3
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	2201      	movs	r2, #1
 80032fa:	4013      	ands	r3, r2
 80032fc:	d106      	bne.n	800330c <HAL_UART_IRQHandler+0x94>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 80032fe:	23a0      	movs	r3, #160	@ 0xa0
 8003300:	18fb      	adds	r3, r7, r3
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	4a83      	ldr	r2, [pc, #524]	@ (8003514 <HAL_UART_IRQHandler+0x29c>)
 8003306:	4013      	ands	r3, r2
 8003308:	d100      	bne.n	800330c <HAL_UART_IRQHandler+0x94>
 800330a:	e107      	b.n	800351c <HAL_UART_IRQHandler+0x2a4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800330c:	23a4      	movs	r3, #164	@ 0xa4
 800330e:	18fb      	adds	r3, r7, r3
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	2201      	movs	r2, #1
 8003314:	4013      	ands	r3, r2
 8003316:	d012      	beq.n	800333e <HAL_UART_IRQHandler+0xc6>
 8003318:	23a0      	movs	r3, #160	@ 0xa0
 800331a:	18fb      	adds	r3, r7, r3
 800331c:	681a      	ldr	r2, [r3, #0]
 800331e:	2380      	movs	r3, #128	@ 0x80
 8003320:	005b      	lsls	r3, r3, #1
 8003322:	4013      	ands	r3, r2
 8003324:	d00b      	beq.n	800333e <HAL_UART_IRQHandler+0xc6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	2201      	movs	r2, #1
 800332c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	2284      	movs	r2, #132	@ 0x84
 8003332:	589b      	ldr	r3, [r3, r2]
 8003334:	2201      	movs	r2, #1
 8003336:	431a      	orrs	r2, r3
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	2184      	movs	r1, #132	@ 0x84
 800333c:	505a      	str	r2, [r3, r1]
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800333e:	23a4      	movs	r3, #164	@ 0xa4
 8003340:	18fb      	adds	r3, r7, r3
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	2202      	movs	r2, #2
 8003346:	4013      	ands	r3, r2
 8003348:	d011      	beq.n	800336e <HAL_UART_IRQHandler+0xf6>
 800334a:	239c      	movs	r3, #156	@ 0x9c
 800334c:	18fb      	adds	r3, r7, r3
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	2201      	movs	r2, #1
 8003352:	4013      	ands	r3, r2
 8003354:	d00b      	beq.n	800336e <HAL_UART_IRQHandler+0xf6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	2202      	movs	r2, #2
 800335c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	2284      	movs	r2, #132	@ 0x84
 8003362:	589b      	ldr	r3, [r3, r2]
 8003364:	2204      	movs	r2, #4
 8003366:	431a      	orrs	r2, r3
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	2184      	movs	r1, #132	@ 0x84
 800336c:	505a      	str	r2, [r3, r1]
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800336e:	23a4      	movs	r3, #164	@ 0xa4
 8003370:	18fb      	adds	r3, r7, r3
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	2204      	movs	r2, #4
 8003376:	4013      	ands	r3, r2
 8003378:	d011      	beq.n	800339e <HAL_UART_IRQHandler+0x126>
 800337a:	239c      	movs	r3, #156	@ 0x9c
 800337c:	18fb      	adds	r3, r7, r3
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	2201      	movs	r2, #1
 8003382:	4013      	ands	r3, r2
 8003384:	d00b      	beq.n	800339e <HAL_UART_IRQHandler+0x126>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	2204      	movs	r2, #4
 800338c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	2284      	movs	r2, #132	@ 0x84
 8003392:	589b      	ldr	r3, [r3, r2]
 8003394:	2202      	movs	r2, #2
 8003396:	431a      	orrs	r2, r3
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	2184      	movs	r1, #132	@ 0x84
 800339c:	505a      	str	r2, [r3, r1]
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800339e:	23a4      	movs	r3, #164	@ 0xa4
 80033a0:	18fb      	adds	r3, r7, r3
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	2208      	movs	r2, #8
 80033a6:	4013      	ands	r3, r2
 80033a8:	d017      	beq.n	80033da <HAL_UART_IRQHandler+0x162>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80033aa:	23a0      	movs	r3, #160	@ 0xa0
 80033ac:	18fb      	adds	r3, r7, r3
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	2220      	movs	r2, #32
 80033b2:	4013      	ands	r3, r2
 80033b4:	d105      	bne.n	80033c2 <HAL_UART_IRQHandler+0x14a>
            ((cr3its & USART_CR3_EIE) != 0U)))
 80033b6:	239c      	movs	r3, #156	@ 0x9c
 80033b8:	18fb      	adds	r3, r7, r3
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	2201      	movs	r2, #1
 80033be:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80033c0:	d00b      	beq.n	80033da <HAL_UART_IRQHandler+0x162>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	2208      	movs	r2, #8
 80033c8:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	2284      	movs	r2, #132	@ 0x84
 80033ce:	589b      	ldr	r3, [r3, r2]
 80033d0:	2208      	movs	r2, #8
 80033d2:	431a      	orrs	r2, r3
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	2184      	movs	r1, #132	@ 0x84
 80033d8:	505a      	str	r2, [r3, r1]
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80033da:	23a4      	movs	r3, #164	@ 0xa4
 80033dc:	18fb      	adds	r3, r7, r3
 80033de:	681a      	ldr	r2, [r3, #0]
 80033e0:	2380      	movs	r3, #128	@ 0x80
 80033e2:	011b      	lsls	r3, r3, #4
 80033e4:	4013      	ands	r3, r2
 80033e6:	d013      	beq.n	8003410 <HAL_UART_IRQHandler+0x198>
 80033e8:	23a0      	movs	r3, #160	@ 0xa0
 80033ea:	18fb      	adds	r3, r7, r3
 80033ec:	681a      	ldr	r2, [r3, #0]
 80033ee:	2380      	movs	r3, #128	@ 0x80
 80033f0:	04db      	lsls	r3, r3, #19
 80033f2:	4013      	ands	r3, r2
 80033f4:	d00c      	beq.n	8003410 <HAL_UART_IRQHandler+0x198>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	2280      	movs	r2, #128	@ 0x80
 80033fc:	0112      	lsls	r2, r2, #4
 80033fe:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	2284      	movs	r2, #132	@ 0x84
 8003404:	589b      	ldr	r3, [r3, r2]
 8003406:	2220      	movs	r2, #32
 8003408:	431a      	orrs	r2, r3
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	2184      	movs	r1, #132	@ 0x84
 800340e:	505a      	str	r2, [r3, r1]
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	2284      	movs	r2, #132	@ 0x84
 8003414:	589b      	ldr	r3, [r3, r2]
 8003416:	2b00      	cmp	r3, #0
 8003418:	d100      	bne.n	800341c <HAL_UART_IRQHandler+0x1a4>
 800341a:	e201      	b.n	8003820 <HAL_UART_IRQHandler+0x5a8>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 800341c:	23a4      	movs	r3, #164	@ 0xa4
 800341e:	18fb      	adds	r3, r7, r3
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	2220      	movs	r2, #32
 8003424:	4013      	ands	r3, r2
 8003426:	d00e      	beq.n	8003446 <HAL_UART_IRQHandler+0x1ce>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8003428:	23a0      	movs	r3, #160	@ 0xa0
 800342a:	18fb      	adds	r3, r7, r3
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	2220      	movs	r2, #32
 8003430:	4013      	ands	r3, r2
 8003432:	d008      	beq.n	8003446 <HAL_UART_IRQHandler+0x1ce>
      {
        if (huart->RxISR != NULL)
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003438:	2b00      	cmp	r3, #0
 800343a:	d004      	beq.n	8003446 <HAL_UART_IRQHandler+0x1ce>
        {
          huart->RxISR(huart);
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003440:	687a      	ldr	r2, [r7, #4]
 8003442:	0010      	movs	r0, r2
 8003444:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	2284      	movs	r2, #132	@ 0x84
 800344a:	589b      	ldr	r3, [r3, r2]
 800344c:	2194      	movs	r1, #148	@ 0x94
 800344e:	187a      	adds	r2, r7, r1
 8003450:	6013      	str	r3, [r2, #0]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	689b      	ldr	r3, [r3, #8]
 8003458:	2240      	movs	r2, #64	@ 0x40
 800345a:	4013      	ands	r3, r2
 800345c:	2b40      	cmp	r3, #64	@ 0x40
 800345e:	d004      	beq.n	800346a <HAL_UART_IRQHandler+0x1f2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8003460:	187b      	adds	r3, r7, r1
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	2228      	movs	r2, #40	@ 0x28
 8003466:	4013      	ands	r3, r2
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8003468:	d047      	beq.n	80034fa <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	0018      	movs	r0, r3
 800346e:	f000 ff15 	bl	800429c <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	689b      	ldr	r3, [r3, #8]
 8003478:	2240      	movs	r2, #64	@ 0x40
 800347a:	4013      	ands	r3, r2
 800347c:	2b40      	cmp	r3, #64	@ 0x40
 800347e:	d137      	bne.n	80034f0 <HAL_UART_IRQHandler+0x278>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003480:	f3ef 8310 	mrs	r3, PRIMASK
 8003484:	663b      	str	r3, [r7, #96]	@ 0x60
  return(result);
 8003486:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003488:	2090      	movs	r0, #144	@ 0x90
 800348a:	183a      	adds	r2, r7, r0
 800348c:	6013      	str	r3, [r2, #0]
 800348e:	2301      	movs	r3, #1
 8003490:	667b      	str	r3, [r7, #100]	@ 0x64
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003492:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8003494:	f383 8810 	msr	PRIMASK, r3
}
 8003498:	46c0      	nop			@ (mov r8, r8)
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	689a      	ldr	r2, [r3, #8]
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	2140      	movs	r1, #64	@ 0x40
 80034a6:	438a      	bics	r2, r1
 80034a8:	609a      	str	r2, [r3, #8]
 80034aa:	183b      	adds	r3, r7, r0
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	66bb      	str	r3, [r7, #104]	@ 0x68
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80034b0:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80034b2:	f383 8810 	msr	PRIMASK, r3
}
 80034b6:	46c0      	nop			@ (mov r8, r8)

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80034bc:	2b00      	cmp	r3, #0
 80034be:	d012      	beq.n	80034e6 <HAL_UART_IRQHandler+0x26e>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80034c4:	4a14      	ldr	r2, [pc, #80]	@ (8003518 <HAL_UART_IRQHandler+0x2a0>)
 80034c6:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80034cc:	0018      	movs	r0, r3
 80034ce:	f7fd ff53 	bl	8001378 <HAL_DMA_Abort_IT>
 80034d2:	1e03      	subs	r3, r0, #0
 80034d4:	d01a      	beq.n	800350c <HAL_UART_IRQHandler+0x294>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80034da:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80034e0:	0018      	movs	r0, r3
 80034e2:	4790      	blx	r2
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80034e4:	e012      	b.n	800350c <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	0018      	movs	r0, r3
 80034ea:	f000 f9af 	bl	800384c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80034ee:	e00d      	b.n	800350c <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	0018      	movs	r0, r3
 80034f4:	f000 f9aa 	bl	800384c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80034f8:	e008      	b.n	800350c <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	0018      	movs	r0, r3
 80034fe:	f000 f9a5 	bl	800384c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	2284      	movs	r2, #132	@ 0x84
 8003506:	2100      	movs	r1, #0
 8003508:	5099      	str	r1, [r3, r2]
      }
    }
    return;
 800350a:	e189      	b.n	8003820 <HAL_UART_IRQHandler+0x5a8>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800350c:	46c0      	nop			@ (mov r8, r8)
    return;
 800350e:	e187      	b.n	8003820 <HAL_UART_IRQHandler+0x5a8>
 8003510:	0000080f 	.word	0x0000080f
 8003514:	04000120 	.word	0x04000120
 8003518:	08004365 	.word	0x08004365

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003520:	2b01      	cmp	r3, #1
 8003522:	d000      	beq.n	8003526 <HAL_UART_IRQHandler+0x2ae>
 8003524:	e13b      	b.n	800379e <HAL_UART_IRQHandler+0x526>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8003526:	23a4      	movs	r3, #164	@ 0xa4
 8003528:	18fb      	adds	r3, r7, r3
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	2210      	movs	r2, #16
 800352e:	4013      	ands	r3, r2
 8003530:	d100      	bne.n	8003534 <HAL_UART_IRQHandler+0x2bc>
 8003532:	e134      	b.n	800379e <HAL_UART_IRQHandler+0x526>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8003534:	23a0      	movs	r3, #160	@ 0xa0
 8003536:	18fb      	adds	r3, r7, r3
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	2210      	movs	r2, #16
 800353c:	4013      	ands	r3, r2
 800353e:	d100      	bne.n	8003542 <HAL_UART_IRQHandler+0x2ca>
 8003540:	e12d      	b.n	800379e <HAL_UART_IRQHandler+0x526>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	2210      	movs	r2, #16
 8003548:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	689b      	ldr	r3, [r3, #8]
 8003550:	2240      	movs	r2, #64	@ 0x40
 8003552:	4013      	ands	r3, r2
 8003554:	2b40      	cmp	r3, #64	@ 0x40
 8003556:	d000      	beq.n	800355a <HAL_UART_IRQHandler+0x2e2>
 8003558:	e0a1      	b.n	800369e <HAL_UART_IRQHandler+0x426>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	685a      	ldr	r2, [r3, #4]
 8003562:	217e      	movs	r1, #126	@ 0x7e
 8003564:	187b      	adds	r3, r7, r1
 8003566:	801a      	strh	r2, [r3, #0]
      if ((nb_remaining_rx_data > 0U)
 8003568:	187b      	adds	r3, r7, r1
 800356a:	881b      	ldrh	r3, [r3, #0]
 800356c:	2b00      	cmp	r3, #0
 800356e:	d100      	bne.n	8003572 <HAL_UART_IRQHandler+0x2fa>
 8003570:	e158      	b.n	8003824 <HAL_UART_IRQHandler+0x5ac>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	2258      	movs	r2, #88	@ 0x58
 8003576:	5a9b      	ldrh	r3, [r3, r2]
 8003578:	187a      	adds	r2, r7, r1
 800357a:	8812      	ldrh	r2, [r2, #0]
 800357c:	429a      	cmp	r2, r3
 800357e:	d300      	bcc.n	8003582 <HAL_UART_IRQHandler+0x30a>
 8003580:	e150      	b.n	8003824 <HAL_UART_IRQHandler+0x5ac>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	187a      	adds	r2, r7, r1
 8003586:	215a      	movs	r1, #90	@ 0x5a
 8003588:	8812      	ldrh	r2, [r2, #0]
 800358a:	525a      	strh	r2, [r3, r1]

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	2220      	movs	r2, #32
 8003596:	4013      	ands	r3, r2
 8003598:	d16f      	bne.n	800367a <HAL_UART_IRQHandler+0x402>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800359a:	f3ef 8310 	mrs	r3, PRIMASK
 800359e:	633b      	str	r3, [r7, #48]	@ 0x30
  return(result);
 80035a0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80035a2:	67bb      	str	r3, [r7, #120]	@ 0x78
 80035a4:	2301      	movs	r3, #1
 80035a6:	637b      	str	r3, [r7, #52]	@ 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80035a8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80035aa:	f383 8810 	msr	PRIMASK, r3
}
 80035ae:	46c0      	nop			@ (mov r8, r8)
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	681a      	ldr	r2, [r3, #0]
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	499e      	ldr	r1, [pc, #632]	@ (8003834 <HAL_UART_IRQHandler+0x5bc>)
 80035bc:	400a      	ands	r2, r1
 80035be:	601a      	str	r2, [r3, #0]
 80035c0:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80035c2:	63bb      	str	r3, [r7, #56]	@ 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80035c4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80035c6:	f383 8810 	msr	PRIMASK, r3
}
 80035ca:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80035cc:	f3ef 8310 	mrs	r3, PRIMASK
 80035d0:	63fb      	str	r3, [r7, #60]	@ 0x3c
  return(result);
 80035d2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80035d4:	677b      	str	r3, [r7, #116]	@ 0x74
 80035d6:	2301      	movs	r3, #1
 80035d8:	643b      	str	r3, [r7, #64]	@ 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80035da:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80035dc:	f383 8810 	msr	PRIMASK, r3
}
 80035e0:	46c0      	nop			@ (mov r8, r8)
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	689a      	ldr	r2, [r3, #8]
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	2101      	movs	r1, #1
 80035ee:	438a      	bics	r2, r1
 80035f0:	609a      	str	r2, [r3, #8]
 80035f2:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80035f4:	647b      	str	r3, [r7, #68]	@ 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80035f6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80035f8:	f383 8810 	msr	PRIMASK, r3
}
 80035fc:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80035fe:	f3ef 8310 	mrs	r3, PRIMASK
 8003602:	64bb      	str	r3, [r7, #72]	@ 0x48
  return(result);
 8003604:	6cbb      	ldr	r3, [r7, #72]	@ 0x48

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003606:	673b      	str	r3, [r7, #112]	@ 0x70
 8003608:	2301      	movs	r3, #1
 800360a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800360c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800360e:	f383 8810 	msr	PRIMASK, r3
}
 8003612:	46c0      	nop			@ (mov r8, r8)
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	689a      	ldr	r2, [r3, #8]
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	2140      	movs	r1, #64	@ 0x40
 8003620:	438a      	bics	r2, r1
 8003622:	609a      	str	r2, [r3, #8]
 8003624:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8003626:	653b      	str	r3, [r7, #80]	@ 0x50
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003628:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800362a:	f383 8810 	msr	PRIMASK, r3
}
 800362e:	46c0      	nop			@ (mov r8, r8)

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	2280      	movs	r2, #128	@ 0x80
 8003634:	2120      	movs	r1, #32
 8003636:	5099      	str	r1, [r3, r2]
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	2200      	movs	r2, #0
 800363c:	661a      	str	r2, [r3, #96]	@ 0x60
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800363e:	f3ef 8310 	mrs	r3, PRIMASK
 8003642:	657b      	str	r3, [r7, #84]	@ 0x54
  return(result);
 8003644:	6d7b      	ldr	r3, [r7, #84]	@ 0x54

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003646:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8003648:	2301      	movs	r3, #1
 800364a:	65bb      	str	r3, [r7, #88]	@ 0x58
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800364c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800364e:	f383 8810 	msr	PRIMASK, r3
}
 8003652:	46c0      	nop			@ (mov r8, r8)
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	681a      	ldr	r2, [r3, #0]
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	2110      	movs	r1, #16
 8003660:	438a      	bics	r2, r1
 8003662:	601a      	str	r2, [r3, #0]
 8003664:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003666:	65fb      	str	r3, [r7, #92]	@ 0x5c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003668:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800366a:	f383 8810 	msr	PRIMASK, r3
}
 800366e:	46c0      	nop			@ (mov r8, r8)

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003674:	0018      	movs	r0, r3
 8003676:	f7fd fe3f 	bl	80012f8 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	2202      	movs	r2, #2
 800367e:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	2258      	movs	r2, #88	@ 0x58
 8003684:	5a9a      	ldrh	r2, [r3, r2]
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	215a      	movs	r1, #90	@ 0x5a
 800368a:	5a5b      	ldrh	r3, [r3, r1]
 800368c:	b29b      	uxth	r3, r3
 800368e:	1ad3      	subs	r3, r2, r3
 8003690:	b29a      	uxth	r2, r3
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	0011      	movs	r1, r2
 8003696:	0018      	movs	r0, r3
 8003698:	f000 f8e0 	bl	800385c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800369c:	e0c2      	b.n	8003824 <HAL_UART_IRQHandler+0x5ac>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	2258      	movs	r2, #88	@ 0x58
 80036a2:	5a99      	ldrh	r1, [r3, r2]
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	225a      	movs	r2, #90	@ 0x5a
 80036a8:	5a9b      	ldrh	r3, [r3, r2]
 80036aa:	b29a      	uxth	r2, r3
 80036ac:	208e      	movs	r0, #142	@ 0x8e
 80036ae:	183b      	adds	r3, r7, r0
 80036b0:	1a8a      	subs	r2, r1, r2
 80036b2:	801a      	strh	r2, [r3, #0]
      if ((huart->RxXferCount > 0U)
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	225a      	movs	r2, #90	@ 0x5a
 80036b8:	5a9b      	ldrh	r3, [r3, r2]
 80036ba:	b29b      	uxth	r3, r3
 80036bc:	2b00      	cmp	r3, #0
 80036be:	d100      	bne.n	80036c2 <HAL_UART_IRQHandler+0x44a>
 80036c0:	e0b2      	b.n	8003828 <HAL_UART_IRQHandler+0x5b0>
          && (nb_rx_data > 0U))
 80036c2:	183b      	adds	r3, r7, r0
 80036c4:	881b      	ldrh	r3, [r3, #0]
 80036c6:	2b00      	cmp	r3, #0
 80036c8:	d100      	bne.n	80036cc <HAL_UART_IRQHandler+0x454>
 80036ca:	e0ad      	b.n	8003828 <HAL_UART_IRQHandler+0x5b0>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80036cc:	f3ef 8310 	mrs	r3, PRIMASK
 80036d0:	60fb      	str	r3, [r7, #12]
  return(result);
 80036d2:	68fb      	ldr	r3, [r7, #12]
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80036d4:	2488      	movs	r4, #136	@ 0x88
 80036d6:	193a      	adds	r2, r7, r4
 80036d8:	6013      	str	r3, [r2, #0]
 80036da:	2301      	movs	r3, #1
 80036dc:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80036de:	693b      	ldr	r3, [r7, #16]
 80036e0:	f383 8810 	msr	PRIMASK, r3
}
 80036e4:	46c0      	nop			@ (mov r8, r8)
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	681a      	ldr	r2, [r3, #0]
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	4951      	ldr	r1, [pc, #324]	@ (8003838 <HAL_UART_IRQHandler+0x5c0>)
 80036f2:	400a      	ands	r2, r1
 80036f4:	601a      	str	r2, [r3, #0]
 80036f6:	193b      	adds	r3, r7, r4
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80036fc:	697b      	ldr	r3, [r7, #20]
 80036fe:	f383 8810 	msr	PRIMASK, r3
}
 8003702:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003704:	f3ef 8310 	mrs	r3, PRIMASK
 8003708:	61bb      	str	r3, [r7, #24]
  return(result);
 800370a:	69bb      	ldr	r3, [r7, #24]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800370c:	2484      	movs	r4, #132	@ 0x84
 800370e:	193a      	adds	r2, r7, r4
 8003710:	6013      	str	r3, [r2, #0]
 8003712:	2301      	movs	r3, #1
 8003714:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003716:	69fb      	ldr	r3, [r7, #28]
 8003718:	f383 8810 	msr	PRIMASK, r3
}
 800371c:	46c0      	nop			@ (mov r8, r8)
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	689a      	ldr	r2, [r3, #8]
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	2101      	movs	r1, #1
 800372a:	438a      	bics	r2, r1
 800372c:	609a      	str	r2, [r3, #8]
 800372e:	193b      	adds	r3, r7, r4
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003734:	6a3b      	ldr	r3, [r7, #32]
 8003736:	f383 8810 	msr	PRIMASK, r3
}
 800373a:	46c0      	nop			@ (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	2280      	movs	r2, #128	@ 0x80
 8003740:	2120      	movs	r1, #32
 8003742:	5099      	str	r1, [r3, r2]
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	2200      	movs	r2, #0
 8003748:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	2200      	movs	r2, #0
 800374e:	669a      	str	r2, [r3, #104]	@ 0x68
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003750:	f3ef 8310 	mrs	r3, PRIMASK
 8003754:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 8003756:	6a7b      	ldr	r3, [r7, #36]	@ 0x24

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003758:	2480      	movs	r4, #128	@ 0x80
 800375a:	193a      	adds	r2, r7, r4
 800375c:	6013      	str	r3, [r2, #0]
 800375e:	2301      	movs	r3, #1
 8003760:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003762:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003764:	f383 8810 	msr	PRIMASK, r3
}
 8003768:	46c0      	nop			@ (mov r8, r8)
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	681a      	ldr	r2, [r3, #0]
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	2110      	movs	r1, #16
 8003776:	438a      	bics	r2, r1
 8003778:	601a      	str	r2, [r3, #0]
 800377a:	193b      	adds	r3, r7, r4
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003780:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003782:	f383 8810 	msr	PRIMASK, r3
}
 8003786:	46c0      	nop			@ (mov r8, r8)

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	2202      	movs	r2, #2
 800378c:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800378e:	183b      	adds	r3, r7, r0
 8003790:	881a      	ldrh	r2, [r3, #0]
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	0011      	movs	r1, r2
 8003796:	0018      	movs	r0, r3
 8003798:	f000 f860 	bl	800385c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800379c:	e044      	b.n	8003828 <HAL_UART_IRQHandler+0x5b0>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800379e:	23a4      	movs	r3, #164	@ 0xa4
 80037a0:	18fb      	adds	r3, r7, r3
 80037a2:	681a      	ldr	r2, [r3, #0]
 80037a4:	2380      	movs	r3, #128	@ 0x80
 80037a6:	035b      	lsls	r3, r3, #13
 80037a8:	4013      	ands	r3, r2
 80037aa:	d010      	beq.n	80037ce <HAL_UART_IRQHandler+0x556>
 80037ac:	239c      	movs	r3, #156	@ 0x9c
 80037ae:	18fb      	adds	r3, r7, r3
 80037b0:	681a      	ldr	r2, [r3, #0]
 80037b2:	2380      	movs	r3, #128	@ 0x80
 80037b4:	03db      	lsls	r3, r3, #15
 80037b6:	4013      	ands	r3, r2
 80037b8:	d009      	beq.n	80037ce <HAL_UART_IRQHandler+0x556>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	2280      	movs	r2, #128	@ 0x80
 80037c0:	0352      	lsls	r2, r2, #13
 80037c2:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	0018      	movs	r0, r3
 80037c8:	f000 ffd2 	bl	8004770 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80037cc:	e02f      	b.n	800382e <HAL_UART_IRQHandler+0x5b6>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 80037ce:	23a4      	movs	r3, #164	@ 0xa4
 80037d0:	18fb      	adds	r3, r7, r3
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	2280      	movs	r2, #128	@ 0x80
 80037d6:	4013      	ands	r3, r2
 80037d8:	d00f      	beq.n	80037fa <HAL_UART_IRQHandler+0x582>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 80037da:	23a0      	movs	r3, #160	@ 0xa0
 80037dc:	18fb      	adds	r3, r7, r3
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	2280      	movs	r2, #128	@ 0x80
 80037e2:	4013      	ands	r3, r2
 80037e4:	d009      	beq.n	80037fa <HAL_UART_IRQHandler+0x582>
  {
    if (huart->TxISR != NULL)
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80037ea:	2b00      	cmp	r3, #0
 80037ec:	d01e      	beq.n	800382c <HAL_UART_IRQHandler+0x5b4>
    {
      huart->TxISR(huart);
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80037f2:	687a      	ldr	r2, [r7, #4]
 80037f4:	0010      	movs	r0, r2
 80037f6:	4798      	blx	r3
    }
    return;
 80037f8:	e018      	b.n	800382c <HAL_UART_IRQHandler+0x5b4>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80037fa:	23a4      	movs	r3, #164	@ 0xa4
 80037fc:	18fb      	adds	r3, r7, r3
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	2240      	movs	r2, #64	@ 0x40
 8003802:	4013      	ands	r3, r2
 8003804:	d013      	beq.n	800382e <HAL_UART_IRQHandler+0x5b6>
 8003806:	23a0      	movs	r3, #160	@ 0xa0
 8003808:	18fb      	adds	r3, r7, r3
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	2240      	movs	r2, #64	@ 0x40
 800380e:	4013      	ands	r3, r2
 8003810:	d00d      	beq.n	800382e <HAL_UART_IRQHandler+0x5b6>
  {
    UART_EndTransmit_IT(huart);
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	0018      	movs	r0, r3
 8003816:	f000 fdbc 	bl	8004392 <UART_EndTransmit_IT>
    return;
 800381a:	e008      	b.n	800382e <HAL_UART_IRQHandler+0x5b6>
      return;
 800381c:	46c0      	nop			@ (mov r8, r8)
 800381e:	e006      	b.n	800382e <HAL_UART_IRQHandler+0x5b6>
    return;
 8003820:	46c0      	nop			@ (mov r8, r8)
 8003822:	e004      	b.n	800382e <HAL_UART_IRQHandler+0x5b6>
      return;
 8003824:	46c0      	nop			@ (mov r8, r8)
 8003826:	e002      	b.n	800382e <HAL_UART_IRQHandler+0x5b6>
      return;
 8003828:	46c0      	nop			@ (mov r8, r8)
 800382a:	e000      	b.n	800382e <HAL_UART_IRQHandler+0x5b6>
    return;
 800382c:	46c0      	nop			@ (mov r8, r8)
  }

}
 800382e:	46bd      	mov	sp, r7
 8003830:	b02b      	add	sp, #172	@ 0xac
 8003832:	bd90      	pop	{r4, r7, pc}
 8003834:	fffffeff 	.word	0xfffffeff
 8003838:	fffffedf 	.word	0xfffffedf

0800383c <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800383c:	b580      	push	{r7, lr}
 800383e:	b082      	sub	sp, #8
 8003840:	af00      	add	r7, sp, #0
 8003842:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8003844:	46c0      	nop			@ (mov r8, r8)
 8003846:	46bd      	mov	sp, r7
 8003848:	b002      	add	sp, #8
 800384a:	bd80      	pop	{r7, pc}

0800384c <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800384c:	b580      	push	{r7, lr}
 800384e:	b082      	sub	sp, #8
 8003850:	af00      	add	r7, sp, #0
 8003852:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8003854:	46c0      	nop			@ (mov r8, r8)
 8003856:	46bd      	mov	sp, r7
 8003858:	b002      	add	sp, #8
 800385a:	bd80      	pop	{r7, pc}

0800385c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800385c:	b580      	push	{r7, lr}
 800385e:	b082      	sub	sp, #8
 8003860:	af00      	add	r7, sp, #0
 8003862:	6078      	str	r0, [r7, #4]
 8003864:	000a      	movs	r2, r1
 8003866:	1cbb      	adds	r3, r7, #2
 8003868:	801a      	strh	r2, [r3, #0]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800386a:	46c0      	nop			@ (mov r8, r8)
 800386c:	46bd      	mov	sp, r7
 800386e:	b002      	add	sp, #8
 8003870:	bd80      	pop	{r7, pc}
	...

08003874 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003874:	b5b0      	push	{r4, r5, r7, lr}
 8003876:	b08e      	sub	sp, #56	@ 0x38
 8003878:	af00      	add	r7, sp, #0
 800387a:	61f8      	str	r0, [r7, #28]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800387c:	231a      	movs	r3, #26
 800387e:	2218      	movs	r2, #24
 8003880:	189b      	adds	r3, r3, r2
 8003882:	19db      	adds	r3, r3, r7
 8003884:	2200      	movs	r2, #0
 8003886:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003888:	69fb      	ldr	r3, [r7, #28]
 800388a:	689a      	ldr	r2, [r3, #8]
 800388c:	69fb      	ldr	r3, [r7, #28]
 800388e:	691b      	ldr	r3, [r3, #16]
 8003890:	431a      	orrs	r2, r3
 8003892:	69fb      	ldr	r3, [r7, #28]
 8003894:	695b      	ldr	r3, [r3, #20]
 8003896:	431a      	orrs	r2, r3
 8003898:	69fb      	ldr	r3, [r7, #28]
 800389a:	69db      	ldr	r3, [r3, #28]
 800389c:	4313      	orrs	r3, r2
 800389e:	637b      	str	r3, [r7, #52]	@ 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80038a0:	69fb      	ldr	r3, [r7, #28]
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	4ac6      	ldr	r2, [pc, #792]	@ (8003bc0 <UART_SetConfig+0x34c>)
 80038a8:	4013      	ands	r3, r2
 80038aa:	0019      	movs	r1, r3
 80038ac:	69fb      	ldr	r3, [r7, #28]
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80038b2:	430a      	orrs	r2, r1
 80038b4:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80038b6:	69fb      	ldr	r3, [r7, #28]
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	685b      	ldr	r3, [r3, #4]
 80038bc:	4ac1      	ldr	r2, [pc, #772]	@ (8003bc4 <UART_SetConfig+0x350>)
 80038be:	4013      	ands	r3, r2
 80038c0:	0019      	movs	r1, r3
 80038c2:	69fb      	ldr	r3, [r7, #28]
 80038c4:	68da      	ldr	r2, [r3, #12]
 80038c6:	69fb      	ldr	r3, [r7, #28]
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	430a      	orrs	r2, r1
 80038cc:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80038ce:	69fb      	ldr	r3, [r7, #28]
 80038d0:	699b      	ldr	r3, [r3, #24]
 80038d2:	637b      	str	r3, [r7, #52]	@ 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80038d4:	69fb      	ldr	r3, [r7, #28]
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	4abb      	ldr	r2, [pc, #748]	@ (8003bc8 <UART_SetConfig+0x354>)
 80038da:	4293      	cmp	r3, r2
 80038dc:	d004      	beq.n	80038e8 <UART_SetConfig+0x74>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80038de:	69fb      	ldr	r3, [r7, #28]
 80038e0:	6a1b      	ldr	r3, [r3, #32]
 80038e2:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80038e4:	4313      	orrs	r3, r2
 80038e6:	637b      	str	r3, [r7, #52]	@ 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80038e8:	69fb      	ldr	r3, [r7, #28]
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	689b      	ldr	r3, [r3, #8]
 80038ee:	4ab7      	ldr	r2, [pc, #732]	@ (8003bcc <UART_SetConfig+0x358>)
 80038f0:	4013      	ands	r3, r2
 80038f2:	0019      	movs	r1, r3
 80038f4:	69fb      	ldr	r3, [r7, #28]
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80038fa:	430a      	orrs	r2, r1
 80038fc:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80038fe:	69fb      	ldr	r3, [r7, #28]
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	4ab3      	ldr	r2, [pc, #716]	@ (8003bd0 <UART_SetConfig+0x35c>)
 8003904:	4293      	cmp	r3, r2
 8003906:	d131      	bne.n	800396c <UART_SetConfig+0xf8>
 8003908:	4bb2      	ldr	r3, [pc, #712]	@ (8003bd4 <UART_SetConfig+0x360>)
 800390a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800390c:	2203      	movs	r2, #3
 800390e:	4013      	ands	r3, r2
 8003910:	2b03      	cmp	r3, #3
 8003912:	d01d      	beq.n	8003950 <UART_SetConfig+0xdc>
 8003914:	d823      	bhi.n	800395e <UART_SetConfig+0xea>
 8003916:	2b02      	cmp	r3, #2
 8003918:	d00c      	beq.n	8003934 <UART_SetConfig+0xc0>
 800391a:	d820      	bhi.n	800395e <UART_SetConfig+0xea>
 800391c:	2b00      	cmp	r3, #0
 800391e:	d002      	beq.n	8003926 <UART_SetConfig+0xb2>
 8003920:	2b01      	cmp	r3, #1
 8003922:	d00e      	beq.n	8003942 <UART_SetConfig+0xce>
 8003924:	e01b      	b.n	800395e <UART_SetConfig+0xea>
 8003926:	231b      	movs	r3, #27
 8003928:	2218      	movs	r2, #24
 800392a:	189b      	adds	r3, r3, r2
 800392c:	19db      	adds	r3, r3, r7
 800392e:	2201      	movs	r2, #1
 8003930:	701a      	strb	r2, [r3, #0]
 8003932:	e09c      	b.n	8003a6e <UART_SetConfig+0x1fa>
 8003934:	231b      	movs	r3, #27
 8003936:	2218      	movs	r2, #24
 8003938:	189b      	adds	r3, r3, r2
 800393a:	19db      	adds	r3, r3, r7
 800393c:	2202      	movs	r2, #2
 800393e:	701a      	strb	r2, [r3, #0]
 8003940:	e095      	b.n	8003a6e <UART_SetConfig+0x1fa>
 8003942:	231b      	movs	r3, #27
 8003944:	2218      	movs	r2, #24
 8003946:	189b      	adds	r3, r3, r2
 8003948:	19db      	adds	r3, r3, r7
 800394a:	2204      	movs	r2, #4
 800394c:	701a      	strb	r2, [r3, #0]
 800394e:	e08e      	b.n	8003a6e <UART_SetConfig+0x1fa>
 8003950:	231b      	movs	r3, #27
 8003952:	2218      	movs	r2, #24
 8003954:	189b      	adds	r3, r3, r2
 8003956:	19db      	adds	r3, r3, r7
 8003958:	2208      	movs	r2, #8
 800395a:	701a      	strb	r2, [r3, #0]
 800395c:	e087      	b.n	8003a6e <UART_SetConfig+0x1fa>
 800395e:	231b      	movs	r3, #27
 8003960:	2218      	movs	r2, #24
 8003962:	189b      	adds	r3, r3, r2
 8003964:	19db      	adds	r3, r3, r7
 8003966:	2210      	movs	r2, #16
 8003968:	701a      	strb	r2, [r3, #0]
 800396a:	e080      	b.n	8003a6e <UART_SetConfig+0x1fa>
 800396c:	69fb      	ldr	r3, [r7, #28]
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	4a99      	ldr	r2, [pc, #612]	@ (8003bd8 <UART_SetConfig+0x364>)
 8003972:	4293      	cmp	r3, r2
 8003974:	d131      	bne.n	80039da <UART_SetConfig+0x166>
 8003976:	4b97      	ldr	r3, [pc, #604]	@ (8003bd4 <UART_SetConfig+0x360>)
 8003978:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800397a:	220c      	movs	r2, #12
 800397c:	4013      	ands	r3, r2
 800397e:	2b0c      	cmp	r3, #12
 8003980:	d01d      	beq.n	80039be <UART_SetConfig+0x14a>
 8003982:	d823      	bhi.n	80039cc <UART_SetConfig+0x158>
 8003984:	2b08      	cmp	r3, #8
 8003986:	d00c      	beq.n	80039a2 <UART_SetConfig+0x12e>
 8003988:	d820      	bhi.n	80039cc <UART_SetConfig+0x158>
 800398a:	2b00      	cmp	r3, #0
 800398c:	d002      	beq.n	8003994 <UART_SetConfig+0x120>
 800398e:	2b04      	cmp	r3, #4
 8003990:	d00e      	beq.n	80039b0 <UART_SetConfig+0x13c>
 8003992:	e01b      	b.n	80039cc <UART_SetConfig+0x158>
 8003994:	231b      	movs	r3, #27
 8003996:	2218      	movs	r2, #24
 8003998:	189b      	adds	r3, r3, r2
 800399a:	19db      	adds	r3, r3, r7
 800399c:	2200      	movs	r2, #0
 800399e:	701a      	strb	r2, [r3, #0]
 80039a0:	e065      	b.n	8003a6e <UART_SetConfig+0x1fa>
 80039a2:	231b      	movs	r3, #27
 80039a4:	2218      	movs	r2, #24
 80039a6:	189b      	adds	r3, r3, r2
 80039a8:	19db      	adds	r3, r3, r7
 80039aa:	2202      	movs	r2, #2
 80039ac:	701a      	strb	r2, [r3, #0]
 80039ae:	e05e      	b.n	8003a6e <UART_SetConfig+0x1fa>
 80039b0:	231b      	movs	r3, #27
 80039b2:	2218      	movs	r2, #24
 80039b4:	189b      	adds	r3, r3, r2
 80039b6:	19db      	adds	r3, r3, r7
 80039b8:	2204      	movs	r2, #4
 80039ba:	701a      	strb	r2, [r3, #0]
 80039bc:	e057      	b.n	8003a6e <UART_SetConfig+0x1fa>
 80039be:	231b      	movs	r3, #27
 80039c0:	2218      	movs	r2, #24
 80039c2:	189b      	adds	r3, r3, r2
 80039c4:	19db      	adds	r3, r3, r7
 80039c6:	2208      	movs	r2, #8
 80039c8:	701a      	strb	r2, [r3, #0]
 80039ca:	e050      	b.n	8003a6e <UART_SetConfig+0x1fa>
 80039cc:	231b      	movs	r3, #27
 80039ce:	2218      	movs	r2, #24
 80039d0:	189b      	adds	r3, r3, r2
 80039d2:	19db      	adds	r3, r3, r7
 80039d4:	2210      	movs	r2, #16
 80039d6:	701a      	strb	r2, [r3, #0]
 80039d8:	e049      	b.n	8003a6e <UART_SetConfig+0x1fa>
 80039da:	69fb      	ldr	r3, [r7, #28]
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	4a7a      	ldr	r2, [pc, #488]	@ (8003bc8 <UART_SetConfig+0x354>)
 80039e0:	4293      	cmp	r3, r2
 80039e2:	d13e      	bne.n	8003a62 <UART_SetConfig+0x1ee>
 80039e4:	4b7b      	ldr	r3, [pc, #492]	@ (8003bd4 <UART_SetConfig+0x360>)
 80039e6:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80039e8:	23c0      	movs	r3, #192	@ 0xc0
 80039ea:	011b      	lsls	r3, r3, #4
 80039ec:	4013      	ands	r3, r2
 80039ee:	22c0      	movs	r2, #192	@ 0xc0
 80039f0:	0112      	lsls	r2, r2, #4
 80039f2:	4293      	cmp	r3, r2
 80039f4:	d027      	beq.n	8003a46 <UART_SetConfig+0x1d2>
 80039f6:	22c0      	movs	r2, #192	@ 0xc0
 80039f8:	0112      	lsls	r2, r2, #4
 80039fa:	4293      	cmp	r3, r2
 80039fc:	d82a      	bhi.n	8003a54 <UART_SetConfig+0x1e0>
 80039fe:	2280      	movs	r2, #128	@ 0x80
 8003a00:	0112      	lsls	r2, r2, #4
 8003a02:	4293      	cmp	r3, r2
 8003a04:	d011      	beq.n	8003a2a <UART_SetConfig+0x1b6>
 8003a06:	2280      	movs	r2, #128	@ 0x80
 8003a08:	0112      	lsls	r2, r2, #4
 8003a0a:	4293      	cmp	r3, r2
 8003a0c:	d822      	bhi.n	8003a54 <UART_SetConfig+0x1e0>
 8003a0e:	2b00      	cmp	r3, #0
 8003a10:	d004      	beq.n	8003a1c <UART_SetConfig+0x1a8>
 8003a12:	2280      	movs	r2, #128	@ 0x80
 8003a14:	00d2      	lsls	r2, r2, #3
 8003a16:	4293      	cmp	r3, r2
 8003a18:	d00e      	beq.n	8003a38 <UART_SetConfig+0x1c4>
 8003a1a:	e01b      	b.n	8003a54 <UART_SetConfig+0x1e0>
 8003a1c:	231b      	movs	r3, #27
 8003a1e:	2218      	movs	r2, #24
 8003a20:	189b      	adds	r3, r3, r2
 8003a22:	19db      	adds	r3, r3, r7
 8003a24:	2200      	movs	r2, #0
 8003a26:	701a      	strb	r2, [r3, #0]
 8003a28:	e021      	b.n	8003a6e <UART_SetConfig+0x1fa>
 8003a2a:	231b      	movs	r3, #27
 8003a2c:	2218      	movs	r2, #24
 8003a2e:	189b      	adds	r3, r3, r2
 8003a30:	19db      	adds	r3, r3, r7
 8003a32:	2202      	movs	r2, #2
 8003a34:	701a      	strb	r2, [r3, #0]
 8003a36:	e01a      	b.n	8003a6e <UART_SetConfig+0x1fa>
 8003a38:	231b      	movs	r3, #27
 8003a3a:	2218      	movs	r2, #24
 8003a3c:	189b      	adds	r3, r3, r2
 8003a3e:	19db      	adds	r3, r3, r7
 8003a40:	2204      	movs	r2, #4
 8003a42:	701a      	strb	r2, [r3, #0]
 8003a44:	e013      	b.n	8003a6e <UART_SetConfig+0x1fa>
 8003a46:	231b      	movs	r3, #27
 8003a48:	2218      	movs	r2, #24
 8003a4a:	189b      	adds	r3, r3, r2
 8003a4c:	19db      	adds	r3, r3, r7
 8003a4e:	2208      	movs	r2, #8
 8003a50:	701a      	strb	r2, [r3, #0]
 8003a52:	e00c      	b.n	8003a6e <UART_SetConfig+0x1fa>
 8003a54:	231b      	movs	r3, #27
 8003a56:	2218      	movs	r2, #24
 8003a58:	189b      	adds	r3, r3, r2
 8003a5a:	19db      	adds	r3, r3, r7
 8003a5c:	2210      	movs	r2, #16
 8003a5e:	701a      	strb	r2, [r3, #0]
 8003a60:	e005      	b.n	8003a6e <UART_SetConfig+0x1fa>
 8003a62:	231b      	movs	r3, #27
 8003a64:	2218      	movs	r2, #24
 8003a66:	189b      	adds	r3, r3, r2
 8003a68:	19db      	adds	r3, r3, r7
 8003a6a:	2210      	movs	r2, #16
 8003a6c:	701a      	strb	r2, [r3, #0]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8003a6e:	69fb      	ldr	r3, [r7, #28]
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	4a55      	ldr	r2, [pc, #340]	@ (8003bc8 <UART_SetConfig+0x354>)
 8003a74:	4293      	cmp	r3, r2
 8003a76:	d000      	beq.n	8003a7a <UART_SetConfig+0x206>
 8003a78:	e084      	b.n	8003b84 <UART_SetConfig+0x310>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8003a7a:	231b      	movs	r3, #27
 8003a7c:	2218      	movs	r2, #24
 8003a7e:	189b      	adds	r3, r3, r2
 8003a80:	19db      	adds	r3, r3, r7
 8003a82:	781b      	ldrb	r3, [r3, #0]
 8003a84:	2b08      	cmp	r3, #8
 8003a86:	d01d      	beq.n	8003ac4 <UART_SetConfig+0x250>
 8003a88:	dc20      	bgt.n	8003acc <UART_SetConfig+0x258>
 8003a8a:	2b04      	cmp	r3, #4
 8003a8c:	d015      	beq.n	8003aba <UART_SetConfig+0x246>
 8003a8e:	dc1d      	bgt.n	8003acc <UART_SetConfig+0x258>
 8003a90:	2b00      	cmp	r3, #0
 8003a92:	d002      	beq.n	8003a9a <UART_SetConfig+0x226>
 8003a94:	2b02      	cmp	r3, #2
 8003a96:	d005      	beq.n	8003aa4 <UART_SetConfig+0x230>
 8003a98:	e018      	b.n	8003acc <UART_SetConfig+0x258>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003a9a:	f7ff f981 	bl	8002da0 <HAL_RCC_GetPCLK1Freq>
 8003a9e:	0003      	movs	r3, r0
 8003aa0:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8003aa2:	e01c      	b.n	8003ade <UART_SetConfig+0x26a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003aa4:	4b4b      	ldr	r3, [pc, #300]	@ (8003bd4 <UART_SetConfig+0x360>)
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	2210      	movs	r2, #16
 8003aaa:	4013      	ands	r3, r2
 8003aac:	d002      	beq.n	8003ab4 <UART_SetConfig+0x240>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 8003aae:	4b4b      	ldr	r3, [pc, #300]	@ (8003bdc <UART_SetConfig+0x368>)
 8003ab0:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8003ab2:	e014      	b.n	8003ade <UART_SetConfig+0x26a>
          pclk = (uint32_t) HSI_VALUE;
 8003ab4:	4b4a      	ldr	r3, [pc, #296]	@ (8003be0 <UART_SetConfig+0x36c>)
 8003ab6:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8003ab8:	e011      	b.n	8003ade <UART_SetConfig+0x26a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003aba:	f7ff f8c1 	bl	8002c40 <HAL_RCC_GetSysClockFreq>
 8003abe:	0003      	movs	r3, r0
 8003ac0:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8003ac2:	e00c      	b.n	8003ade <UART_SetConfig+0x26a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003ac4:	2380      	movs	r3, #128	@ 0x80
 8003ac6:	021b      	lsls	r3, r3, #8
 8003ac8:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8003aca:	e008      	b.n	8003ade <UART_SetConfig+0x26a>
      default:
        pclk = 0U;
 8003acc:	2300      	movs	r3, #0
 8003ace:	62fb      	str	r3, [r7, #44]	@ 0x2c
        ret = HAL_ERROR;
 8003ad0:	231a      	movs	r3, #26
 8003ad2:	2218      	movs	r2, #24
 8003ad4:	189b      	adds	r3, r3, r2
 8003ad6:	19db      	adds	r3, r3, r7
 8003ad8:	2201      	movs	r2, #1
 8003ada:	701a      	strb	r2, [r3, #0]
        break;
 8003adc:	46c0      	nop			@ (mov r8, r8)
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8003ade:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003ae0:	2b00      	cmp	r3, #0
 8003ae2:	d100      	bne.n	8003ae6 <UART_SetConfig+0x272>
 8003ae4:	e132      	b.n	8003d4c <UART_SetConfig+0x4d8>
    {
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8003ae6:	69fb      	ldr	r3, [r7, #28]
 8003ae8:	685a      	ldr	r2, [r3, #4]
 8003aea:	0013      	movs	r3, r2
 8003aec:	005b      	lsls	r3, r3, #1
 8003aee:	189b      	adds	r3, r3, r2
 8003af0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003af2:	429a      	cmp	r2, r3
 8003af4:	d305      	bcc.n	8003b02 <UART_SetConfig+0x28e>
          (pclk > (4096U * huart->Init.BaudRate)))
 8003af6:	69fb      	ldr	r3, [r7, #28]
 8003af8:	685b      	ldr	r3, [r3, #4]
 8003afa:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8003afc:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003afe:	429a      	cmp	r2, r3
 8003b00:	d906      	bls.n	8003b10 <UART_SetConfig+0x29c>
      {
        ret = HAL_ERROR;
 8003b02:	231a      	movs	r3, #26
 8003b04:	2218      	movs	r2, #24
 8003b06:	189b      	adds	r3, r3, r2
 8003b08:	19db      	adds	r3, r3, r7
 8003b0a:	2201      	movs	r2, #1
 8003b0c:	701a      	strb	r2, [r3, #0]
 8003b0e:	e11d      	b.n	8003d4c <UART_SetConfig+0x4d8>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8003b10:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003b12:	613b      	str	r3, [r7, #16]
 8003b14:	2300      	movs	r3, #0
 8003b16:	617b      	str	r3, [r7, #20]
 8003b18:	6939      	ldr	r1, [r7, #16]
 8003b1a:	697a      	ldr	r2, [r7, #20]
 8003b1c:	000b      	movs	r3, r1
 8003b1e:	0e1b      	lsrs	r3, r3, #24
 8003b20:	0010      	movs	r0, r2
 8003b22:	0205      	lsls	r5, r0, #8
 8003b24:	431d      	orrs	r5, r3
 8003b26:	000b      	movs	r3, r1
 8003b28:	021c      	lsls	r4, r3, #8
 8003b2a:	69fb      	ldr	r3, [r7, #28]
 8003b2c:	685b      	ldr	r3, [r3, #4]
 8003b2e:	085b      	lsrs	r3, r3, #1
 8003b30:	60bb      	str	r3, [r7, #8]
 8003b32:	2300      	movs	r3, #0
 8003b34:	60fb      	str	r3, [r7, #12]
 8003b36:	68b8      	ldr	r0, [r7, #8]
 8003b38:	68f9      	ldr	r1, [r7, #12]
 8003b3a:	1900      	adds	r0, r0, r4
 8003b3c:	4169      	adcs	r1, r5
 8003b3e:	69fb      	ldr	r3, [r7, #28]
 8003b40:	685b      	ldr	r3, [r3, #4]
 8003b42:	603b      	str	r3, [r7, #0]
 8003b44:	2300      	movs	r3, #0
 8003b46:	607b      	str	r3, [r7, #4]
 8003b48:	683a      	ldr	r2, [r7, #0]
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	f7fc fb68 	bl	8000220 <__aeabi_uldivmod>
 8003b50:	0002      	movs	r2, r0
 8003b52:	000b      	movs	r3, r1
 8003b54:	0013      	movs	r3, r2
 8003b56:	62bb      	str	r3, [r7, #40]	@ 0x28
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8003b58:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003b5a:	23c0      	movs	r3, #192	@ 0xc0
 8003b5c:	009b      	lsls	r3, r3, #2
 8003b5e:	429a      	cmp	r2, r3
 8003b60:	d309      	bcc.n	8003b76 <UART_SetConfig+0x302>
 8003b62:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003b64:	2380      	movs	r3, #128	@ 0x80
 8003b66:	035b      	lsls	r3, r3, #13
 8003b68:	429a      	cmp	r2, r3
 8003b6a:	d204      	bcs.n	8003b76 <UART_SetConfig+0x302>
        {
          huart->Instance->BRR = usartdiv;
 8003b6c:	69fb      	ldr	r3, [r7, #28]
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003b72:	60da      	str	r2, [r3, #12]
 8003b74:	e0ea      	b.n	8003d4c <UART_SetConfig+0x4d8>
        }
        else
        {
          ret = HAL_ERROR;
 8003b76:	231a      	movs	r3, #26
 8003b78:	2218      	movs	r2, #24
 8003b7a:	189b      	adds	r3, r3, r2
 8003b7c:	19db      	adds	r3, r3, r7
 8003b7e:	2201      	movs	r2, #1
 8003b80:	701a      	strb	r2, [r3, #0]
 8003b82:	e0e3      	b.n	8003d4c <UART_SetConfig+0x4d8>
        }
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003b84:	69fb      	ldr	r3, [r7, #28]
 8003b86:	69da      	ldr	r2, [r3, #28]
 8003b88:	2380      	movs	r3, #128	@ 0x80
 8003b8a:	021b      	lsls	r3, r3, #8
 8003b8c:	429a      	cmp	r2, r3
 8003b8e:	d000      	beq.n	8003b92 <UART_SetConfig+0x31e>
 8003b90:	e085      	b.n	8003c9e <UART_SetConfig+0x42a>
  {
    switch (clocksource)
 8003b92:	231b      	movs	r3, #27
 8003b94:	2218      	movs	r2, #24
 8003b96:	189b      	adds	r3, r3, r2
 8003b98:	19db      	adds	r3, r3, r7
 8003b9a:	781b      	ldrb	r3, [r3, #0]
 8003b9c:	2b08      	cmp	r3, #8
 8003b9e:	d837      	bhi.n	8003c10 <UART_SetConfig+0x39c>
 8003ba0:	009a      	lsls	r2, r3, #2
 8003ba2:	4b10      	ldr	r3, [pc, #64]	@ (8003be4 <UART_SetConfig+0x370>)
 8003ba4:	18d3      	adds	r3, r2, r3
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003baa:	f7ff f8f9 	bl	8002da0 <HAL_RCC_GetPCLK1Freq>
 8003bae:	0003      	movs	r3, r0
 8003bb0:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8003bb2:	e036      	b.n	8003c22 <UART_SetConfig+0x3ae>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003bb4:	f7ff f90a 	bl	8002dcc <HAL_RCC_GetPCLK2Freq>
 8003bb8:	0003      	movs	r3, r0
 8003bba:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8003bbc:	e031      	b.n	8003c22 <UART_SetConfig+0x3ae>
 8003bbe:	46c0      	nop			@ (mov r8, r8)
 8003bc0:	efff69f3 	.word	0xefff69f3
 8003bc4:	ffffcfff 	.word	0xffffcfff
 8003bc8:	40004800 	.word	0x40004800
 8003bcc:	fffff4ff 	.word	0xfffff4ff
 8003bd0:	40013800 	.word	0x40013800
 8003bd4:	40021000 	.word	0x40021000
 8003bd8:	40004400 	.word	0x40004400
 8003bdc:	003d0900 	.word	0x003d0900
 8003be0:	00f42400 	.word	0x00f42400
 8003be4:	08005570 	.word	0x08005570
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003be8:	4b60      	ldr	r3, [pc, #384]	@ (8003d6c <UART_SetConfig+0x4f8>)
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	2210      	movs	r2, #16
 8003bee:	4013      	ands	r3, r2
 8003bf0:	d002      	beq.n	8003bf8 <UART_SetConfig+0x384>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 8003bf2:	4b5f      	ldr	r3, [pc, #380]	@ (8003d70 <UART_SetConfig+0x4fc>)
 8003bf4:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8003bf6:	e014      	b.n	8003c22 <UART_SetConfig+0x3ae>
          pclk = (uint32_t) HSI_VALUE;
 8003bf8:	4b5e      	ldr	r3, [pc, #376]	@ (8003d74 <UART_SetConfig+0x500>)
 8003bfa:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8003bfc:	e011      	b.n	8003c22 <UART_SetConfig+0x3ae>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003bfe:	f7ff f81f 	bl	8002c40 <HAL_RCC_GetSysClockFreq>
 8003c02:	0003      	movs	r3, r0
 8003c04:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8003c06:	e00c      	b.n	8003c22 <UART_SetConfig+0x3ae>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003c08:	2380      	movs	r3, #128	@ 0x80
 8003c0a:	021b      	lsls	r3, r3, #8
 8003c0c:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8003c0e:	e008      	b.n	8003c22 <UART_SetConfig+0x3ae>
      default:
        pclk = 0U;
 8003c10:	2300      	movs	r3, #0
 8003c12:	62fb      	str	r3, [r7, #44]	@ 0x2c
        ret = HAL_ERROR;
 8003c14:	231a      	movs	r3, #26
 8003c16:	2218      	movs	r2, #24
 8003c18:	189b      	adds	r3, r3, r2
 8003c1a:	19db      	adds	r3, r3, r7
 8003c1c:	2201      	movs	r2, #1
 8003c1e:	701a      	strb	r2, [r3, #0]
        break;
 8003c20:	46c0      	nop			@ (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003c22:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003c24:	2b00      	cmp	r3, #0
 8003c26:	d100      	bne.n	8003c2a <UART_SetConfig+0x3b6>
 8003c28:	e090      	b.n	8003d4c <UART_SetConfig+0x4d8>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003c2a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003c2c:	005a      	lsls	r2, r3, #1
 8003c2e:	69fb      	ldr	r3, [r7, #28]
 8003c30:	685b      	ldr	r3, [r3, #4]
 8003c32:	085b      	lsrs	r3, r3, #1
 8003c34:	18d2      	adds	r2, r2, r3
 8003c36:	69fb      	ldr	r3, [r7, #28]
 8003c38:	685b      	ldr	r3, [r3, #4]
 8003c3a:	0019      	movs	r1, r3
 8003c3c:	0010      	movs	r0, r2
 8003c3e:	f7fc fa63 	bl	8000108 <__udivsi3>
 8003c42:	0003      	movs	r3, r0
 8003c44:	62bb      	str	r3, [r7, #40]	@ 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003c46:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003c48:	2b0f      	cmp	r3, #15
 8003c4a:	d921      	bls.n	8003c90 <UART_SetConfig+0x41c>
 8003c4c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003c4e:	2380      	movs	r3, #128	@ 0x80
 8003c50:	025b      	lsls	r3, r3, #9
 8003c52:	429a      	cmp	r2, r3
 8003c54:	d21c      	bcs.n	8003c90 <UART_SetConfig+0x41c>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003c56:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003c58:	b29a      	uxth	r2, r3
 8003c5a:	200e      	movs	r0, #14
 8003c5c:	2418      	movs	r4, #24
 8003c5e:	1903      	adds	r3, r0, r4
 8003c60:	19db      	adds	r3, r3, r7
 8003c62:	210f      	movs	r1, #15
 8003c64:	438a      	bics	r2, r1
 8003c66:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003c68:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003c6a:	085b      	lsrs	r3, r3, #1
 8003c6c:	b29b      	uxth	r3, r3
 8003c6e:	2207      	movs	r2, #7
 8003c70:	4013      	ands	r3, r2
 8003c72:	b299      	uxth	r1, r3
 8003c74:	1903      	adds	r3, r0, r4
 8003c76:	19db      	adds	r3, r3, r7
 8003c78:	1902      	adds	r2, r0, r4
 8003c7a:	19d2      	adds	r2, r2, r7
 8003c7c:	8812      	ldrh	r2, [r2, #0]
 8003c7e:	430a      	orrs	r2, r1
 8003c80:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8003c82:	69fb      	ldr	r3, [r7, #28]
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	1902      	adds	r2, r0, r4
 8003c88:	19d2      	adds	r2, r2, r7
 8003c8a:	8812      	ldrh	r2, [r2, #0]
 8003c8c:	60da      	str	r2, [r3, #12]
 8003c8e:	e05d      	b.n	8003d4c <UART_SetConfig+0x4d8>
      }
      else
      {
        ret = HAL_ERROR;
 8003c90:	231a      	movs	r3, #26
 8003c92:	2218      	movs	r2, #24
 8003c94:	189b      	adds	r3, r3, r2
 8003c96:	19db      	adds	r3, r3, r7
 8003c98:	2201      	movs	r2, #1
 8003c9a:	701a      	strb	r2, [r3, #0]
 8003c9c:	e056      	b.n	8003d4c <UART_SetConfig+0x4d8>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003c9e:	231b      	movs	r3, #27
 8003ca0:	2218      	movs	r2, #24
 8003ca2:	189b      	adds	r3, r3, r2
 8003ca4:	19db      	adds	r3, r3, r7
 8003ca6:	781b      	ldrb	r3, [r3, #0]
 8003ca8:	2b08      	cmp	r3, #8
 8003caa:	d822      	bhi.n	8003cf2 <UART_SetConfig+0x47e>
 8003cac:	009a      	lsls	r2, r3, #2
 8003cae:	4b32      	ldr	r3, [pc, #200]	@ (8003d78 <UART_SetConfig+0x504>)
 8003cb0:	18d3      	adds	r3, r2, r3
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003cb6:	f7ff f873 	bl	8002da0 <HAL_RCC_GetPCLK1Freq>
 8003cba:	0003      	movs	r3, r0
 8003cbc:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8003cbe:	e021      	b.n	8003d04 <UART_SetConfig+0x490>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003cc0:	f7ff f884 	bl	8002dcc <HAL_RCC_GetPCLK2Freq>
 8003cc4:	0003      	movs	r3, r0
 8003cc6:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8003cc8:	e01c      	b.n	8003d04 <UART_SetConfig+0x490>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003cca:	4b28      	ldr	r3, [pc, #160]	@ (8003d6c <UART_SetConfig+0x4f8>)
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	2210      	movs	r2, #16
 8003cd0:	4013      	ands	r3, r2
 8003cd2:	d002      	beq.n	8003cda <UART_SetConfig+0x466>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 8003cd4:	4b26      	ldr	r3, [pc, #152]	@ (8003d70 <UART_SetConfig+0x4fc>)
 8003cd6:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8003cd8:	e014      	b.n	8003d04 <UART_SetConfig+0x490>
          pclk = (uint32_t) HSI_VALUE;
 8003cda:	4b26      	ldr	r3, [pc, #152]	@ (8003d74 <UART_SetConfig+0x500>)
 8003cdc:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8003cde:	e011      	b.n	8003d04 <UART_SetConfig+0x490>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003ce0:	f7fe ffae 	bl	8002c40 <HAL_RCC_GetSysClockFreq>
 8003ce4:	0003      	movs	r3, r0
 8003ce6:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8003ce8:	e00c      	b.n	8003d04 <UART_SetConfig+0x490>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003cea:	2380      	movs	r3, #128	@ 0x80
 8003cec:	021b      	lsls	r3, r3, #8
 8003cee:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8003cf0:	e008      	b.n	8003d04 <UART_SetConfig+0x490>
      default:
        pclk = 0U;
 8003cf2:	2300      	movs	r3, #0
 8003cf4:	62fb      	str	r3, [r7, #44]	@ 0x2c
        ret = HAL_ERROR;
 8003cf6:	231a      	movs	r3, #26
 8003cf8:	2218      	movs	r2, #24
 8003cfa:	189b      	adds	r3, r3, r2
 8003cfc:	19db      	adds	r3, r3, r7
 8003cfe:	2201      	movs	r2, #1
 8003d00:	701a      	strb	r2, [r3, #0]
        break;
 8003d02:	46c0      	nop			@ (mov r8, r8)
    }

    if (pclk != 0U)
 8003d04:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003d06:	2b00      	cmp	r3, #0
 8003d08:	d020      	beq.n	8003d4c <UART_SetConfig+0x4d8>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003d0a:	69fb      	ldr	r3, [r7, #28]
 8003d0c:	685b      	ldr	r3, [r3, #4]
 8003d0e:	085a      	lsrs	r2, r3, #1
 8003d10:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003d12:	18d2      	adds	r2, r2, r3
 8003d14:	69fb      	ldr	r3, [r7, #28]
 8003d16:	685b      	ldr	r3, [r3, #4]
 8003d18:	0019      	movs	r1, r3
 8003d1a:	0010      	movs	r0, r2
 8003d1c:	f7fc f9f4 	bl	8000108 <__udivsi3>
 8003d20:	0003      	movs	r3, r0
 8003d22:	62bb      	str	r3, [r7, #40]	@ 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003d24:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003d26:	2b0f      	cmp	r3, #15
 8003d28:	d90a      	bls.n	8003d40 <UART_SetConfig+0x4cc>
 8003d2a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003d2c:	2380      	movs	r3, #128	@ 0x80
 8003d2e:	025b      	lsls	r3, r3, #9
 8003d30:	429a      	cmp	r2, r3
 8003d32:	d205      	bcs.n	8003d40 <UART_SetConfig+0x4cc>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8003d34:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003d36:	b29a      	uxth	r2, r3
 8003d38:	69fb      	ldr	r3, [r7, #28]
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	60da      	str	r2, [r3, #12]
 8003d3e:	e005      	b.n	8003d4c <UART_SetConfig+0x4d8>
      }
      else
      {
        ret = HAL_ERROR;
 8003d40:	231a      	movs	r3, #26
 8003d42:	2218      	movs	r2, #24
 8003d44:	189b      	adds	r3, r3, r2
 8003d46:	19db      	adds	r3, r3, r7
 8003d48:	2201      	movs	r2, #1
 8003d4a:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003d4c:	69fb      	ldr	r3, [r7, #28]
 8003d4e:	2200      	movs	r2, #0
 8003d50:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8003d52:	69fb      	ldr	r3, [r7, #28]
 8003d54:	2200      	movs	r2, #0
 8003d56:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8003d58:	231a      	movs	r3, #26
 8003d5a:	2218      	movs	r2, #24
 8003d5c:	189b      	adds	r3, r3, r2
 8003d5e:	19db      	adds	r3, r3, r7
 8003d60:	781b      	ldrb	r3, [r3, #0]
}
 8003d62:	0018      	movs	r0, r3
 8003d64:	46bd      	mov	sp, r7
 8003d66:	b00e      	add	sp, #56	@ 0x38
 8003d68:	bdb0      	pop	{r4, r5, r7, pc}
 8003d6a:	46c0      	nop			@ (mov r8, r8)
 8003d6c:	40021000 	.word	0x40021000
 8003d70:	003d0900 	.word	0x003d0900
 8003d74:	00f42400 	.word	0x00f42400
 8003d78:	08005594 	.word	0x08005594

08003d7c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003d7c:	b580      	push	{r7, lr}
 8003d7e:	b082      	sub	sp, #8
 8003d80:	af00      	add	r7, sp, #0
 8003d82:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d88:	2201      	movs	r2, #1
 8003d8a:	4013      	ands	r3, r2
 8003d8c:	d00b      	beq.n	8003da6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	685b      	ldr	r3, [r3, #4]
 8003d94:	4a4a      	ldr	r2, [pc, #296]	@ (8003ec0 <UART_AdvFeatureConfig+0x144>)
 8003d96:	4013      	ands	r3, r2
 8003d98:	0019      	movs	r1, r3
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	430a      	orrs	r2, r1
 8003da4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003daa:	2202      	movs	r2, #2
 8003dac:	4013      	ands	r3, r2
 8003dae:	d00b      	beq.n	8003dc8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	685b      	ldr	r3, [r3, #4]
 8003db6:	4a43      	ldr	r2, [pc, #268]	@ (8003ec4 <UART_AdvFeatureConfig+0x148>)
 8003db8:	4013      	ands	r3, r2
 8003dba:	0019      	movs	r1, r3
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	430a      	orrs	r2, r1
 8003dc6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003dcc:	2204      	movs	r2, #4
 8003dce:	4013      	ands	r3, r2
 8003dd0:	d00b      	beq.n	8003dea <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	685b      	ldr	r3, [r3, #4]
 8003dd8:	4a3b      	ldr	r2, [pc, #236]	@ (8003ec8 <UART_AdvFeatureConfig+0x14c>)
 8003dda:	4013      	ands	r3, r2
 8003ddc:	0019      	movs	r1, r3
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	430a      	orrs	r2, r1
 8003de8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003dee:	2208      	movs	r2, #8
 8003df0:	4013      	ands	r3, r2
 8003df2:	d00b      	beq.n	8003e0c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	685b      	ldr	r3, [r3, #4]
 8003dfa:	4a34      	ldr	r2, [pc, #208]	@ (8003ecc <UART_AdvFeatureConfig+0x150>)
 8003dfc:	4013      	ands	r3, r2
 8003dfe:	0019      	movs	r1, r3
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	430a      	orrs	r2, r1
 8003e0a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e10:	2210      	movs	r2, #16
 8003e12:	4013      	ands	r3, r2
 8003e14:	d00b      	beq.n	8003e2e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	689b      	ldr	r3, [r3, #8]
 8003e1c:	4a2c      	ldr	r2, [pc, #176]	@ (8003ed0 <UART_AdvFeatureConfig+0x154>)
 8003e1e:	4013      	ands	r3, r2
 8003e20:	0019      	movs	r1, r3
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	430a      	orrs	r2, r1
 8003e2c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e32:	2220      	movs	r2, #32
 8003e34:	4013      	ands	r3, r2
 8003e36:	d00b      	beq.n	8003e50 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	689b      	ldr	r3, [r3, #8]
 8003e3e:	4a25      	ldr	r2, [pc, #148]	@ (8003ed4 <UART_AdvFeatureConfig+0x158>)
 8003e40:	4013      	ands	r3, r2
 8003e42:	0019      	movs	r1, r3
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	430a      	orrs	r2, r1
 8003e4e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e54:	2240      	movs	r2, #64	@ 0x40
 8003e56:	4013      	ands	r3, r2
 8003e58:	d01d      	beq.n	8003e96 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	685b      	ldr	r3, [r3, #4]
 8003e60:	4a1d      	ldr	r2, [pc, #116]	@ (8003ed8 <UART_AdvFeatureConfig+0x15c>)
 8003e62:	4013      	ands	r3, r2
 8003e64:	0019      	movs	r1, r3
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	430a      	orrs	r2, r1
 8003e70:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003e76:	2380      	movs	r3, #128	@ 0x80
 8003e78:	035b      	lsls	r3, r3, #13
 8003e7a:	429a      	cmp	r2, r3
 8003e7c:	d10b      	bne.n	8003e96 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	685b      	ldr	r3, [r3, #4]
 8003e84:	4a15      	ldr	r2, [pc, #84]	@ (8003edc <UART_AdvFeatureConfig+0x160>)
 8003e86:	4013      	ands	r3, r2
 8003e88:	0019      	movs	r1, r3
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	430a      	orrs	r2, r1
 8003e94:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e9a:	2280      	movs	r2, #128	@ 0x80
 8003e9c:	4013      	ands	r3, r2
 8003e9e:	d00b      	beq.n	8003eb8 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	685b      	ldr	r3, [r3, #4]
 8003ea6:	4a0e      	ldr	r2, [pc, #56]	@ (8003ee0 <UART_AdvFeatureConfig+0x164>)
 8003ea8:	4013      	ands	r3, r2
 8003eaa:	0019      	movs	r1, r3
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	430a      	orrs	r2, r1
 8003eb6:	605a      	str	r2, [r3, #4]
  }
}
 8003eb8:	46c0      	nop			@ (mov r8, r8)
 8003eba:	46bd      	mov	sp, r7
 8003ebc:	b002      	add	sp, #8
 8003ebe:	bd80      	pop	{r7, pc}
 8003ec0:	fffdffff 	.word	0xfffdffff
 8003ec4:	fffeffff 	.word	0xfffeffff
 8003ec8:	fffbffff 	.word	0xfffbffff
 8003ecc:	ffff7fff 	.word	0xffff7fff
 8003ed0:	ffffefff 	.word	0xffffefff
 8003ed4:	ffffdfff 	.word	0xffffdfff
 8003ed8:	ffefffff 	.word	0xffefffff
 8003edc:	ff9fffff 	.word	0xff9fffff
 8003ee0:	fff7ffff 	.word	0xfff7ffff

08003ee4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003ee4:	b580      	push	{r7, lr}
 8003ee6:	b092      	sub	sp, #72	@ 0x48
 8003ee8:	af02      	add	r7, sp, #8
 8003eea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	2284      	movs	r2, #132	@ 0x84
 8003ef0:	2100      	movs	r1, #0
 8003ef2:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003ef4:	f7fd f8f4 	bl	80010e0 <HAL_GetTick>
 8003ef8:	0003      	movs	r3, r0
 8003efa:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	2208      	movs	r2, #8
 8003f04:	4013      	ands	r3, r2
 8003f06:	2b08      	cmp	r3, #8
 8003f08:	d12c      	bne.n	8003f64 <UART_CheckIdleState+0x80>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003f0a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003f0c:	2280      	movs	r2, #128	@ 0x80
 8003f0e:	0391      	lsls	r1, r2, #14
 8003f10:	6878      	ldr	r0, [r7, #4]
 8003f12:	4a46      	ldr	r2, [pc, #280]	@ (800402c <UART_CheckIdleState+0x148>)
 8003f14:	9200      	str	r2, [sp, #0]
 8003f16:	2200      	movs	r2, #0
 8003f18:	f000 f88c 	bl	8004034 <UART_WaitOnFlagUntilTimeout>
 8003f1c:	1e03      	subs	r3, r0, #0
 8003f1e:	d021      	beq.n	8003f64 <UART_CheckIdleState+0x80>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003f20:	f3ef 8310 	mrs	r3, PRIMASK
 8003f24:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 8003f26:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8003f28:	63bb      	str	r3, [r7, #56]	@ 0x38
 8003f2a:	2301      	movs	r3, #1
 8003f2c:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003f2e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003f30:	f383 8810 	msr	PRIMASK, r3
}
 8003f34:	46c0      	nop			@ (mov r8, r8)
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	681a      	ldr	r2, [r3, #0]
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	2180      	movs	r1, #128	@ 0x80
 8003f42:	438a      	bics	r2, r1
 8003f44:	601a      	str	r2, [r3, #0]
 8003f46:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003f48:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003f4a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003f4c:	f383 8810 	msr	PRIMASK, r3
}
 8003f50:	46c0      	nop			@ (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	2220      	movs	r2, #32
 8003f56:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	2278      	movs	r2, #120	@ 0x78
 8003f5c:	2100      	movs	r1, #0
 8003f5e:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003f60:	2303      	movs	r3, #3
 8003f62:	e05f      	b.n	8004024 <UART_CheckIdleState+0x140>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	2204      	movs	r2, #4
 8003f6c:	4013      	ands	r3, r2
 8003f6e:	2b04      	cmp	r3, #4
 8003f70:	d146      	bne.n	8004000 <UART_CheckIdleState+0x11c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003f72:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003f74:	2280      	movs	r2, #128	@ 0x80
 8003f76:	03d1      	lsls	r1, r2, #15
 8003f78:	6878      	ldr	r0, [r7, #4]
 8003f7a:	4a2c      	ldr	r2, [pc, #176]	@ (800402c <UART_CheckIdleState+0x148>)
 8003f7c:	9200      	str	r2, [sp, #0]
 8003f7e:	2200      	movs	r2, #0
 8003f80:	f000 f858 	bl	8004034 <UART_WaitOnFlagUntilTimeout>
 8003f84:	1e03      	subs	r3, r0, #0
 8003f86:	d03b      	beq.n	8004000 <UART_CheckIdleState+0x11c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003f88:	f3ef 8310 	mrs	r3, PRIMASK
 8003f8c:	60fb      	str	r3, [r7, #12]
  return(result);
 8003f8e:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003f90:	637b      	str	r3, [r7, #52]	@ 0x34
 8003f92:	2301      	movs	r3, #1
 8003f94:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003f96:	693b      	ldr	r3, [r7, #16]
 8003f98:	f383 8810 	msr	PRIMASK, r3
}
 8003f9c:	46c0      	nop			@ (mov r8, r8)
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	681a      	ldr	r2, [r3, #0]
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	4921      	ldr	r1, [pc, #132]	@ (8004030 <UART_CheckIdleState+0x14c>)
 8003faa:	400a      	ands	r2, r1
 8003fac:	601a      	str	r2, [r3, #0]
 8003fae:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003fb0:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003fb2:	697b      	ldr	r3, [r7, #20]
 8003fb4:	f383 8810 	msr	PRIMASK, r3
}
 8003fb8:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003fba:	f3ef 8310 	mrs	r3, PRIMASK
 8003fbe:	61bb      	str	r3, [r7, #24]
  return(result);
 8003fc0:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003fc2:	633b      	str	r3, [r7, #48]	@ 0x30
 8003fc4:	2301      	movs	r3, #1
 8003fc6:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003fc8:	69fb      	ldr	r3, [r7, #28]
 8003fca:	f383 8810 	msr	PRIMASK, r3
}
 8003fce:	46c0      	nop			@ (mov r8, r8)
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	689a      	ldr	r2, [r3, #8]
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	2101      	movs	r1, #1
 8003fdc:	438a      	bics	r2, r1
 8003fde:	609a      	str	r2, [r3, #8]
 8003fe0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003fe2:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003fe4:	6a3b      	ldr	r3, [r7, #32]
 8003fe6:	f383 8810 	msr	PRIMASK, r3
}
 8003fea:	46c0      	nop			@ (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	2280      	movs	r2, #128	@ 0x80
 8003ff0:	2120      	movs	r1, #32
 8003ff2:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	2278      	movs	r2, #120	@ 0x78
 8003ff8:	2100      	movs	r1, #0
 8003ffa:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003ffc:	2303      	movs	r3, #3
 8003ffe:	e011      	b.n	8004024 <UART_CheckIdleState+0x140>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	2220      	movs	r2, #32
 8004004:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	2280      	movs	r2, #128	@ 0x80
 800400a:	2120      	movs	r1, #32
 800400c:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	2200      	movs	r2, #0
 8004012:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	2200      	movs	r2, #0
 8004018:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	2278      	movs	r2, #120	@ 0x78
 800401e:	2100      	movs	r1, #0
 8004020:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004022:	2300      	movs	r3, #0
}
 8004024:	0018      	movs	r0, r3
 8004026:	46bd      	mov	sp, r7
 8004028:	b010      	add	sp, #64	@ 0x40
 800402a:	bd80      	pop	{r7, pc}
 800402c:	01ffffff 	.word	0x01ffffff
 8004030:	fffffedf 	.word	0xfffffedf

08004034 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004034:	b580      	push	{r7, lr}
 8004036:	b084      	sub	sp, #16
 8004038:	af00      	add	r7, sp, #0
 800403a:	60f8      	str	r0, [r7, #12]
 800403c:	60b9      	str	r1, [r7, #8]
 800403e:	603b      	str	r3, [r7, #0]
 8004040:	1dfb      	adds	r3, r7, #7
 8004042:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004044:	e04b      	b.n	80040de <UART_WaitOnFlagUntilTimeout+0xaa>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004046:	69bb      	ldr	r3, [r7, #24]
 8004048:	3301      	adds	r3, #1
 800404a:	d048      	beq.n	80040de <UART_WaitOnFlagUntilTimeout+0xaa>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800404c:	f7fd f848 	bl	80010e0 <HAL_GetTick>
 8004050:	0002      	movs	r2, r0
 8004052:	683b      	ldr	r3, [r7, #0]
 8004054:	1ad3      	subs	r3, r2, r3
 8004056:	69ba      	ldr	r2, [r7, #24]
 8004058:	429a      	cmp	r2, r3
 800405a:	d302      	bcc.n	8004062 <UART_WaitOnFlagUntilTimeout+0x2e>
 800405c:	69bb      	ldr	r3, [r7, #24]
 800405e:	2b00      	cmp	r3, #0
 8004060:	d101      	bne.n	8004066 <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 8004062:	2303      	movs	r3, #3
 8004064:	e04b      	b.n	80040fe <UART_WaitOnFlagUntilTimeout+0xca>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8004066:	68fb      	ldr	r3, [r7, #12]
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	2204      	movs	r2, #4
 800406e:	4013      	ands	r3, r2
 8004070:	d035      	beq.n	80040de <UART_WaitOnFlagUntilTimeout+0xaa>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8004072:	68fb      	ldr	r3, [r7, #12]
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	69db      	ldr	r3, [r3, #28]
 8004078:	2208      	movs	r2, #8
 800407a:	4013      	ands	r3, r2
 800407c:	2b08      	cmp	r3, #8
 800407e:	d111      	bne.n	80040a4 <UART_WaitOnFlagUntilTimeout+0x70>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004080:	68fb      	ldr	r3, [r7, #12]
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	2208      	movs	r2, #8
 8004086:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 8004088:	68fb      	ldr	r3, [r7, #12]
 800408a:	0018      	movs	r0, r3
 800408c:	f000 f906 	bl	800429c <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 8004090:	68fb      	ldr	r3, [r7, #12]
 8004092:	2284      	movs	r2, #132	@ 0x84
 8004094:	2108      	movs	r1, #8
 8004096:	5099      	str	r1, [r3, r2]

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 8004098:	68fb      	ldr	r3, [r7, #12]
 800409a:	2278      	movs	r2, #120	@ 0x78
 800409c:	2100      	movs	r1, #0
 800409e:	5499      	strb	r1, [r3, r2]

           return HAL_ERROR;
 80040a0:	2301      	movs	r3, #1
 80040a2:	e02c      	b.n	80040fe <UART_WaitOnFlagUntilTimeout+0xca>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80040a4:	68fb      	ldr	r3, [r7, #12]
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	69da      	ldr	r2, [r3, #28]
 80040aa:	2380      	movs	r3, #128	@ 0x80
 80040ac:	011b      	lsls	r3, r3, #4
 80040ae:	401a      	ands	r2, r3
 80040b0:	2380      	movs	r3, #128	@ 0x80
 80040b2:	011b      	lsls	r3, r3, #4
 80040b4:	429a      	cmp	r2, r3
 80040b6:	d112      	bne.n	80040de <UART_WaitOnFlagUntilTimeout+0xaa>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80040b8:	68fb      	ldr	r3, [r7, #12]
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	2280      	movs	r2, #128	@ 0x80
 80040be:	0112      	lsls	r2, r2, #4
 80040c0:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80040c2:	68fb      	ldr	r3, [r7, #12]
 80040c4:	0018      	movs	r0, r3
 80040c6:	f000 f8e9 	bl	800429c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80040ca:	68fb      	ldr	r3, [r7, #12]
 80040cc:	2284      	movs	r2, #132	@ 0x84
 80040ce:	2120      	movs	r1, #32
 80040d0:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80040d2:	68fb      	ldr	r3, [r7, #12]
 80040d4:	2278      	movs	r2, #120	@ 0x78
 80040d6:	2100      	movs	r1, #0
 80040d8:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 80040da:	2303      	movs	r3, #3
 80040dc:	e00f      	b.n	80040fe <UART_WaitOnFlagUntilTimeout+0xca>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80040de:	68fb      	ldr	r3, [r7, #12]
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	69db      	ldr	r3, [r3, #28]
 80040e4:	68ba      	ldr	r2, [r7, #8]
 80040e6:	4013      	ands	r3, r2
 80040e8:	68ba      	ldr	r2, [r7, #8]
 80040ea:	1ad3      	subs	r3, r2, r3
 80040ec:	425a      	negs	r2, r3
 80040ee:	4153      	adcs	r3, r2
 80040f0:	b2db      	uxtb	r3, r3
 80040f2:	001a      	movs	r2, r3
 80040f4:	1dfb      	adds	r3, r7, #7
 80040f6:	781b      	ldrb	r3, [r3, #0]
 80040f8:	429a      	cmp	r2, r3
 80040fa:	d0a4      	beq.n	8004046 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80040fc:	2300      	movs	r3, #0
}
 80040fe:	0018      	movs	r0, r3
 8004100:	46bd      	mov	sp, r7
 8004102:	b004      	add	sp, #16
 8004104:	bd80      	pop	{r7, pc}
	...

08004108 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004108:	b580      	push	{r7, lr}
 800410a:	b090      	sub	sp, #64	@ 0x40
 800410c:	af00      	add	r7, sp, #0
 800410e:	60f8      	str	r0, [r7, #12]
 8004110:	60b9      	str	r1, [r7, #8]
 8004112:	1dbb      	adds	r3, r7, #6
 8004114:	801a      	strh	r2, [r3, #0]
  huart->pRxBuffPtr  = pData;
 8004116:	68fb      	ldr	r3, [r7, #12]
 8004118:	68ba      	ldr	r2, [r7, #8]
 800411a:	655a      	str	r2, [r3, #84]	@ 0x54
  huart->RxXferSize  = Size;
 800411c:	68fb      	ldr	r3, [r7, #12]
 800411e:	1dba      	adds	r2, r7, #6
 8004120:	2158      	movs	r1, #88	@ 0x58
 8004122:	8812      	ldrh	r2, [r2, #0]
 8004124:	525a      	strh	r2, [r3, r1]
  huart->RxXferCount = Size;
 8004126:	68fb      	ldr	r3, [r7, #12]
 8004128:	1dba      	adds	r2, r7, #6
 800412a:	215a      	movs	r1, #90	@ 0x5a
 800412c:	8812      	ldrh	r2, [r2, #0]
 800412e:	525a      	strh	r2, [r3, r1]
  huart->RxISR       = NULL;
 8004130:	68fb      	ldr	r3, [r7, #12]
 8004132:	2200      	movs	r2, #0
 8004134:	669a      	str	r2, [r3, #104]	@ 0x68

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8004136:	68fb      	ldr	r3, [r7, #12]
 8004138:	689a      	ldr	r2, [r3, #8]
 800413a:	2380      	movs	r3, #128	@ 0x80
 800413c:	015b      	lsls	r3, r3, #5
 800413e:	429a      	cmp	r2, r3
 8004140:	d10d      	bne.n	800415e <UART_Start_Receive_IT+0x56>
 8004142:	68fb      	ldr	r3, [r7, #12]
 8004144:	691b      	ldr	r3, [r3, #16]
 8004146:	2b00      	cmp	r3, #0
 8004148:	d104      	bne.n	8004154 <UART_Start_Receive_IT+0x4c>
 800414a:	68fb      	ldr	r3, [r7, #12]
 800414c:	225c      	movs	r2, #92	@ 0x5c
 800414e:	4950      	ldr	r1, [pc, #320]	@ (8004290 <UART_Start_Receive_IT+0x188>)
 8004150:	5299      	strh	r1, [r3, r2]
 8004152:	e02e      	b.n	80041b2 <UART_Start_Receive_IT+0xaa>
 8004154:	68fb      	ldr	r3, [r7, #12]
 8004156:	225c      	movs	r2, #92	@ 0x5c
 8004158:	21ff      	movs	r1, #255	@ 0xff
 800415a:	5299      	strh	r1, [r3, r2]
 800415c:	e029      	b.n	80041b2 <UART_Start_Receive_IT+0xaa>
 800415e:	68fb      	ldr	r3, [r7, #12]
 8004160:	689b      	ldr	r3, [r3, #8]
 8004162:	2b00      	cmp	r3, #0
 8004164:	d10d      	bne.n	8004182 <UART_Start_Receive_IT+0x7a>
 8004166:	68fb      	ldr	r3, [r7, #12]
 8004168:	691b      	ldr	r3, [r3, #16]
 800416a:	2b00      	cmp	r3, #0
 800416c:	d104      	bne.n	8004178 <UART_Start_Receive_IT+0x70>
 800416e:	68fb      	ldr	r3, [r7, #12]
 8004170:	225c      	movs	r2, #92	@ 0x5c
 8004172:	21ff      	movs	r1, #255	@ 0xff
 8004174:	5299      	strh	r1, [r3, r2]
 8004176:	e01c      	b.n	80041b2 <UART_Start_Receive_IT+0xaa>
 8004178:	68fb      	ldr	r3, [r7, #12]
 800417a:	225c      	movs	r2, #92	@ 0x5c
 800417c:	217f      	movs	r1, #127	@ 0x7f
 800417e:	5299      	strh	r1, [r3, r2]
 8004180:	e017      	b.n	80041b2 <UART_Start_Receive_IT+0xaa>
 8004182:	68fb      	ldr	r3, [r7, #12]
 8004184:	689a      	ldr	r2, [r3, #8]
 8004186:	2380      	movs	r3, #128	@ 0x80
 8004188:	055b      	lsls	r3, r3, #21
 800418a:	429a      	cmp	r2, r3
 800418c:	d10d      	bne.n	80041aa <UART_Start_Receive_IT+0xa2>
 800418e:	68fb      	ldr	r3, [r7, #12]
 8004190:	691b      	ldr	r3, [r3, #16]
 8004192:	2b00      	cmp	r3, #0
 8004194:	d104      	bne.n	80041a0 <UART_Start_Receive_IT+0x98>
 8004196:	68fb      	ldr	r3, [r7, #12]
 8004198:	225c      	movs	r2, #92	@ 0x5c
 800419a:	217f      	movs	r1, #127	@ 0x7f
 800419c:	5299      	strh	r1, [r3, r2]
 800419e:	e008      	b.n	80041b2 <UART_Start_Receive_IT+0xaa>
 80041a0:	68fb      	ldr	r3, [r7, #12]
 80041a2:	225c      	movs	r2, #92	@ 0x5c
 80041a4:	213f      	movs	r1, #63	@ 0x3f
 80041a6:	5299      	strh	r1, [r3, r2]
 80041a8:	e003      	b.n	80041b2 <UART_Start_Receive_IT+0xaa>
 80041aa:	68fb      	ldr	r3, [r7, #12]
 80041ac:	225c      	movs	r2, #92	@ 0x5c
 80041ae:	2100      	movs	r1, #0
 80041b0:	5299      	strh	r1, [r3, r2]

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80041b2:	68fb      	ldr	r3, [r7, #12]
 80041b4:	2284      	movs	r2, #132	@ 0x84
 80041b6:	2100      	movs	r1, #0
 80041b8:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80041ba:	68fb      	ldr	r3, [r7, #12]
 80041bc:	2280      	movs	r2, #128	@ 0x80
 80041be:	2122      	movs	r1, #34	@ 0x22
 80041c0:	5099      	str	r1, [r3, r2]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80041c2:	f3ef 8310 	mrs	r3, PRIMASK
 80041c6:	62bb      	str	r3, [r7, #40]	@ 0x28
  return(result);
 80041c8:	6abb      	ldr	r3, [r7, #40]	@ 0x28

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80041ca:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80041cc:	2301      	movs	r3, #1
 80041ce:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80041d0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80041d2:	f383 8810 	msr	PRIMASK, r3
}
 80041d6:	46c0      	nop			@ (mov r8, r8)
 80041d8:	68fb      	ldr	r3, [r7, #12]
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	689a      	ldr	r2, [r3, #8]
 80041de:	68fb      	ldr	r3, [r7, #12]
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	2101      	movs	r1, #1
 80041e4:	430a      	orrs	r2, r1
 80041e6:	609a      	str	r2, [r3, #8]
 80041e8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80041ea:	633b      	str	r3, [r7, #48]	@ 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80041ec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80041ee:	f383 8810 	msr	PRIMASK, r3
}
 80041f2:	46c0      	nop			@ (mov r8, r8)

  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80041f4:	68fb      	ldr	r3, [r7, #12]
 80041f6:	689a      	ldr	r2, [r3, #8]
 80041f8:	2380      	movs	r3, #128	@ 0x80
 80041fa:	015b      	lsls	r3, r3, #5
 80041fc:	429a      	cmp	r2, r3
 80041fe:	d107      	bne.n	8004210 <UART_Start_Receive_IT+0x108>
 8004200:	68fb      	ldr	r3, [r7, #12]
 8004202:	691b      	ldr	r3, [r3, #16]
 8004204:	2b00      	cmp	r3, #0
 8004206:	d103      	bne.n	8004210 <UART_Start_Receive_IT+0x108>
  {
    huart->RxISR = UART_RxISR_16BIT;
 8004208:	68fb      	ldr	r3, [r7, #12]
 800420a:	4a22      	ldr	r2, [pc, #136]	@ (8004294 <UART_Start_Receive_IT+0x18c>)
 800420c:	669a      	str	r2, [r3, #104]	@ 0x68
 800420e:	e002      	b.n	8004216 <UART_Start_Receive_IT+0x10e>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 8004210:	68fb      	ldr	r3, [r7, #12]
 8004212:	4a21      	ldr	r2, [pc, #132]	@ (8004298 <UART_Start_Receive_IT+0x190>)
 8004214:	669a      	str	r2, [r3, #104]	@ 0x68
  }

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8004216:	68fb      	ldr	r3, [r7, #12]
 8004218:	691b      	ldr	r3, [r3, #16]
 800421a:	2b00      	cmp	r3, #0
 800421c:	d019      	beq.n	8004252 <UART_Start_Receive_IT+0x14a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800421e:	f3ef 8310 	mrs	r3, PRIMASK
 8004222:	61fb      	str	r3, [r7, #28]
  return(result);
 8004224:	69fb      	ldr	r3, [r7, #28]
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8004226:	637b      	str	r3, [r7, #52]	@ 0x34
 8004228:	2301      	movs	r3, #1
 800422a:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800422c:	6a3b      	ldr	r3, [r7, #32]
 800422e:	f383 8810 	msr	PRIMASK, r3
}
 8004232:	46c0      	nop			@ (mov r8, r8)
 8004234:	68fb      	ldr	r3, [r7, #12]
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	681a      	ldr	r2, [r3, #0]
 800423a:	68fb      	ldr	r3, [r7, #12]
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	2190      	movs	r1, #144	@ 0x90
 8004240:	0049      	lsls	r1, r1, #1
 8004242:	430a      	orrs	r2, r1
 8004244:	601a      	str	r2, [r3, #0]
 8004246:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004248:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800424a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800424c:	f383 8810 	msr	PRIMASK, r3
}
 8004250:	e018      	b.n	8004284 <UART_Start_Receive_IT+0x17c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004252:	f3ef 8310 	mrs	r3, PRIMASK
 8004256:	613b      	str	r3, [r7, #16]
  return(result);
 8004258:	693b      	ldr	r3, [r7, #16]
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 800425a:	63bb      	str	r3, [r7, #56]	@ 0x38
 800425c:	2301      	movs	r3, #1
 800425e:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004260:	697b      	ldr	r3, [r7, #20]
 8004262:	f383 8810 	msr	PRIMASK, r3
}
 8004266:	46c0      	nop			@ (mov r8, r8)
 8004268:	68fb      	ldr	r3, [r7, #12]
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	681a      	ldr	r2, [r3, #0]
 800426e:	68fb      	ldr	r3, [r7, #12]
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	2120      	movs	r1, #32
 8004274:	430a      	orrs	r2, r1
 8004276:	601a      	str	r2, [r3, #0]
 8004278:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800427a:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800427c:	69bb      	ldr	r3, [r7, #24]
 800427e:	f383 8810 	msr	PRIMASK, r3
}
 8004282:	46c0      	nop			@ (mov r8, r8)
  }
  return HAL_OK;
 8004284:	2300      	movs	r3, #0
}
 8004286:	0018      	movs	r0, r3
 8004288:	46bd      	mov	sp, r7
 800428a:	b010      	add	sp, #64	@ 0x40
 800428c:	bd80      	pop	{r7, pc}
 800428e:	46c0      	nop			@ (mov r8, r8)
 8004290:	000001ff 	.word	0x000001ff
 8004294:	080045ad 	.word	0x080045ad
 8004298:	080043e9 	.word	0x080043e9

0800429c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800429c:	b580      	push	{r7, lr}
 800429e:	b08e      	sub	sp, #56	@ 0x38
 80042a0:	af00      	add	r7, sp, #0
 80042a2:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80042a4:	f3ef 8310 	mrs	r3, PRIMASK
 80042a8:	617b      	str	r3, [r7, #20]
  return(result);
 80042aa:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80042ac:	637b      	str	r3, [r7, #52]	@ 0x34
 80042ae:	2301      	movs	r3, #1
 80042b0:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80042b2:	69bb      	ldr	r3, [r7, #24]
 80042b4:	f383 8810 	msr	PRIMASK, r3
}
 80042b8:	46c0      	nop			@ (mov r8, r8)
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	681b      	ldr	r3, [r3, #0]
 80042be:	681a      	ldr	r2, [r3, #0]
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	4926      	ldr	r1, [pc, #152]	@ (8004360 <UART_EndRxTransfer+0xc4>)
 80042c6:	400a      	ands	r2, r1
 80042c8:	601a      	str	r2, [r3, #0]
 80042ca:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80042cc:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80042ce:	69fb      	ldr	r3, [r7, #28]
 80042d0:	f383 8810 	msr	PRIMASK, r3
}
 80042d4:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80042d6:	f3ef 8310 	mrs	r3, PRIMASK
 80042da:	623b      	str	r3, [r7, #32]
  return(result);
 80042dc:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80042de:	633b      	str	r3, [r7, #48]	@ 0x30
 80042e0:	2301      	movs	r3, #1
 80042e2:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80042e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80042e6:	f383 8810 	msr	PRIMASK, r3
}
 80042ea:	46c0      	nop			@ (mov r8, r8)
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	689a      	ldr	r2, [r3, #8]
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	2101      	movs	r1, #1
 80042f8:	438a      	bics	r2, r1
 80042fa:	609a      	str	r2, [r3, #8]
 80042fc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80042fe:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004300:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004302:	f383 8810 	msr	PRIMASK, r3
}
 8004306:	46c0      	nop			@ (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800430c:	2b01      	cmp	r3, #1
 800430e:	d118      	bne.n	8004342 <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004310:	f3ef 8310 	mrs	r3, PRIMASK
 8004314:	60bb      	str	r3, [r7, #8]
  return(result);
 8004316:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004318:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800431a:	2301      	movs	r3, #1
 800431c:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800431e:	68fb      	ldr	r3, [r7, #12]
 8004320:	f383 8810 	msr	PRIMASK, r3
}
 8004324:	46c0      	nop			@ (mov r8, r8)
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	681a      	ldr	r2, [r3, #0]
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	2110      	movs	r1, #16
 8004332:	438a      	bics	r2, r1
 8004334:	601a      	str	r2, [r3, #0]
 8004336:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004338:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800433a:	693b      	ldr	r3, [r7, #16]
 800433c:	f383 8810 	msr	PRIMASK, r3
}
 8004340:	46c0      	nop			@ (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	2280      	movs	r2, #128	@ 0x80
 8004346:	2120      	movs	r1, #32
 8004348:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	2200      	movs	r2, #0
 800434e:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	2200      	movs	r2, #0
 8004354:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8004356:	46c0      	nop			@ (mov r8, r8)
 8004358:	46bd      	mov	sp, r7
 800435a:	b00e      	add	sp, #56	@ 0x38
 800435c:	bd80      	pop	{r7, pc}
 800435e:	46c0      	nop			@ (mov r8, r8)
 8004360:	fffffedf 	.word	0xfffffedf

08004364 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004364:	b580      	push	{r7, lr}
 8004366:	b084      	sub	sp, #16
 8004368:	af00      	add	r7, sp, #0
 800436a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004370:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8004372:	68fb      	ldr	r3, [r7, #12]
 8004374:	225a      	movs	r2, #90	@ 0x5a
 8004376:	2100      	movs	r1, #0
 8004378:	5299      	strh	r1, [r3, r2]
  huart->TxXferCount = 0U;
 800437a:	68fb      	ldr	r3, [r7, #12]
 800437c:	2252      	movs	r2, #82	@ 0x52
 800437e:	2100      	movs	r1, #0
 8004380:	5299      	strh	r1, [r3, r2]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004382:	68fb      	ldr	r3, [r7, #12]
 8004384:	0018      	movs	r0, r3
 8004386:	f7ff fa61 	bl	800384c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800438a:	46c0      	nop			@ (mov r8, r8)
 800438c:	46bd      	mov	sp, r7
 800438e:	b004      	add	sp, #16
 8004390:	bd80      	pop	{r7, pc}

08004392 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004392:	b580      	push	{r7, lr}
 8004394:	b086      	sub	sp, #24
 8004396:	af00      	add	r7, sp, #0
 8004398:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800439a:	f3ef 8310 	mrs	r3, PRIMASK
 800439e:	60bb      	str	r3, [r7, #8]
  return(result);
 80043a0:	68bb      	ldr	r3, [r7, #8]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80043a2:	617b      	str	r3, [r7, #20]
 80043a4:	2301      	movs	r3, #1
 80043a6:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80043a8:	68fb      	ldr	r3, [r7, #12]
 80043aa:	f383 8810 	msr	PRIMASK, r3
}
 80043ae:	46c0      	nop			@ (mov r8, r8)
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	681a      	ldr	r2, [r3, #0]
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	2140      	movs	r1, #64	@ 0x40
 80043bc:	438a      	bics	r2, r1
 80043be:	601a      	str	r2, [r3, #0]
 80043c0:	697b      	ldr	r3, [r7, #20]
 80043c2:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80043c4:	693b      	ldr	r3, [r7, #16]
 80043c6:	f383 8810 	msr	PRIMASK, r3
}
 80043ca:	46c0      	nop			@ (mov r8, r8)

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	2220      	movs	r2, #32
 80043d0:	67da      	str	r2, [r3, #124]	@ 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	2200      	movs	r2, #0
 80043d6:	66da      	str	r2, [r3, #108]	@ 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	0018      	movs	r0, r3
 80043dc:	f7ff fa2e 	bl	800383c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80043e0:	46c0      	nop			@ (mov r8, r8)
 80043e2:	46bd      	mov	sp, r7
 80043e4:	b006      	add	sp, #24
 80043e6:	bd80      	pop	{r7, pc}

080043e8 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 80043e8:	b580      	push	{r7, lr}
 80043ea:	b094      	sub	sp, #80	@ 0x50
 80043ec:	af00      	add	r7, sp, #0
 80043ee:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 80043f0:	204e      	movs	r0, #78	@ 0x4e
 80043f2:	183b      	adds	r3, r7, r0
 80043f4:	687a      	ldr	r2, [r7, #4]
 80043f6:	215c      	movs	r1, #92	@ 0x5c
 80043f8:	5a52      	ldrh	r2, [r2, r1]
 80043fa:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	2280      	movs	r2, #128	@ 0x80
 8004400:	589b      	ldr	r3, [r3, r2]
 8004402:	2b22      	cmp	r3, #34	@ 0x22
 8004404:	d000      	beq.n	8004408 <UART_RxISR_8BIT+0x20>
 8004406:	e0bf      	b.n	8004588 <UART_RxISR_8BIT+0x1a0>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	681b      	ldr	r3, [r3, #0]
 800440c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800440e:	214c      	movs	r1, #76	@ 0x4c
 8004410:	187b      	adds	r3, r7, r1
 8004412:	801a      	strh	r2, [r3, #0]
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8004414:	187b      	adds	r3, r7, r1
 8004416:	881b      	ldrh	r3, [r3, #0]
 8004418:	b2da      	uxtb	r2, r3
 800441a:	183b      	adds	r3, r7, r0
 800441c:	881b      	ldrh	r3, [r3, #0]
 800441e:	b2d9      	uxtb	r1, r3
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004424:	400a      	ands	r2, r1
 8004426:	b2d2      	uxtb	r2, r2
 8004428:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800442e:	1c5a      	adds	r2, r3, #1
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	655a      	str	r2, [r3, #84]	@ 0x54
    huart->RxXferCount--;
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	225a      	movs	r2, #90	@ 0x5a
 8004438:	5a9b      	ldrh	r3, [r3, r2]
 800443a:	b29b      	uxth	r3, r3
 800443c:	3b01      	subs	r3, #1
 800443e:	b299      	uxth	r1, r3
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	225a      	movs	r2, #90	@ 0x5a
 8004444:	5299      	strh	r1, [r3, r2]

    if (huart->RxXferCount == 0U)
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	225a      	movs	r2, #90	@ 0x5a
 800444a:	5a9b      	ldrh	r3, [r3, r2]
 800444c:	b29b      	uxth	r3, r3
 800444e:	2b00      	cmp	r3, #0
 8004450:	d000      	beq.n	8004454 <UART_RxISR_8BIT+0x6c>
 8004452:	e0a1      	b.n	8004598 <UART_RxISR_8BIT+0x1b0>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004454:	f3ef 8310 	mrs	r3, PRIMASK
 8004458:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 800445a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800445c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800445e:	2301      	movs	r3, #1
 8004460:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004462:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004464:	f383 8810 	msr	PRIMASK, r3
}
 8004468:	46c0      	nop			@ (mov r8, r8)
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	681a      	ldr	r2, [r3, #0]
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	494a      	ldr	r1, [pc, #296]	@ (80045a0 <UART_RxISR_8BIT+0x1b8>)
 8004476:	400a      	ands	r2, r1
 8004478:	601a      	str	r2, [r3, #0]
 800447a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800447c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800447e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004480:	f383 8810 	msr	PRIMASK, r3
}
 8004484:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004486:	f3ef 8310 	mrs	r3, PRIMASK
 800448a:	633b      	str	r3, [r7, #48]	@ 0x30
  return(result);
 800448c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800448e:	647b      	str	r3, [r7, #68]	@ 0x44
 8004490:	2301      	movs	r3, #1
 8004492:	637b      	str	r3, [r7, #52]	@ 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004494:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004496:	f383 8810 	msr	PRIMASK, r3
}
 800449a:	46c0      	nop			@ (mov r8, r8)
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	689a      	ldr	r2, [r3, #8]
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	2101      	movs	r1, #1
 80044a8:	438a      	bics	r2, r1
 80044aa:	609a      	str	r2, [r3, #8]
 80044ac:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80044ae:	63bb      	str	r3, [r7, #56]	@ 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80044b0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80044b2:	f383 8810 	msr	PRIMASK, r3
}
 80044b6:	46c0      	nop			@ (mov r8, r8)

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	2280      	movs	r2, #128	@ 0x80
 80044bc:	2120      	movs	r1, #32
 80044be:	5099      	str	r1, [r3, r2]

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	2200      	movs	r2, #0
 80044c4:	669a      	str	r2, [r3, #104]	@ 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	2200      	movs	r2, #0
 80044ca:	665a      	str	r2, [r3, #100]	@ 0x64

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	4a34      	ldr	r2, [pc, #208]	@ (80045a4 <UART_RxISR_8BIT+0x1bc>)
 80044d2:	4293      	cmp	r3, r2
 80044d4:	d01f      	beq.n	8004516 <UART_RxISR_8BIT+0x12e>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	681b      	ldr	r3, [r3, #0]
 80044da:	685a      	ldr	r2, [r3, #4]
 80044dc:	2380      	movs	r3, #128	@ 0x80
 80044de:	041b      	lsls	r3, r3, #16
 80044e0:	4013      	ands	r3, r2
 80044e2:	d018      	beq.n	8004516 <UART_RxISR_8BIT+0x12e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80044e4:	f3ef 8310 	mrs	r3, PRIMASK
 80044e8:	61bb      	str	r3, [r7, #24]
  return(result);
 80044ea:	69bb      	ldr	r3, [r7, #24]
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80044ec:	643b      	str	r3, [r7, #64]	@ 0x40
 80044ee:	2301      	movs	r3, #1
 80044f0:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80044f2:	69fb      	ldr	r3, [r7, #28]
 80044f4:	f383 8810 	msr	PRIMASK, r3
}
 80044f8:	46c0      	nop			@ (mov r8, r8)
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	681a      	ldr	r2, [r3, #0]
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	4928      	ldr	r1, [pc, #160]	@ (80045a8 <UART_RxISR_8BIT+0x1c0>)
 8004506:	400a      	ands	r2, r1
 8004508:	601a      	str	r2, [r3, #0]
 800450a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800450c:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800450e:	6a3b      	ldr	r3, [r7, #32]
 8004510:	f383 8810 	msr	PRIMASK, r3
}
 8004514:	46c0      	nop			@ (mov r8, r8)
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800451a:	2b01      	cmp	r3, #1
 800451c:	d12f      	bne.n	800457e <UART_RxISR_8BIT+0x196>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	2200      	movs	r2, #0
 8004522:	661a      	str	r2, [r3, #96]	@ 0x60
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004524:	f3ef 8310 	mrs	r3, PRIMASK
 8004528:	60fb      	str	r3, [r7, #12]
  return(result);
 800452a:	68fb      	ldr	r3, [r7, #12]

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800452c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800452e:	2301      	movs	r3, #1
 8004530:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004532:	693b      	ldr	r3, [r7, #16]
 8004534:	f383 8810 	msr	PRIMASK, r3
}
 8004538:	46c0      	nop			@ (mov r8, r8)
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	681a      	ldr	r2, [r3, #0]
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	2110      	movs	r1, #16
 8004546:	438a      	bics	r2, r1
 8004548:	601a      	str	r2, [r3, #0]
 800454a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800454c:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800454e:	697b      	ldr	r3, [r7, #20]
 8004550:	f383 8810 	msr	PRIMASK, r3
}
 8004554:	46c0      	nop			@ (mov r8, r8)

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	681b      	ldr	r3, [r3, #0]
 800455a:	69db      	ldr	r3, [r3, #28]
 800455c:	2210      	movs	r2, #16
 800455e:	4013      	ands	r3, r2
 8004560:	2b10      	cmp	r3, #16
 8004562:	d103      	bne.n	800456c <UART_RxISR_8BIT+0x184>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	2210      	movs	r2, #16
 800456a:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	2258      	movs	r2, #88	@ 0x58
 8004570:	5a9a      	ldrh	r2, [r3, r2]
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	0011      	movs	r1, r2
 8004576:	0018      	movs	r0, r3
 8004578:	f7ff f970 	bl	800385c <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800457c:	e00c      	b.n	8004598 <UART_RxISR_8BIT+0x1b0>
        HAL_UART_RxCpltCallback(huart);
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	0018      	movs	r0, r3
 8004582:	f7fc f92f 	bl	80007e4 <HAL_UART_RxCpltCallback>
}
 8004586:	e007      	b.n	8004598 <UART_RxISR_8BIT+0x1b0>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	699a      	ldr	r2, [r3, #24]
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	681b      	ldr	r3, [r3, #0]
 8004592:	2108      	movs	r1, #8
 8004594:	430a      	orrs	r2, r1
 8004596:	619a      	str	r2, [r3, #24]
}
 8004598:	46c0      	nop			@ (mov r8, r8)
 800459a:	46bd      	mov	sp, r7
 800459c:	b014      	add	sp, #80	@ 0x50
 800459e:	bd80      	pop	{r7, pc}
 80045a0:	fffffedf 	.word	0xfffffedf
 80045a4:	40004800 	.word	0x40004800
 80045a8:	fbffffff 	.word	0xfbffffff

080045ac <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 80045ac:	b580      	push	{r7, lr}
 80045ae:	b094      	sub	sp, #80	@ 0x50
 80045b0:	af00      	add	r7, sp, #0
 80045b2:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 80045b4:	204e      	movs	r0, #78	@ 0x4e
 80045b6:	183b      	adds	r3, r7, r0
 80045b8:	687a      	ldr	r2, [r7, #4]
 80045ba:	215c      	movs	r1, #92	@ 0x5c
 80045bc:	5a52      	ldrh	r2, [r2, r1]
 80045be:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	2280      	movs	r2, #128	@ 0x80
 80045c4:	589b      	ldr	r3, [r3, r2]
 80045c6:	2b22      	cmp	r3, #34	@ 0x22
 80045c8:	d000      	beq.n	80045cc <UART_RxISR_16BIT+0x20>
 80045ca:	e0bf      	b.n	800474c <UART_RxISR_16BIT+0x1a0>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80045d2:	214c      	movs	r1, #76	@ 0x4c
 80045d4:	187b      	adds	r3, r7, r1
 80045d6:	801a      	strh	r2, [r3, #0]
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80045dc:	64bb      	str	r3, [r7, #72]	@ 0x48
    *tmp = (uint16_t)(uhdata & uhMask);
 80045de:	187b      	adds	r3, r7, r1
 80045e0:	183a      	adds	r2, r7, r0
 80045e2:	881b      	ldrh	r3, [r3, #0]
 80045e4:	8812      	ldrh	r2, [r2, #0]
 80045e6:	4013      	ands	r3, r2
 80045e8:	b29a      	uxth	r2, r3
 80045ea:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80045ec:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80045f2:	1c9a      	adds	r2, r3, #2
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	655a      	str	r2, [r3, #84]	@ 0x54
    huart->RxXferCount--;
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	225a      	movs	r2, #90	@ 0x5a
 80045fc:	5a9b      	ldrh	r3, [r3, r2]
 80045fe:	b29b      	uxth	r3, r3
 8004600:	3b01      	subs	r3, #1
 8004602:	b299      	uxth	r1, r3
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	225a      	movs	r2, #90	@ 0x5a
 8004608:	5299      	strh	r1, [r3, r2]

    if (huart->RxXferCount == 0U)
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	225a      	movs	r2, #90	@ 0x5a
 800460e:	5a9b      	ldrh	r3, [r3, r2]
 8004610:	b29b      	uxth	r3, r3
 8004612:	2b00      	cmp	r3, #0
 8004614:	d000      	beq.n	8004618 <UART_RxISR_16BIT+0x6c>
 8004616:	e0a1      	b.n	800475c <UART_RxISR_16BIT+0x1b0>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004618:	f3ef 8310 	mrs	r3, PRIMASK
 800461c:	623b      	str	r3, [r7, #32]
  return(result);
 800461e:	6a3b      	ldr	r3, [r7, #32]
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004620:	647b      	str	r3, [r7, #68]	@ 0x44
 8004622:	2301      	movs	r3, #1
 8004624:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004626:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004628:	f383 8810 	msr	PRIMASK, r3
}
 800462c:	46c0      	nop			@ (mov r8, r8)
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	681a      	ldr	r2, [r3, #0]
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	494a      	ldr	r1, [pc, #296]	@ (8004764 <UART_RxISR_16BIT+0x1b8>)
 800463a:	400a      	ands	r2, r1
 800463c:	601a      	str	r2, [r3, #0]
 800463e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004640:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004642:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004644:	f383 8810 	msr	PRIMASK, r3
}
 8004648:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800464a:	f3ef 8310 	mrs	r3, PRIMASK
 800464e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return(result);
 8004650:	6afb      	ldr	r3, [r7, #44]	@ 0x2c

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004652:	643b      	str	r3, [r7, #64]	@ 0x40
 8004654:	2301      	movs	r3, #1
 8004656:	633b      	str	r3, [r7, #48]	@ 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004658:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800465a:	f383 8810 	msr	PRIMASK, r3
}
 800465e:	46c0      	nop			@ (mov r8, r8)
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	689a      	ldr	r2, [r3, #8]
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	681b      	ldr	r3, [r3, #0]
 800466a:	2101      	movs	r1, #1
 800466c:	438a      	bics	r2, r1
 800466e:	609a      	str	r2, [r3, #8]
 8004670:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004672:	637b      	str	r3, [r7, #52]	@ 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004674:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004676:	f383 8810 	msr	PRIMASK, r3
}
 800467a:	46c0      	nop			@ (mov r8, r8)

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	2280      	movs	r2, #128	@ 0x80
 8004680:	2120      	movs	r1, #32
 8004682:	5099      	str	r1, [r3, r2]

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	2200      	movs	r2, #0
 8004688:	669a      	str	r2, [r3, #104]	@ 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	2200      	movs	r2, #0
 800468e:	665a      	str	r2, [r3, #100]	@ 0x64

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	4a34      	ldr	r2, [pc, #208]	@ (8004768 <UART_RxISR_16BIT+0x1bc>)
 8004696:	4293      	cmp	r3, r2
 8004698:	d01f      	beq.n	80046da <UART_RxISR_16BIT+0x12e>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	681b      	ldr	r3, [r3, #0]
 800469e:	685a      	ldr	r2, [r3, #4]
 80046a0:	2380      	movs	r3, #128	@ 0x80
 80046a2:	041b      	lsls	r3, r3, #16
 80046a4:	4013      	ands	r3, r2
 80046a6:	d018      	beq.n	80046da <UART_RxISR_16BIT+0x12e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80046a8:	f3ef 8310 	mrs	r3, PRIMASK
 80046ac:	617b      	str	r3, [r7, #20]
  return(result);
 80046ae:	697b      	ldr	r3, [r7, #20]
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80046b0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80046b2:	2301      	movs	r3, #1
 80046b4:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80046b6:	69bb      	ldr	r3, [r7, #24]
 80046b8:	f383 8810 	msr	PRIMASK, r3
}
 80046bc:	46c0      	nop			@ (mov r8, r8)
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	681a      	ldr	r2, [r3, #0]
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	4928      	ldr	r1, [pc, #160]	@ (800476c <UART_RxISR_16BIT+0x1c0>)
 80046ca:	400a      	ands	r2, r1
 80046cc:	601a      	str	r2, [r3, #0]
 80046ce:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80046d0:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80046d2:	69fb      	ldr	r3, [r7, #28]
 80046d4:	f383 8810 	msr	PRIMASK, r3
}
 80046d8:	46c0      	nop			@ (mov r8, r8)
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80046de:	2b01      	cmp	r3, #1
 80046e0:	d12f      	bne.n	8004742 <UART_RxISR_16BIT+0x196>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	2200      	movs	r2, #0
 80046e6:	661a      	str	r2, [r3, #96]	@ 0x60
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80046e8:	f3ef 8310 	mrs	r3, PRIMASK
 80046ec:	60bb      	str	r3, [r7, #8]
  return(result);
 80046ee:	68bb      	ldr	r3, [r7, #8]

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80046f0:	63bb      	str	r3, [r7, #56]	@ 0x38
 80046f2:	2301      	movs	r3, #1
 80046f4:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80046f6:	68fb      	ldr	r3, [r7, #12]
 80046f8:	f383 8810 	msr	PRIMASK, r3
}
 80046fc:	46c0      	nop			@ (mov r8, r8)
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	681a      	ldr	r2, [r3, #0]
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	681b      	ldr	r3, [r3, #0]
 8004708:	2110      	movs	r1, #16
 800470a:	438a      	bics	r2, r1
 800470c:	601a      	str	r2, [r3, #0]
 800470e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004710:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004712:	693b      	ldr	r3, [r7, #16]
 8004714:	f383 8810 	msr	PRIMASK, r3
}
 8004718:	46c0      	nop			@ (mov r8, r8)

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	69db      	ldr	r3, [r3, #28]
 8004720:	2210      	movs	r2, #16
 8004722:	4013      	ands	r3, r2
 8004724:	2b10      	cmp	r3, #16
 8004726:	d103      	bne.n	8004730 <UART_RxISR_16BIT+0x184>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	2210      	movs	r2, #16
 800472e:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	2258      	movs	r2, #88	@ 0x58
 8004734:	5a9a      	ldrh	r2, [r3, r2]
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	0011      	movs	r1, r2
 800473a:	0018      	movs	r0, r3
 800473c:	f7ff f88e 	bl	800385c <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8004740:	e00c      	b.n	800475c <UART_RxISR_16BIT+0x1b0>
        HAL_UART_RxCpltCallback(huart);
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	0018      	movs	r0, r3
 8004746:	f7fc f84d 	bl	80007e4 <HAL_UART_RxCpltCallback>
}
 800474a:	e007      	b.n	800475c <UART_RxISR_16BIT+0x1b0>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	699a      	ldr	r2, [r3, #24]
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	681b      	ldr	r3, [r3, #0]
 8004756:	2108      	movs	r1, #8
 8004758:	430a      	orrs	r2, r1
 800475a:	619a      	str	r2, [r3, #24]
}
 800475c:	46c0      	nop			@ (mov r8, r8)
 800475e:	46bd      	mov	sp, r7
 8004760:	b014      	add	sp, #80	@ 0x50
 8004762:	bd80      	pop	{r7, pc}
 8004764:	fffffedf 	.word	0xfffffedf
 8004768:	40004800 	.word	0x40004800
 800476c:	fbffffff 	.word	0xfbffffff

08004770 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8004770:	b580      	push	{r7, lr}
 8004772:	b082      	sub	sp, #8
 8004774:	af00      	add	r7, sp, #0
 8004776:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8004778:	46c0      	nop			@ (mov r8, r8)
 800477a:	46bd      	mov	sp, r7
 800477c:	b002      	add	sp, #8
 800477e:	bd80      	pop	{r7, pc}

08004780 <memset>:
 8004780:	0003      	movs	r3, r0
 8004782:	1882      	adds	r2, r0, r2
 8004784:	4293      	cmp	r3, r2
 8004786:	d100      	bne.n	800478a <memset+0xa>
 8004788:	4770      	bx	lr
 800478a:	7019      	strb	r1, [r3, #0]
 800478c:	3301      	adds	r3, #1
 800478e:	e7f9      	b.n	8004784 <memset+0x4>

08004790 <__libc_init_array>:
 8004790:	b570      	push	{r4, r5, r6, lr}
 8004792:	2600      	movs	r6, #0
 8004794:	4c0c      	ldr	r4, [pc, #48]	@ (80047c8 <__libc_init_array+0x38>)
 8004796:	4d0d      	ldr	r5, [pc, #52]	@ (80047cc <__libc_init_array+0x3c>)
 8004798:	1b64      	subs	r4, r4, r5
 800479a:	10a4      	asrs	r4, r4, #2
 800479c:	42a6      	cmp	r6, r4
 800479e:	d109      	bne.n	80047b4 <__libc_init_array+0x24>
 80047a0:	2600      	movs	r6, #0
 80047a2:	f000 f819 	bl	80047d8 <_init>
 80047a6:	4c0a      	ldr	r4, [pc, #40]	@ (80047d0 <__libc_init_array+0x40>)
 80047a8:	4d0a      	ldr	r5, [pc, #40]	@ (80047d4 <__libc_init_array+0x44>)
 80047aa:	1b64      	subs	r4, r4, r5
 80047ac:	10a4      	asrs	r4, r4, #2
 80047ae:	42a6      	cmp	r6, r4
 80047b0:	d105      	bne.n	80047be <__libc_init_array+0x2e>
 80047b2:	bd70      	pop	{r4, r5, r6, pc}
 80047b4:	00b3      	lsls	r3, r6, #2
 80047b6:	58eb      	ldr	r3, [r5, r3]
 80047b8:	4798      	blx	r3
 80047ba:	3601      	adds	r6, #1
 80047bc:	e7ee      	b.n	800479c <__libc_init_array+0xc>
 80047be:	00b3      	lsls	r3, r6, #2
 80047c0:	58eb      	ldr	r3, [r5, r3]
 80047c2:	4798      	blx	r3
 80047c4:	3601      	adds	r6, #1
 80047c6:	e7f2      	b.n	80047ae <__libc_init_array+0x1e>
 80047c8:	080055c0 	.word	0x080055c0
 80047cc:	080055c0 	.word	0x080055c0
 80047d0:	080055c4 	.word	0x080055c4
 80047d4:	080055c0 	.word	0x080055c0

080047d8 <_init>:
 80047d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80047da:	46c0      	nop			@ (mov r8, r8)
 80047dc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80047de:	bc08      	pop	{r3}
 80047e0:	469e      	mov	lr, r3
 80047e2:	4770      	bx	lr

080047e4 <_fini>:
 80047e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80047e6:	46c0      	nop			@ (mov r8, r8)
 80047e8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80047ea:	bc08      	pop	{r3}
 80047ec:	469e      	mov	lr, r3
 80047ee:	4770      	bx	lr
